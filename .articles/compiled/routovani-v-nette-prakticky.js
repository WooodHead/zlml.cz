export default {
  "attributes": {
    "id": "314fff27-204c-449e-9975-572db54475a2",
    "timestamp": 1375611559000,
    "title": "Routování v Nette - prakticky",
    "slug": "routovani-v-nette-prakticky"
  },
  "body": "<div class=\"alert alert-success\">Tento článek byl naposledy revidován, aktualizován a rozšířen <strong>27. června 2014</strong>...</div>\n\nV následujícím článku se budu opírat o teorii napsanou v [dokumentaci](http://doc.nette.org/cs/routing).\nJelikož jsem se však Nette učil sám, tak vím jak je těžké routování pochopit\na zvlášť potom z dokumentace, která spíše ukazuje fičury, než jak na to. A vzhledem k tomu, že mi\npod rukama prošlo velké množství velmi různorodých aplikací, kád bych zde uvedl příklady\nadresářové struktury, rout pro daný praktický problém a vzniklé URL adresy.\nZačíná přehlídka několika možných rout. Myslím si, že celá řada příkladů bude užitečnější, než teorie.\n\nZáklad všeho je porozumět tomu, jak se v Nette vytváří [odkazy](http://doc.nette.org/cs/presenters#toc-vytvareni-odkazu).\nOd toho se velmi podobně sestavují obecné routy tak, aby alespoň jedna seděla svým tvarem na daný odkaz.\n\n# První kroky\n\nZačněme jednoduchou statickou stránkou, která má tuto jednoduchou adresářovou strukturu:\n\n```\napp/\n├─── config/\n├─── model/\n├─── presenters/\n│     └── HomepagePresenter.php\n│\n├─── router/\n├─── templates/\n│     ├── Homepage/\n│     │    ├── kontakt.latte   (zde jednotlivé stránky statického webu)\n│     │    └── ...\n│     └── @layout.latte\n│\n└─── bootstrap.php\n```\n\nTo znamená, že ne každou stránku se budu odkazovat přibližně jako <code>Homepage:kontakt</code>. Samozřejmě \nvždy se záměnou šablony (v tomto případě kontakt - kontakt.latte). To je dost triviální a stačilo by například:\n\n```php\n$router[] = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');\n```\n\nTo je sice funkční, bohužel je to spíše teoretická routa, protože výsledek je otřesný:\n\n```\nhttp://zlml.cz/homepage/kontakt\n```\n\nTuto routu píšu téměř všude. Je to routa velmi obecná a říká přibližně následující:\nBude-li se někdo odkazovat v obecném tvaru `Presenter:view`, pochop `Presenter` jako název presenteru (např. **Homepage**Presenter) a hledej tedy soubor `HomepagePresenter.php`\na `view` bude šablona presenteru, hledej ji tedy ve složce `Presenter/view.latte` a sestav URL která bude přesně v tomto tvaru.\nHomepage:default pouze říká co je výchozí hodnota a co se má hledat, pokud nebude specifikována konkrétní šablona.\n\nPro takto malý web je mnohem lepší specifikovat konkrétnější routu, která přijde **před** onu obecnou:\n\n```php\n$router[] = new Route('<action>', 'Homepage:default');\n```\n\nCož udělá téměř to samé, jen vypustí z URL nadbytečnou informaci o presenteru. Vždy používáme HomepagePresenter, jen\nse mění cílová šablona podle URL:\n\n```\nhttp://zlml.cz/kontakt\n```\n\nVýsledná sada rout pro takovouto malou statickou stránku by tedy mohla vypadat takto:\n\n```php\npublic function createRouter() {\n\t$router = new RouteList();\n\t$router[] = new Route('<action>', 'Homepage:default');\n\t$router[] = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');\n\treturn $router;\n}\n```\n\nDále je vhodné používat např. soubor <code>sitemap.xml</code>. Pokud ho také umístím do stejného adresáře jako šablony, routa je opět jednoduchá:\n\n```php\n$router[] = new Route('sitemap.xml', 'Homepage:sitemap');\n```\n\nHledá se šablona <code>sitemap.latte</code>. Přečtěte si jak vytvořit tuto šablonu v článku [RSS a Sitemap jednoduše a rychle](rss-a-sitemap-jednoduse-a-rychle). Výsledná URL je tak jak má být:\n\n```\nhttp://zlml.cz/sitemap.xml\n```\n\nTo samé lze udělal pro RSS.\n\n# Jdeme do hloubky\n\nTrošku složitější routování přichází vždy když chcete udělat něco speciálního.\nNapříklad to, aby číslo za URL udávalo číslo stránky v paginatoru:\n\n```\nhttp://zlml.cz/2\n```\n\n```php\n$router[] = new Route(\"[<paginator-page [1](2)>]\", array(\n\t'presenter' => 'Homepage',\n\t'action' => 'default',\n\t'paginator-page' => 1\n));\n```\n\nZde už je nutné druhý parametr rozepsat a více specifikovat. Toto akceptuje pouze konkrétní čísla.\na jako druhou specialitu lze napsat takovou routu, která bude tvořit URL z názvů článků:\n\n```\nhttp://zlml.cz/using-fulltext-searching-with-innodb\n```\n\n```php\n$router[] = new Route('<id>', array(\n\t'presenter' => 'Single',\n\t'action' => 'article',\n\t'id' => array(\n\t\tRoute::FILTER_IN => function ($url) {\n\t\t\treturn $this->posts->getIdByUrl($url);\n\t\t},\n\t\tRoute::FILTER_OUT => function ($id) {\n\t\t\treturn $this->posts->getUrlById($id);\n\t\t},\n\t),\n));\n```\n\nA není úplně na škodu vytvořit routu, která bude řešit napríklad vyhledávání:\n\n```\nhttp://zlml.cz/search/fio%20api\n```\n\n```php\n$router[] = new Route('search[/<search>]', 'Search:default');\n```\n\nToto jsou jednoduché routy pro jednoduchou adresářovou strukturu. Lehce složitější jsou pro\nmodulární strukturu, kdy je zapotřebí specifikovat modul:\n\n```\nhttp://zlml.cz/rss.xml\n```\n\n```php\n$router[] = new Route('rss.xml', 'Front:Blog:rss');\n```\n\nChová se to stejně jako u předchozího příkladu se `sitemap.xml`, v tomto příkladu však routa hledá `BlogPresenter.php` ve složce `FrontModule` a šablonu `rss.latte`, také v tomto modulu. U rout pro modulární aplikace již raději rozepisuji druhý parametr, protože je to přehlednější. Následující routa zvládne jazykové mutace pro FrontModul, jinak je to opět ta nejobecnější routa vůbec:\n\n```\nhttp://zlml.cz/en/site/kontakt\n```\n\n```php\n$router[] = new Route('[<lang cs|sk|en>/]<presenter>/<action>[/<id>]', array(\n\t'module' => 'Front',\n\t'presenter' => 'Homepage',\n\t'action' => 'default',\n));\n```\n\nTo samé, ale opět o trošku náročnější. Tentokrát pro UserModule, který je na jiné URL, než FrontModule:\n\n```\nhttp://zlml.cz/user/en/setting/password\n```\n\n```php\n$router[] = new Route('user/[<lang cs|sk|en>/]<presenter>/<action>[/<id [0-9]+>]', array(\n\t'module' => 'User',\n\t'presenter' => 'Board',\n\t'action' => 'default',\n));\n```\n\nA na závěr ještě poslední přehled možných rout jako příklady toho co je možné.\n\n```php\n$router[] = new Route('sitemap.xml', 'Front:Export:sitemap');\n$router[] = new Route('kategorie/<category>', 'Front:Product:default');\n$router[] = new Route('produkt/<product>', 'Front:Product:detail');\n$router[] = new Route('', 'Front:Product:default');\n$router[] = new Route('admin/sign-<action>', 'Admin:Sign:');\n$router[] = new Route('registrace/', 'Front:Register:new');\n$router[] = new Route('index.php', 'Homepage:default', Route::ONE_WAY);\n$router[] = new CliRouter(array('action' => 'Cli:Cli:cron'));\n$router[] = new \\App\\RestRouter('api[/<presenter>[/<id>]]', array( //vyžaduje speciální objekt (není součástí Nette)\n\t'module' => 'Rest',\n\t'presenter' => 'Resource',\n\t'action' => 'get',\n), \\App\\RestRouter::RESTFUL);\n```\n\nJe zcela zřejmé, že se všechny konstrukce stále opakují, proto považuji za opravdu důležité\nperfektně pochopit tvorbu odkazů a následně je to možná trochu o experimentování, ale s\ntouto sadou příkladů bude myslím jednoduché najít podobnou routu, jaká je zrovna potřeba.\n\nJak na v posledním příkladu zmíněný CLI router se dočtete v článku [Nette 2.1-dev CliRouter](nette-2-1-dev-clirouter).\n\nMáte nějakou zajímavou routu? Podělte se o ni... (-:"
}
