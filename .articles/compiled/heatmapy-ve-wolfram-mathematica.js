export default {
  "attributes": {
    "id": "fc390f36-af8a-43af-a34c-619f305e288c",
    "timestamp": 1414243893000,
    "title": "Heatmapy ve Wolfram Mathematica",
    "slug": "heatmapy-ve-wolfram-mathematica"
  },
  "body": "<p><img src=\"https://zlmlcz-media.s3-eu-west-1.amazonaws.com/1bb55605-d567-4fe0-b1d1-69e921940e0d/heatmap1.png\" alt=\"\"></p>\n<p>Právě teď jsem řešil jak vizualizovat nějaká data, která jsou v maticovém formátu. Pro mé účely jsou prakticky dva grafy. Prvním grafem je heatmapa (viz obrázek) a druhým klasický 3D graf, který data reprezentuje stejně dobře (možná lépe), ale v určitých případech je špatně čitelný. Zejména pak když není možnost s grafem otáčet. V mém případě bylo zapotřebí poměrně velké množství grafů, které jsem nakonec minimalizoval na počet 40, takže bylo nemožné je vykreslovat ručně. Zvlášť pokud jsem zajistit, že budou všechny grafy stejné.</p>\n<p>K tomu jak jsem postupoval se dostanu v další části. Teď však ještě pár úvodních slov k tomu, co jsem to vlastně měřil. Cílem měření bylo změřit s využitím jasoměrů hodnoty jasů <em>L [cd/m^2]</em> určitých objektů a jejich okolí v pravidelné síti kontrolních bodů při různém osvětlení (denní, sdružené a umělé) a různé vzdálenosti a úhlu. Z těchto jasů je zapotřebí spočítat kontrast <em>C [-]</em> a tuto kontrastní mapu také vizualizovat. Je tedy zřejmé, že stačí změřit pár objektů a počet grafů rychle roste.</p>\n<h2 id=\"vizualizace-dat\">Vizualizace dat <a href=\"#vizualizace-dat\">#</a></h2><p><img src=\"https://zlmlcz-media.s3-eu-west-1.amazonaws.com/40a97326-5410-4385-821c-62dc8542387a/3d2.png\" alt=\"\">\nTato část se sice jmenuje vizualizace dat, ale aby bylo co vizualizovat, je zapotřebí data připravit. Já jsem zvolil JSON formát vstupu, protože se velmi jednoduše parsuje a matici v něm mohu zapsat také jednoduše. Z měření jednoho objektu mi tedy stačí data v tomto formátu:</p>\n<pre><code class=\"lang-javascript\">{\n    &quot;Tabule - umělé osvětlení&quot;: {\n        &quot;up&quot;: &quot;STROP&quot;,\n        &quot;down&quot;: &quot;PODLAHA&quot;,\n        &quot;left&quot;: &quot;OKNA&quot;,\n        &quot;right&quot;: &quot;DVEŘE&quot;,\n        &quot;values&quot;: [\n            [121.3, 146, 74.2, 39.5, 27.6, 53.9, 66.7],\n            [96.5, 86.1, 80.2, 54.8, 47.3, 65.8, 79.5],\n            [82.6, 78, 71.8, 65.3, 58.7, 62.3, 79.5],\n            [63.8, 71.5, 66.7, 63, 59.4, 63.2, 77.5],\n            [62.4, 61, 63.9, 62.4, 62.7, 63.4, 70.5]\n        ]\n    }\n}\n</code></pre>\n<p>Takových dat je již možné se chytit a vykreslit celou řadu průběhů. Samotný parser se však postupem času poměrně zkomplikoval. Prohlédnout si ho však můžete <a href=\"https://gist.github.com/mrtnzlml/9ec02541555e419a8df9#file-parser7-php\">na GitHub Gistu</a> a to včetně kompletního vstupu a výsledného výstupu pro Wolfram Mathematica. Tento výstup je v zásadě jednoduchý. Například graf, který je v úvodu vykreslíme pomocí následujícího výstřižku:</p>\n<pre><code class=\"lang-php\">Show[MatrixPlot[{\n    {-0.063, -0.753, -0.706, -0.788, -0.443, 0.311, 0.327},\n    {0.619, 0.613, 0.671, -0.013, -0.162, 0.295, 0.344},\n    {0.297, 0.441, 0.351, 0.178, 0.087, 0.166, 0.339},\n    {-0.085, 0.27, 0.225, 0.155, 0.118, 0.163, 0.317},\n    {-0.033, 0.017, -0.015, 0.03, 0.019, 0.077, 0.198}\n}, PlotTheme -&gt; &quot;Detailed&quot;, Mesh -&gt; Automatic, MeshStyle -&gt; Directive[GrayLevel[0], Opacity[0.5], Dashing[{0, Small}]]],\nFrameLabel -&gt; {{HoldForm[OKNA], HoldForm[DVEŘE]}, {HoldForm[PODLAHA], HoldForm[STROP]}},\nPlotLabel -&gt; RawBoxes[&quot;Tabule - umělé osvětlení, zezadu (kontrast, Lp = 59.7)&quot;], LabelStyle -&gt; {GrayLevel[0]}]\n</code></pre>\n<p><img src=\"https://zlmlcz-media.s3-eu-west-1.amazonaws.com/79b1a8e3-1efc-42b0-bb79-3409b9acd49d/3d.png\" alt=\"\"></p>\n<p>Kromě nastavování popisek a záhlaví, tak je důležitý hlavně blok kde jsou data. V tomto grafu není žádná zrada. Malá zrada číhá až v 3D grafech. Zde je háček v tom, že občas relativně malá plocha grafu ustřelí mimo průměrnou hodnotu všech bodů a na grafu dojde k oříznutí. Aby se tomuto efektu předešlo, je bezpodmínečně nutné nastavit grafu <code>PlotRange -&gt; All</code>. Tím se vykreslí celý graf nezávisle na tom, jaké obsahuje extrémní hodnoty. Je však otázka jestli je to žádoucí. V mém případě ano, ale umím si přestavit případy, kdy by velká špička totálně zničila celý graf a bylo by výhodnější spičku oříznout.</p>\n<pre><code class=\"lang-php\">ListPlot3D[{\n    {62.4, 61, 63.9, 62.4, 62.7, 63.4, 70.5},\n    {63.8, 71.5, 66.7, 63, 59.4, 63.2, 77.5},\n    {82.6, 78, 71.8, 65.3, 58.7, 62.3, 79.5},\n    {96.5, 86.1, 80.2, 54.8, 47.3, 65.8, 79.5},\n    {121.3, 146, 74.2, 39.5, 27.6, 53.9, 66.7}\n}, ColorFunction -&gt; &quot;DarkRainbow&quot;, PlotRange -&gt; All, PlotTheme -&gt; &quot;Business&quot;]\n</code></pre>\n<p>Pro vykreslení horního pohledu stačí přidat další atribut <code>ViewPoint -&gt; Above</code>, čímž získáme teplotní mapu v trošku jiném zobrazení a díky Business tématu budou na grafu vidět i vrstevnice, což ulehčí představu o tom jak je graf tvarově rozložen. <span style=\"color:green\">Také pozor na to, že do funkcí <code>MatrixPlot</code> a <code>ListPlot3D</code> se zadávají matice v obráceném pořadí z hlediska řádek matice! Dojde tak ke vykreslení stejných map.</span></p>\n"
}
