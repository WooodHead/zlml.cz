export default {
  "attributes": {
    "id": "45b197e5-9e04-43d5-b48e-58f9a7f90887",
    "timestamp": 1478454487000,
    "title": "Tester: vlastní Output Handler",
    "slug": "tester-vlastni-output-handler"
  },
  "body": "Output Handler umožňuje změnit finální podobu výstupu z Nette Testeru. Výstup může [vypadat například takto](https://travis-ci.org/adeira/connector/jobs/173698139). Osobně se mi tento výstup líbí víc, protože místo teček rovnou vidím co se skutečně spouští. Může se to hodit a sám jsem se přistil, že občas spouštím testy takto:\n\n```\nvendor/bin/run-tests -o tap\n```\n\nA to jen proto, abych viděl co se zrovna testuje (TAP). Napsat si vlastní výstupní handler je jednoduché. Jen je třeba dávat pozor na to, co je [napsáno v dokumentaci](https://tester.nette.org/#toc-setup-path), protože to [nemusí být dobře](https://github.com/nette/web-content/pull/473)... :)\n\nStačí Tester spouštět s přepínačem `--setup`:\n\n```\nvendor/bin/tester --setup tests/runner-setup.php\n\n# or Testbench edition:\nvendor/bin/run-tests --setup tests/runner-setup.php\n```\n\nSkript `runner-setup.php` potom obsahuje samotný handler který může vypadat třeba takto (PHP 7):\n\n```php\n<?php declare(strict_types = 1);\n\nuse Tester\\Dumper;\nuse Tester\\Runner\\Runner;\n\n/** @var \\Tester\\Runner\\Runner $runner */\n$runner->outputHandlers = []; // delete native output handlers\n$runner->outputHandlers[] = new class ($runner) extends \\Tester\\Runner\\Output\\ConsolePrinter\n{\n\n\tpublic function begin()\n\t{\n\t\tob_start();\n\t\tparent::begin();\n\t\techo rtrim(ob_get_clean()) . ' | ' . getenv('BOOTSTRAP') . \"\n\n\";\n\t}\n\n\tpublic function result($testName, $result, $message)\n\t{\n\t\t$outputs = [\n\t\t\tRunner::PASSED => Dumper::color('green', '✔ ' . $testName),\n\t\t\tRunner::SKIPPED => Dumper::color('olive', 's ' . $testName) . \"($message)\",\n\t\t\tRunner::FAILED => Dumper::color('red', '✖ ' . $testName) . \"\n\" . $this->indent($message, 3) . \"\n\",\n\t\t];\n\t\techo $this->indent($outputs[$result], 2) . PHP_EOL;\n\t}\n\n\tpublic function end()\n\t{\n\t\tob_start();\n\t\tparent::end();\n\t\techo \"\n\" . trim(ob_get_clean()) . \"\n\";\n\t}\n\n\tprivate function indent($message, $spaces)\n\t{\n\t\tif ($message) {\n\t\t\t$result = '';\n\t\t\tforeach (explode(PHP_EOL, $message) as $line) {\n\t\t\t\t$result .= str_repeat(' ', $spaces) . $line . PHP_EOL;\n\t\t\t}\n\t\t\treturn rtrim($result, PHP_EOL);\n\t\t}\n\t\treturn $message;\n\t}\n\n};\n```\n\nJe to vlastně jen o třech metodách. Začátek `begin` a konec `end` slouží jen k ořezání mezer popř. k doplnění dodatečných informací. Nejzajímavější je metoda `result`, která velmi mění způsob vykreslení jednotlivých řádek. Bohužel Tester sám od sebe ořezává výstupní texty a podle toho jak jsem to rychle prohlížel, tak s tím nejde nic moc udělat. Představoval bych si, že výstupní texty budou trošku lepší, ale to bez PR do `Nette\\Testr`u asi nepůjde...\n\nTo by bylo. Pozornější čtenáři kódu mohou mít teď otázku co je to `getenv('BOOTSTRAP')`? Dlouze jsem řešil jak psát testy s ohledem na to, že se mi nechce pořád dělat require `bootstrap.php`, protože mám testy hodně zanořené a cesty k tomutou souboru bývají hodně dlouhé. Navíc je to nesmírně limitující, protože nelze jednoduše bez úpravy testů měnit adresářovou strukturu. Řešením je trošku to obejít:\n\n```php\nrequire getenv('BOOTSTRAP');\n```\n\nExistuje [více řešení](https://github.com/nette/tester/issues/275), ale toto mi sedělo nejlépe. Užitečné je pak napsat si vlastní skript `tests/run` a všechno to spojit:\n\n```bash\n#!/usr/bin/env bash\n\nBOOTSTRAP=$(pwd)/tests/bootstrap.php vendor/bin/run-tests --setup tests/runner-setup.php\n```\n\nSpuštění je tak jednoduché, jako je jednoduché napsat `tests/run`. Pokud by si to chtěl někdo prohlédnout více detailně a popř. si s tím pohrát, tak je vše zde popisované implementováno v projektu [Adeira\\Connector na GitHubu](https://github.com/adeira/connector).\n\n:)"
}
