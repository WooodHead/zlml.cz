export default {
  "attributes": {
    "id": "a285c880-267e-4070-9139-98b86d63772e",
    "timestamp": 1375044812000,
    "title": "CRON validátor",
    "slug": "cron-validator"
  },
  "body": "A jak už to tak bývá, tak opět ohnutý pro Nette. Tentokráte inspirovaný řešením ISPConfigu.\n\n# Můžeš tohle, nesmíš tamto\n\n\nSamotný CRON zápis je velmi rozmanitý a proto se omezím pouze na základní požadavky:\n\n1.  obecně jsou povolené znaky <code>0-9</code>, <code>čárka</code>, <code>*</code>, <code>-</code>, <code>/</code>\n2.  <code>čárka</code>, <code>-</code> a <code>/</code> nesmí být nikdy vedle sebe\n3.  <code>x</code>, <code>x-y</code>, <code>x/y</code>, <code>x-y/z</code>, <code>*/x</code>, kde x,y,z jsou čísla z povolených časových rozsahů\n4.  povolený rozsah pro minuty: <strong>0-59</strong>\n5.  povolený rozsah pro hodiny: <strong>0-23</strong>\n6.  povolený rozsah pro dny měsíce: <strong>1-31</strong>\n7.  povolený rozsah pro měsíce: <strong>1-12</strong>\n8.  povolený rozsah pro dny v týdnu: <strong>0-6</strong>\n\nTo je myslím slušný výčet pravidel pro zvalidování jednoho příkazu.\nÚkolem tohoto článku není ukázat jak tvořit a zpracovávat formulář, ale bude vhodné\numístit sem celý kód alespoň vytvoření:\n\n```php\n/**\n  * @return Nette\\Application\\UI\\Form\n  */\nprotected function createComponentAddCron() {\n\t$form = new Nette\\Application\\UI\\Form;\n\t$form->addProtection();\n\t$form->addText('minutes', 'Minuty:')\n\t\t->addRule(\\Fresh\\ValidateCron::MINUTES, 'Nevalidní CRON zápis - minuty.');\n\t$form->addText('hours', 'Hodiny:')\n\t\t->addRule(\\Fresh\\ValidateCron::HOURS, 'Nevalidní CRON zápis - hodiny.');\n\t$form->addText('mdays', 'Dny měsíce:')\n\t\t->addRule(\\Fresh\\ValidateCron::MDAYS, 'Nevalidní CRON zápis - mdays.');\n\t$form->addText('months', 'Měsíce:')\n\t\t->addRule(\\Fresh\\ValidateCron::MONTHS, 'Nevalidní CRON zápis - měsíce.');\n\t$form->addText('wdays', 'Dny v týdnu:')\n\t\t->addRule(\\Fresh\\ValidateCron::WDAYS, 'Nevalidní CRON zápis - wdays.');\n\t$form->addText('command', 'Příkaz:')\n\t\t->setRequired('Vyplňte prosím příkaz, který bude CRON spouštět.');\n\t$form->addSubmit('save', 'Přidat nový CRON');\n\t$form->onSuccess[] = $this->addCronSucceeded;\n\treturn $form;\n}\n```\n\nA rovnou bez hloupých povídání celý validátor:\n\n```php\n<?php\n\nnamespace Fresh;\n\n/**\n * Class ValidateCron - inspired by ISPConfig\n * @package Fresh\n */\nclass ValidateCron extends \\Nette\\Object {\n\n        const MINUTES = '\\Fresh\\ValidateCron::validateMinutes';\n        const HOURS = '\\Fresh\\ValidateCron::validateHours';\n        const MDAYS = '\\Fresh\\ValidateCron::validateMdays';\n        const MONTHS = '\\Fresh\\ValidateCron::validateMonths';\n        const WDAYS = '\\Fresh\\ValidateCron::validateWdays';\n\n        public static function validateMinutes(\\Nette\\Forms\\IControl $control) {\n                return \\Fresh\\ValidateCron::validateTimeFormat($control->getValue(), 0, 59);\n        }\n\n        public static function validateHours(\\Nette\\Forms\\IControl $control) {\n                return \\Fresh\\ValidateCron::validateTimeFormat($control->getValue(), 0, 23);\n        }\n\n        public static function validateMdays(\\Nette\\Forms\\IControl $control) {\n                return \\Fresh\\ValidateCron::validateTimeFormat($control->getValue(), 1, 31);\n        }\n\n        public static function validateMonths(\\Nette\\Forms\\IControl $control) {\n                if($control->getValue() != '@reboot') { // allow value @reboot in month field\n                        return \\Fresh\\ValidateCron::validateTimeFormat($control->getValue(), 1, 12);\n                } else {\n                        return TRUE;\n                }\n        }\n\n        public static function validateWdays(\\Nette\\Forms\\IControl $control) {\n                return \\Fresh\\ValidateCron::validateTimeFormat($control->getValue(), 0, 6);\n        }\n\n        private static function validateTimeFormat($value, $min_entry = 0, $max_entry = 0) {\n                if (preg_match(\"'^[0-9\\-\\,\\/\\*]+$'\", $value) == false) { // allowed characters are 0-9, comma, *, -, /\n                        return FALSE;\n                } elseif (preg_match(\"'[\\-\\,\\/][\\-\\,\\/]'\", $value) == true) { // comma, - and / never stand together\n                        return FALSE;\n                }\n                $time_list = explode(\",\", $value);\n                foreach ($time_list as $entry) {\n                        // possible value combinations:\n                        // x               =>      ^(\\d+)$\n                        // x-y             =>      ^(\\d+)\\-(\\d+)$\n                        // x/y             =>      ^(\\d+)\\/([1-9]\\d*)$\n                        // x-y/z           =>      ^(\\d+)\\-(\\d+)\\/([1-9]\\d*)$\n                        // */x             =>      ^\\*\\/([1-9]\\d*)$\n                        // combined regex  =>      ^(\\d+|\\*)(\\-(\\d+))?(\\/([1-9]\\d*))?$\n                        if (preg_match(\"'^(((\\d+)(\\-(\\d+))?)|\\*)(\\/([1-9]\\d*))?$'\", $entry, $matches) == false) {\n                                return FALSE;\n                        }\n                        // matches contains:\n                        // 1       =>      * or value or x-y range\n                        // 2       =>      unused\n                        // 3       =>      value if [1] != *\n                        // 4       =>      empty if no range was used\n                        // 5       =>      2nd value of range if [1] != * and range was used\n                        // 6       =>      empty if step was not used\n                        // 7       =>      step\n                        if ($matches[1] == \"*\") {\n                                // not to check\n                        } else {\n                                if ($matches[3] < $min_entry || $matches[3] > $max_entry) { // check if value is in allowed range\n                                        return FALSE;\n                                } elseif (isset($matches[4]) && ($matches[5] < $min_entry || $matches[5] > $max_entry || $matches[5] <= $matches[3])) {\n                                        // check if value is in allowed range and not less or equal to first value\n                                        return FALSE;\n                                }\n                        }\n                        if (isset($matches[6]) && ($matches[7] < 2 || $matches[7] > $max_entry - 1)) { // check if step value is valid\n                                return FALSE;\n                        }\n                } // end foreach entry loop\n                return TRUE;\n        }\n\n}\n```\n\nValidátorem navrácené errory lze vykreslit například takto ručně (nově v DEV Nette):\n\n```html\n{form $form}\n\n<ul class=\"error\" n:if=\"$form->allErrors\">\n        <li n:foreach=\"$form->allErrors as $error\">{$error}</li>\n</ul>\n\n...\n\n{/form}\n```"
}
