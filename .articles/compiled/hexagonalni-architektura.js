export default {
  "attributes": {
    "id": "97b1917b-d6ed-4305-a543-3bdde9b298c9",
    "timestamp": 1487322556000,
    "title": "Hexagonální architektura",
    "slug": "hexagonalni-architektura"
  },
  "body": "<p>Struktura webových aplikací je něco, co se neustále mění a stejně s programátorem i zdokonaluje. Před více než rokem jsem se o jedné z možných struktur PHP aplikace <a href=\"jeste-lepsi-struktura-nette-aplikace\">trošku rozepsal</a>. A teď si ukážeme další alternativu, která je <a href=\"https://github.com/adeira/connector/tree/2169296c8da4a50bf4f928e94e756f3b23afea24\">k proklikání zde</a>. Nejedná se o nic převratného. Tento přístup mě však v poslední době hodně baví a dá se na něm naučit zase něco nového. Jedná se vlastně o tento adresářový strom (zjednodušeně):</p>\n<pre><code>.\n├── bin/            ...  pomocné SH skripty\n├── config/         ...  globální konfigurace aplikace\n├── migrations/     ...  dopředné DB migrace\n├── src/\n├── tests/          ...  veškeré testy\n├── var/            ...  logy a temp\n├── vendor/         ...  balíčky třetích stran\n├── www/            ...  veřejná složka\n├── bootstrap.php   ...  vytváření DI kontejneru\n├── composer.json   ...  definice závislostí třetích stran\n├── composer.lock\n├── LICENSE.txt\n└── README.md\n</code></pre><p>Na první pohled je asi vše jasné. Struktura je téměř identická s tím, co je běžné u začínajících Nette projektů (Nette zde však není vůbec důležité). Za povšimnutí stojí pouze to, že <code>bootstrap.php</code> a globální konfigurace jsou na úrovni kořenového adresáře, takže neexistuje žádná složka <code>app</code>. Zůstává tedy otázka - kde jsou veškeré kódy a jak je aplikace členěna?</p>\n<h2 id=\"kontexty\">Kontexty <a href=\"#kontexty\">#</a></h2><p>Veškerá zábava je právě ve složce <code>src</code> (jak se asi dalo čekat):</p>\n<pre><code>src/\n├── Authentication/\n├── Common/\n├── Devices/\n├── Endpoints/\n└── Routing/\n</code></pre><p>Osobně mám pořád problém s pojmenováváním věcí, takže mám pořád takový pocit, že jednotlivé kontexty nejsou dobře zaškatulkované. To ale není zase až tak důležité. Důležitá je následující myšlenka: každá tato podsložka (kontext) se stará o úplně všechno. Od konfigurací, přes presentery až po business logiku. Uvnitř kontextu nejsou pouze balíčky třetích stran a testy (ty jsou v <code>tests</code>, ale mají úplně stejnou adresářovou strukturu - ne nutně soubory).</p>\n<p>Je třeba trošku se pozastavit nad konfigurací. Každý balíček si s stebou nese vlastní konfigurační soubory, které potřebuje k životu. Ty většinou velmi úzce souvisejí např. s konfigurací DI kontejneru. Ale pouze pro potřeby daného kontextu! Pokud je třeba tento balíček konfigurovat na globální úrovni celé aplikace, pak je tento balíček zaregistrován jako DI rozšíření. Tato úprava myšlení nad konfigurací je možná díky balíčku <a href=\"https://github.com/adeira/compiler-extension\">adeira/compiler-extension</a>. Doporučuji alespoň přečíst a doufat, že to bude fungovat i v Nette 3 (<a href=\"https://github.com/nette/di/issues/143\">Proč by nemohlo?</a>).</p>\n<p>Samostatná interní konfigurace kontextu je asi to nejdůležitější pro pokračování (může být také pěkně <a href=\"https://github.com/adeira/connector/blob/2169296c8da4a50bf4f928e94e756f3b23afea24/src/Devices/Infrastructure/DI/Nette/config.neon\">dlouhá a komplikovaná</a>). Co obsahuje takový kontext (balíček)?</p>\n<pre><code>src/Devices/\n├── Application/\n│   ├── Exceptions/\n│   └── Service/\n├── DomainModel/\n│   └── WeatherStation/\n└── Infrastructure/\n    ├── Delivery/\n    ├── DI/\n    ├── DomainModel/\n    └── Persistence/\n</code></pre><p>To už je o něco zajímavější a také řádově komplikovanější na pochopení. Dále se totiž dělí aplikace na tři důležité části, kde každá má jiný význam a každá si tedy zaslouží krátký komentář. Začněme pěkně uprostřed.</p>\n<h2 id=\"dom-nov-vrstva\">Doménová vrstva <a href=\"#dom-nov-vrstva\">#</a></h2><p>V doménové vrstvě je pouze obyčejné PHP. Myšlenka je taková, že se zde budu soustředit pouze na návrh modelu v čistém PHP a nebudu to nijak komplikovat zanášením jakýchkoliv frameworků či jiných externích knihoven:</p>\n<pre><code>src/Devices/DomainModel/\n├── WeatherStation\n│   ├── IAllWeatherStationRecords.php\n│   ├── IFileLoader.php\n│   ├── WeatherStationId.php\n│   ├── WeatherStation.php\n├── Humidity.php\n├── PhysicalQuantities.php\n├── Pressure.php\n├── Temperature.php\n└── Wind.php\n</code></pre><p>Nikde zde nenajdete v kódu slovo Nette, Symfony nebo třeba Doctrine (<em>ve skutečnosti to tam je, ale to je chyba</em>). Jsou to prostě úplně obyčejné objekty, které mají za úkol řešit nějaký konkrétní problém onoho konkrétního kontextu a nic víc. Díky tomu je psaní testů na tuto část aplikace naprosto triviální. Když někde existuje nějaká závislost, tak je zprostředkována pomocí rozhraní, takže vyměnit implementaci v testech je díky tomuto striktnímu rozdělení opravdu hračka.</p>\n<p>Takto by však aplikace sama o sobě nefungovala. Je potřeba mít zde vazbu na konkrétní implementaci, na konkrétní framework či knihovnu. Od toho slouží další vrstva.</p>\n<h2 id=\"infrastrukturn-vrstva\">Infrastrukturní vrstva <a href=\"#infrastrukturn-vrstva\">#</a></h2><p>Zde není nic jiného, než implementace (implementační detaily). Většinou se jedná o třídy, které nemají žádnou zvláštní nebo složitou logiku. Slouží pouze jako napojení na framework a jako implementace rozhraní z domménové vrstvy. To se silně projeví ve struktuře:</p>\n<pre><code>src/Devices/Infrastructure/\n├── Delivery/\n│   ├── API/\n│   │   └── GraphQL/\n│   ├── Console/\n│   │   └── Symfony/\n│   └── Http/\n│       └── Nette/\n├── DI/\n│   └── Nette/\n│       ├── config.neon\n│       └── Extension.php\n├── DomainModel/\n│   └── WeatherStation/\n│       ├── Doctrine/\n│       └── Series/\n└── Persistence/\n    ├── Doctrine/\n    │   ├── Mapping/\n    │   └── DoctrineAllWeatherStations.php\n    └── InMemory/\n        └── InMemoryAllWeatherStations.php\n</code></pre><p>Trošku se to komplike, že? Po chvilce studování to však dává celé smysl. Tak třeba <code>Delivery</code> - je potřeba doručit nějakou šablonu prostřednictvím presenteru, poslat JSON nebo komunikovat s CLI. Proto je zde vždy vazba na konkrétní technologii (o tom ostatně celá tato vrstva je). Podobně napojení na DI. Může se zdát, že to vždy bude Nette, ale pokud bych podobným stylem vydával i Composer knihovny, tak je jednoduché dodělat podporu i pro další frameworky - kód je na to připraven.</p>\n<p>Asi nejzajímavější je potom složka <code>Persistence</code>, která řeší ukládání dat <em>někam</em>. V mém případě je to primárně Doctrine, takže se zde musím hodně zasnažit, abych dokázal dříve vytvořené objekty uložit do databáze a přitom o tom žádný z těchto objektů netušil (občas dřina, ale všechno jde). Ale implementací může být více - třeba v obyčejné paměti PHP. Což je super strategie pro testování. V testech (pokud to není smyslem toho testu) nepotřebuji pracovat přímo s pomalou databází, takže nahradit její implementaci za ukládání do paměti bude super rychlé.</p>\n<p>Zbývá poslední vrstva.</p>\n<h2 id=\"aplika-n-vrstva\">Aplikační vrstva <a href=\"#aplika-n-vrstva\">#</a></h2><p>Mít takto myšlenkově oddělené závislosti jednotlivých částí aplikace má spoustu výhod. Důležité je zeptat se: jak budeme tento model ovládat? Odpovědí je právě aplikační vrstva. Ta má za úkol pouze jednu věc. Zpřístupnit doménovou vrstvu širokému okolí. Pokud tedy presenter chce komunikovat s doménovou vrstvou, musí prostřednictvím aplikační vrstvy. Proč musí? Nestačilo by rovnou používat nějaký interface pro repozitář? Stačilo, ale to není dobrý nápad!</p>\n<p>Rovnou pracovat s repozitáři není rozumné, protože ty maximálně tahají data z úložiště. To je jejich zodpovědnost, ale co třeba oprávnění a transakce? O to se právě stará aplikační vrstva. Jako příklad budeme chtít vytvořit záznam pro novou meteostanici. Zde konkrétně využívám přístup CQS (Command-Query Separation). Zde existují dva způsoby jak komunikovat. Pomocí dotazů, kdy každý dotaz vrací požadovanou informaci, ale <strong>nemodifikuje data</strong> a pomocí příkazů, které data modifikují, ale <strong>nevrací žádná data zpět</strong>.</p>\n<p>Takový příklaz by se mohl jmenovat <code>CreateWeatherStation</code> a jedná se pouze o obyčejný DTO objekt, který nemá žádnou logiku a měl by být tak jednoduchý, že jej není třeba testovat (pokud nechcete). Je to fakt jenom přepravka na data. Tento příkaz má svého parťáka, který jej umí zpracovat. Příkaz odesílám pomocí sběrnice třeba z API:</p>\n<pre><code class=\"lang-php\">$this-&gt;commandBus-&gt;dispatch(new CreateWeatherStation(\n    WeatherStationId::create(), // ID nové stanice\n    $args[&#39;name&#39;], // název stanice\n    $context-&gt;userId() // ID uživatele, který vytváří stanici\n));\n</code></pre>\n<p>Tato sběrnice jednak doručí příkaz na to správné místo pro zpracování, ale také obstará databázové transakce, prokud je to nutné. Tento příkaz se zpracuje v <code>handleru</code>, který implementuje metodu <code>__invoke</code> (nebo cokoliv jiného co je <code>callable</code>):</p>\n<pre><code class=\"lang-php\">public function __invoke(CreateWeatherStation $aCommand)\n{\n    $owner = $this-&gt;ownerService-&gt;existingOwner($aCommand-&gt;userId());\n\n    $this-&gt;weatherStationRepository-&gt;add(new WeatherStation(\n        $aCommand-&gt;stationId(),\n        $owner,\n        $aCommand-&gt;name(),\n        new \\DateTimeImmutable(&#39;now&#39;)\n    ));\n}\n</code></pre>\n<p>Kouzlo je v tom, že je zde ukryta i kontrola ověření, protože na prvním řádku se snažím získat z uživatele vlastníka (jinak exception) a samotná meteostanice také chce v konstruktoru vlastníka (nikoliv jen uživatele). Kontrolu tedy nejde zapomenout. <code>weatherStationRepository</code> je zde opět jen interface. Jak je vidět, tak je zde hodně věcí na které se nesmí zapomenout a proto je rozumné přistupovat k doménovému modelu pouze přes tuto aplikační vrstvu.</p>\n<p>Na závěr nutno jednu drobnou poznámku. Tento přístup (hledejte pod názvem hexagonální architektura) mě moc baví a pořád je co se zde učit nového. Pokud však patříte do kategorie &quot;líný programátor&quot;, pak pro vás tento přístup určitě není vhodný. Je to totiž spousta práce, která se může zdát jako zbytečná. Klidně se to vše nechá dělat jednoduše v jedné vrstvě. Hexagonální architektura však nabízí elegantní řešení problémů, které občas ve vývoji nastanou a myslím si, že hledí hodně vpřed. Doporučuji tedy alespoň jednou vyzkoušet a pokud nic jiného, tak si z toho alespoň odnést některé myšlenky, které člověka posunou zase o kousek dál... :)</p>\n"
}
