export default {
  "attributes": {
    "id": "3e9279b1-89aa-4813-9beb-7bc9f8044dff",
    "timestamp": 1375043798000,
    "title": "Testování presenterů v Nette",
    "slug": "testovani-presenteru-v-nette"
  },
  "body": "Tak toto je přesně to téma o kterém se naustále mluví, ale tím to z velké části končí.\nNemá smysl zabývat se tím, jestli testovat, nebo ne. Na to už si každý přijde sám.\nV následujících odstavcích bych rád předvedl myšlenku jak si\nušetřit pár řádek kódu při testech (\\Nette\\Tester).\n\n# Nezbytná teorie\n\n\nPro testování presenterů je zapotřebí získat továrnu na presentery PresenterFactory\na následně daný presenter vyrobit. Například takto:\n\n```php\n$presenterFactory = $this->container->getByType('Nette\\Application\\IPresenterFactory');\n$this->presenter = $presenterFactory->createPresenter('Front:Homepage');\n```\n\nK tomu je zapotřebí \\Nette\\DI\\Container, který získáme například v konstruktoru, nebo\npomocí inject anotace.\n\nNásledně je třeba vytvořit požadavek, ten spustit a testovat výslednou odpověď:\n\n```php\n$request = new \\Nette\\Application\\Request($this->presName, $method, $params, $post);\n$response = $this->presenter->run($request);\n```\n\nPrávě nad vrácenou odpovědí lze spustit testovací sadu, která bude testovat, \nzda byla například získána textová odpověď a tedy jestli se jedná o šablonu:\n\n```php\n\\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\TextResponse);\n\\Tester\\Assert::true($response->getSource() instanceof \\Nette\\Templating\\ITemplate);\n```\n\nJe také vhodné otestovat samotný HTML kód. Již mě to párkrát upozornilo na\nnevalidní kód, což se může stát, pokud se šablona skládá z hodně include částí.\nNevalidní ve smyslu například dvojité HTML ukončovací značky:\n\n```php\n$html = (string)$response->getSource();\n$dom = \\Tester\\DomQuery::fromHtml($html);\n\\Tester\\Assert::true($dom->has('title'));\n```\n\n# Psaní, psaní, psaní...\n\n\nPředchozí teorie je zapotřebí opakovat pro každý presenter. Už jen proto, že je třeba\nvytvořit pokaždé nový požadavek. Nicméně je jasné, že to po otestování FrontModule\nzačne být lehce kopírovací nuda.\n\nJe tedy vhodné vytvořit si třídu, která ušetří spoustu řádek.\nMůj první návrh vypadá přibližně takto:\n\n```php\n<?php\n\nnamespace Test;\n\nclass Presenter extends \\Nette\\Object {\n\n        private $container;\n        private $presenter;\n        private $presName;\n\n        public function __construct(\\Nette\\DI\\Container $container) {\n                $this->container = $container;\n        }\n\n        /**\n         * @param $presName string Fully qualified presenter name.\n         */\n        public function init($presName) {\n                $presenterFactory = $this->container->getByType('Nette\\Application\\IPresenterFactory');\n                $this->presenter = $presenterFactory->createPresenter($presName);\n                $this->presenter->autoCanonicalize = FALSE;\n                $this->presName = $presName;\n        }\n\n        public function test($action, $method = 'GET', $params = array(), $post = array()) {\n                $params['action'] = $action;\n                $request = new \\Nette\\Application\\Request($this->presName, $method, $params, $post);\n                $response = $this->presenter->run($request);\n                return $response;\n        }\n\n        public function testAction($action, $method = 'GET', $params = array(), $post = array()) {\n                $response = $this->test($action, $method, $params, $post);\n\n                \\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\TextResponse);\n                \\Tester\\Assert::true($response->getSource() instanceof \\Nette\\Templating\\ITemplate);\n\n                $html = (string)$response->getSource();\n                $dom = \\Tester\\DomQuery::fromHtml($html);\n                \\Tester\\Assert::true($dom->has('title'));\n\n                return $response;\n        }\n\n        public function testForm($action, $method = 'POST', $post = array()) {\n                $response = $this->test($action, $method, $post);\n\n                \\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\RedirectResponse);\n\n                return $response;\n        }\n\n}\n```\n\nTestování samotných presenterů je pak již otázkou několika málo řádek:\n\n```php\n<?php\n\nnamespace Test;\n\n$container = require __DIR__ . '/../bootstrap.php';\n\nclass HomepagePresenterTest extends \\Tester\\TestCase {\n\n        public function __construct(\\Nette\\DI\\Container $container) {\n                $this->tester = new \\Test\\Presenter($container);\n        }\n\n        public function setUp() {\n                $this->tester->init('Front:Homepage');\n        }\n\n        public function testRenderDefault() {\n                $this->tester->testAction('default');\n        }\n\n}\n\nid(new HomepagePresenterTest($container))->run();\n```\n\nTakto chápu testování presenterů v Nette já. Dále budu směrovat testy tak, abych nemusel psát téměř nic\na měl jsem otestováno téměř všechno. Myslím si, že toto je jediná cesta jak se přinutit k testování.\nNelze se již vymlouvat na to, že je to spousta psaní navíc. Není."
}
