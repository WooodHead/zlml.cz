export default {
  "attributes": {
    "id": "2abb97d9-9844-4467-b7cb-56844462425b",
    "timestamp": 1391288978000,
    "title": "Vlna na webu",
    "slug": "vlna-na-webu"
  },
  "body": "Vlna je program [Petra Olšáka .{target:_blank}](http://ftp.linux.cz/pub/tex/local/cstug/olsak/vlna/), který slouží k umístění nezalomitelné místo na místo v textu, kde by nemělo dojít k samovolnému zalomení řádku. Tento program slouží k dodatečné úpravě textů napsaných v LaTeXu. V tomto prostředí se nezalomitelná mezera nahrazuje znakem vlnovkou - tildou (~). U webového výstupu se používá zástupná entita <code>&amp;nbsp;</code>.\n\n# Kde by měla být nedělitelná mezera\n\nV základu program Vlna umístí tildu za znaky <code>KkSsVvZzOoUuAI</code>. Více toho pokud vím nedělá. Podle Ústavu pro jazyk český AV ČR by však toto pravidlo mělo platit mimo jiné pro znaky <code>KkSsVvZzAaIiOoUu</code>. Neuvažuji další pravidla, která určují další nevhodné výrazy na konci řádku. Mezi tyto pravidla patří například mezery uvnitř číslic, mezery mezi číslicí a značkou, atd. Některá pravidla jsou totiž natolik specifická, že by je bylo náročné (nebo nepraktické) podchytit programově.\n\n# Implementace\n\nO samotné nahrazování se stará následující regulární výraz:\n```php\npreg_replace('<([^a-zA-Z0-9])([ksvzaiou])\\s([a-zA-Z0-9]{1,})>i', \"$1$2\\xc2\\xa0$3\", $string); //&nbsp; === \\xc2\\xa0\n```\nTento výraz říká, že nestojí-li bezprostředně před sadou znaků <code>KkSsVvZzAaIiOoUu</code> jiný alfanumerický znak a stojí-li za touto sadou jakýkoliv alfanumerický znak oddělený bílým znakem bude tento znak nahrazen entitou <code>&amp;nbsp;</code>. V konkrétní implementaci lze zaregistrovat Vlnu jako helper pro Latte šablony například takto (obsahuje i registraci Texy helperu):\n\n```php\n/**\n * @param null $class\n * @return Nette\\Templating\\ITemplate\n */\nprotected function createTemplate($class = NULL) {\n\t$template = parent::createTemplate($class);\n\t$texy = new \\Texy();\n\t$template->registerHelper('texy', callback($texy, 'process'));\n\t$template->registerHelper('vlna', function ($string) {\n\t\t$string = preg_replace('<([^a-zA-Z0-9])([ksvzaiou])\\s([a-zA-Z0-9]{1,})>i', \"$1$2\\xc2\\xa0$3\", $string); //&nbsp; === \\xc2\\xa0\n\t\treturn $string;\n\t});\n\treturn $template;\n}\n```\n\nVlna se pak v Latte šablonách používá jako jakýkoliv jiný helper:\n\n```\n{$post->title|vlna}\n```\n\nJeště by možná stálo za to vrátit se k tomu, jaké problémy by způsobovala implementace i dalších pravidel a jak by to bylo náročné. Ještě nad tím budu přemýšlet, každopádně již teď mě napadají určité problémy. Například u čísel. Jak přesně identifikovat, kdy se má použít nedělitelná mezera a kdy ne? Možná je toto právě ten důvod, proč takové rozšířené chování program Vlna nepodporuje..."
}
