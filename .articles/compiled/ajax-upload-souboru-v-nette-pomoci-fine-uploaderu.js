export default {
  "attributes": {
    "id": "40b5dd33-13a2-447e-b352-256bc1afd9cd",
    "timestamp": 1377116084000,
    "title": "AJAX upload souborů v Nette pomocí Fine Uploaderu",
    "slug": "ajax-upload-souboru-v-nette-pomoci-fine-uploaderu"
  },
  "body": "<div class=\"alert alert-danger\">Následující text řeší starší verzi FineUploaderu `3.*`, nikoliv nejnovější. Hledáte-li aktuálnější návod, přečtěte si prosím http://zlml.cz/ajax-upload-souboru-v-nette-pomoci-fine-uploaderu-2...</div>\n\nA je zde další ukázka vlastní práce, která se může hodit i někomu dalšímu. Tentokrát půjde o ajaxové\nnahrávání souborů v Nette pomocí [Fine Uploaderu .{target:_blank}](http://fineuploader.com/).\nObecně to není moc jednoduchá sranda, ale uvidíte, že to zase není taková věda...\n\nA jak už to tak dělávám, lepší než spoustu povídání je spousta ukázek. Prvně je potřeba nalinkovat\nsoubory Fine Uploaderu, nette.ajaxu a vlastního javascriptového souboru:\n\n```html\n<script src=\"{$basePath}/js/jquery.fineuploader-3.7.0.min.js\"></script>\n<script src=\"{$basePath}/js/nette.ajax.js\"></script>\n<script src=\"{$basePath}/js/main.js\"></script>\n```\n\nPoužití samotného Fine Uploaderu je nesmírně jednoduché. Nejdříve je třeba vytvořit element na který\nse uploader později zavěsí a případně tlačítko na upload, pokud nechceme soubory uploadovat rovnou:\n\n```html\n<div id=\"image-uploader\"{ifset $selected} data-id=\"{$selected}\"{/ifset}></div>\n<div id=\"triggerUpload\">Nahrát obrázky</div>\n```\n\nPřichází na řadu samotné oživení uploaderu pomocí javascriptu (soubor main.js):\n\n```javascript\n$(function () {\n\tif ($('#image-uploader').length != 0) { //test existence elementu\n\t\t$.nette.ext('uploader', {\n\t\t\tcomplete: function () { //zavěšení na konec ajaxového požadavku\n\t\t\t\tvar uploader = $('#image-uploader').fineUploader({\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tendpoint: 'product/default/' + $('#image-uploader').data('id') + '?do=upload'\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\tuploadButton: 'Klikněte, nebo přetáhněte obrázky',\n\t\t\t\t\t\tcancelButton: 'zrušit',\n\t\t\t\t\t\tfailUpload: 'Nahrání obrázku se nezdařilo',\n\t\t\t\t\t\tdragZone: 'Přetáhněte soubory sem',\n\t\t\t\t\t\tdropProcessing: 'Zpracovávám přetažené soubory...',\n\t\t\t\t\t\tformatProgress: '{percent}% z {total_size}',\n\t\t\t\t\t\twaitingForResponse: 'Zpracovávám...'\n\t\t\t\t\t},\n\t\t\t\t\tautoUpload: false,\n\t\t\t\t\tfailedUploadTextDisplay: {\n\t\t\t\t\t\tmode: 'custom',\n\t\t\t\t\t\tmaxChars: 70,\n\t\t\t\t\t\tresponseProperty: 'error',\n\t\t\t\t\t\tenableTooltip: true\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t$('#triggerUpload').click(function () {\n\t\t\t\t\tuploader.fineUploader('uploadStoredFiles');\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t$.nette.init(); //inicializace nette.ajax\n});\n```\n\nProtože jsem v mém případě donačítal tento upload element ajaxově, musel jsem script pro uploader\nzavěsit na nette.ajax událost complete. Tato obálka se dá smazat a spouštět klasicky\npři události document.ready. Je zde spoustu, pro samotnou funkčnost, zbytečného kódu.\nPodstatný je pouze request:endpoint, který ukazuje na URL adresu aplikace, kde čeká Nette handle.\nTen může vypadat například takto:\n\n```php\npublic function handleUpload($id) {\n\t$allowedExtensions = array(\"jpeg\", \"jpg\", \"png\", \"gif\"); //například pro obrázky\n\t$uploader = new \\qqFileUploader($allowedExtensions);\n\t//...\n\ttry {\n\t\t$result = $uploader->handleUpload(__DIR__ . '/../../../www/uploads/' . $id . '/default', NULL);\n\t\t$result['uploadName'] = $uploader->getUploadName();\n\t\t//...\n\t} catch (\\Exception $exc) {\n\t\t$this->sendResponse(new \\Nette\\Application\\Responses\\JsonResponse(array(\n\t\t\t'error' => $exc->getMessage(),\n\t\t)));\n\t}\n\t$this->invalidateControl();\n\t$this->sendResponse(new \\Nette\\Application\\Responses\\JsonResponse($result));\n}\n```\n\nOpět jsem vypustil části, které nejsou úplně důležité pro samotnou funkčnost. Jde pouze o to mít\npřipravenou handle metodu, která převezme například ID, důležité však je, že spouští metodu handleUpload()\na odesílá JSON odpověď a to jak errorovou, tak normální, což je následně na straně klienta vyhodnoceno\njako úspěšný upload.\n\nV kódu je zmíněna také třída qqFileUploader. Tu naleznete například na [GitHubu .{target:_blank}](https://github.com/Widen/fine-uploader-server) a nejenom pro PHP. Já jsem si tuto třídu obohatil pouze\no webalize názvů souborů.\n\nA to je vlastně úplně celé. Stačí tedy spustit Fine Uploader na straně klienta například\npodle oficiálních návodů, endpoint nastavit na nějaký handle v aplikaci a ten správně použít.\nTo konkrétně obnáší odeslání JSON odpovědi o úspěšném zpracování obrázku."
}
