export default {
  "attributes": {
    "id": "112c84ae-680a-4d72-8aa3-96e8efeb8f1d",
    "timestamp": 1488119652000,
    "title": "Jak na lokální CSS pro React",
    "slug": "jak-na-lokalni-css-pro-react"
  },
  "body": "Když jsem opouštěl koncept [webových komponent](1-od-komponent-zpet-ke-komponentam) a přecházel jsem k Reactu, tak mě nejvíce mrzelo, že přijdu o všechny zajímavé vlastnosti shadow DOMu. Ve webových komponentách se to má tak, že jak JS tak CSS jsou součástí jedné šablony a neovlivňují globální prostor. To je u Reactu bez problému z pohledu JS. Z pohledu CSS je to však jiná pohádka. Jakýkoliv styl definovaný v rámci komponenty se definuje pro celou aplikaci. Příklad jednoduché hlavičky:\n\n```js\nimport React from 'react';\nimport './Header.css';\n\nexport default () =>\n  <div className=\"header\">\n\t  {/* další JSX hlavičky */}\n  </div>\n```\n\nKdy CSS soubor obsahuje styly pro header:\n\n```css\n.header {\n  /* nějaké ty styly */\n}\n```\n\nDíky Webpacku je možné takto načítat CSS styly v komponentě, ale `.header` je k dispozici v celé aplikaci (pokud je tam komponenta použita). Pak ale komponenty trošku postrádají smysl a mohl bych to klidně zase patlat v jednom hlavním CSS souboru. Vlastně jsem vůbec nic nezískal a musím si dávat velký pozor na to, co dělám.\n\nNaštěstí existuje jednoduché řešení a tím jsou [CSS moduly](https://github.com/css-modules/css-modules). Stačí pouze trošku změnit Webpack nastavení a chování CSS se kompletně změní. Zatímco původní nastavení bylo takové:\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader?importLoaders=1!postcss-loader'\n      }\n    ]\n  }\n}\n```\n\nTak nové bude vypadat takto:\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: true, // Enable/Disable CSS Modules\n              localIdentName: '[name]__[local]--[hash:base64:5]',\n            }\n          },\n          {\n            loader: 'postcss-loader'\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nJe to vlastně ta samá konfigurace, jen jsem zapnul CSS moduly. Od této chvíle se veškeré CSS chovají lokálně pouze pro danou komponentu. Je třeba jen upravit použití těchto nových stylů v komponentě:\n\n```js\nimport React from 'react';\nimport styles from './Header.css';\n\nexport default () =>\n  <div className={styles.header}>\n\t  {/* další JSX hlavičky */}\n  </div>\n```\n\nCo se stane s výstupem? Místo CSS třídy se budou generovat (+-) unikátní idenfikátory (s nějakou nápovědou pro development):\n\n```html\n<div class=\"Header__header--3dxwh\">\n  <!-- další HTML hlavičky -->\n</div>\n```\n\nResp. na produkci kde není nastaveno `localIdentName` takto:\n\n```html\n<div class=\"_3dxwhqIVz2ZHHrfQ6crpKp\">\n  <!-- další HTML hlavičky -->\n</div>\n```\n\nTím se zajistí, že CSS bude fungovat jen v rámci jedné komponenty. Jenže to není úplně ultimátní řešení. Některé styly je dobré mít dostupné v celé aplikaci. No tak třeba styly základních HTML elementů jsou stále definovány jako globální. Pokud však potřebujeme nějakou CSS třídu, tak je to možné pomocí `:global` prefixu:\n\n```css\n:global .clearfix:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n:global .wrapper--fluid {\n  margin-left: 5rem;\n  margin-right: 5rem;\n}\n```\n\nAčkoliv je z tohoto útržku vidět pozůstatek BEM zápisu, tak už to prakticky není potřeba.\n\nPodívejte se, jak vypadá [taková změna](https://github.com/adeira/connector-frontend/commit/e3106bd84952da4350af0d9a9329a3f747724571) v jednom commitu. To řekne více než 1000 slov... :)"
}
