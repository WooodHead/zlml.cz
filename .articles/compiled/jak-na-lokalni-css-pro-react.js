export default {
  "attributes": {
    "id": "112c84ae-680a-4d72-8aa3-96e8efeb8f1d",
    "timestamp": 1488119652000,
    "title": "Jak na lokální CSS pro React",
    "slug": "jak-na-lokalni-css-pro-react"
  },
  "body": "<p>Když jsem opouštěl koncept <a href=\"1-od-komponent-zpet-ke-komponentam\">webových komponent</a> a přecházel jsem k Reactu, tak mě nejvíce mrzelo, že přijdu o všechny zajímavé vlastnosti shadow DOMu. Ve webových komponentách se to má tak, že jak JS tak CSS jsou součástí jedné šablony a neovlivňují globální prostor. To je u Reactu bez problému z pohledu JS. Z pohledu CSS je to však jiná pohádka. Jakýkoliv styl definovaný v rámci komponenty se definuje pro celou aplikaci. Příklad jednoduché hlavičky:</p>\n<pre><code class=\"lang-js\">import React from &#39;react&#39;;\nimport &#39;./Header.css&#39;;\n\nexport default () =&gt;\n  &lt;div className=&quot;header&quot;&gt;\n      {/* další JSX hlavičky */}\n  &lt;/div&gt;\n</code></pre>\n<p>Kdy CSS soubor obsahuje styly pro header:</p>\n<pre><code class=\"lang-css\">.header {\n  /* nějaké ty styly */\n}\n</code></pre>\n<p>Díky Webpacku je možné takto načítat CSS styly v komponentě, ale <code>.header</code> je k dispozici v celé aplikaci (pokud je tam komponenta použita). Pak ale komponenty trošku postrádají smysl a mohl bych to klidně zase patlat v jednom hlavním CSS souboru. Vlastně jsem vůbec nic nezískal a musím si dávat velký pozor na to, co dělám.</p>\n<p>Naštěstí existuje jednoduché řešení a tím jsou <a href=\"https://github.com/css-modules/css-modules\">CSS moduly</a>. Stačí pouze trošku změnit Webpack nastavení a chování CSS se kompletně změní. Zatímco původní nastavení bylo takové:</p>\n<pre><code class=\"lang-js\">module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: &#39;style-loader!css-loader?importLoaders=1!postcss-loader&#39;\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Tak nové bude vypadat takto:</p>\n<pre><code class=\"lang-js\">module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: &#39;style-loader&#39;\n          },\n          {\n            loader: &#39;css-loader&#39;,\n            options: {\n              importLoaders: 1,\n              modules: true, // Enable/Disable CSS Modules\n              localIdentName: &#39;[name]__[local]--[hash:base64:5]&#39;,\n            }\n          },\n          {\n            loader: &#39;postcss-loader&#39;\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Je to vlastně ta samá konfigurace, jen jsem zapnul CSS moduly. Od této chvíle se veškeré CSS chovají lokálně pouze pro danou komponentu. Je třeba jen upravit použití těchto nových stylů v komponentě:</p>\n<pre><code class=\"lang-js\">import React from &#39;react&#39;;\nimport styles from &#39;./Header.css&#39;;\n\nexport default () =&gt;\n  &lt;div className={styles.header}&gt;\n      {/* další JSX hlavičky */}\n  &lt;/div&gt;\n</code></pre>\n<p>Co se stane s výstupem? Místo CSS třídy se budou generovat (+-) unikátní idenfikátory (s nějakou nápovědou pro development):</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;Header__header--3dxwh&quot;&gt;\n  &lt;!-- další HTML hlavičky --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Resp. na produkci kde není nastaveno <code>localIdentName</code> takto:</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;_3dxwhqIVz2ZHHrfQ6crpKp&quot;&gt;\n  &lt;!-- další HTML hlavičky --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Tím se zajistí, že CSS bude fungovat jen v rámci jedné komponenty. Jenže to není úplně ultimátní řešení. Některé styly je dobré mít dostupné v celé aplikaci. No tak třeba styly základních HTML elementů jsou stále definovány jako globální. Pokud však potřebujeme nějakou CSS třídu, tak je to možné pomocí <code>:global</code> prefixu:</p>\n<pre><code class=\"lang-css\">:global .clearfix:after {\n  content: &quot;&quot;;\n  display: table;\n  clear: both;\n}\n\n:global .wrapper--fluid {\n  margin-left: 5rem;\n  margin-right: 5rem;\n}\n</code></pre>\n<p>Ačkoliv je z tohoto útržku vidět pozůstatek BEM zápisu, tak už to prakticky není potřeba.</p>\n<p>Podívejte se, jak vypadá <a href=\"https://github.com/adeira/connector-frontend/commit/e3106bd84952da4350af0d9a9329a3f747724571\">taková změna</a> v jednom commitu. To řekne více než 1000 slov... :)</p>\n"
}
