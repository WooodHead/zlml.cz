// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "id": "40b5dd33-13a2-447e-b352-256bc1afd9cd",
    "timestamp": 1377116084000,
    "title": "AJAX upload souborů v Nette pomocí Fine Uploaderu",
    "slug": "ajax-upload-souboru-v-nette-pomoci-fine-uploaderu"
  },
  "body": "<div class=\"alert alert-danger\">Následující text řeší starší verzi FineUploaderu <code>3.*</code>, nikoliv nejnovější. Hledáte-li aktuálnější návod, přečtěte si prosím <a href=\"http://zlml.cz/ajax-upload-souboru-v-nette-pomoci-fine-uploaderu-2\">http://zlml.cz/ajax-upload-souboru-v-nette-pomoci-fine-uploaderu-2</a>...</div>\n\n<p>A je zde další ukázka vlastní práce, která se může hodit i někomu dalšímu. Tentokrát půjde o ajaxové\nnahrávání souborů v Nette pomocí <a href=\"http://fineuploader.com/\">Fine Uploaderu .{target:_blank}</a>.\nObecně to není moc jednoduchá sranda, ale uvidíte, že to zase není taková věda...</p>\n<p>A jak už to tak dělávám, lepší než spoustu povídání je spousta ukázek. Prvně je potřeba nalinkovat\nsoubory Fine Uploaderu, nette.ajaxu a vlastního javascriptového souboru:</p>\n<pre><code class=\"lang-html\">&lt;script src=&quot;{$basePath}/js/jquery.fineuploader-3.7.0.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;{$basePath}/js/nette.ajax.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;{$basePath}/js/main.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Použití samotného Fine Uploaderu je nesmírně jednoduché. Nejdříve je třeba vytvořit element na který\nse uploader později zavěsí a případně tlačítko na upload, pokud nechceme soubory uploadovat rovnou:</p>\n<pre><code class=\"lang-html\">&lt;div id=&quot;image-uploader&quot;{ifset $selected} data-id=&quot;{$selected}&quot;{/ifset}&gt;&lt;/div&gt;\n&lt;div id=&quot;triggerUpload&quot;&gt;Nahrát obrázky&lt;/div&gt;\n</code></pre>\n<p>Přichází na řadu samotné oživení uploaderu pomocí javascriptu (soubor main.js):</p>\n<pre><code class=\"lang-javascript\">$(function () {\n    if ($(&#39;#image-uploader&#39;).length != 0) { //test existence elementu\n        $.nette.ext(&#39;uploader&#39;, {\n            complete: function () { //zavěšení na konec ajaxového požadavku\n                var uploader = $(&#39;#image-uploader&#39;).fineUploader({\n                    request: {\n                        endpoint: &#39;product/default/&#39; + $(&#39;#image-uploader&#39;).data(&#39;id&#39;) + &#39;?do=upload&#39;\n                    },\n                    text: {\n                        uploadButton: &#39;Klikněte, nebo přetáhněte obrázky&#39;,\n                        cancelButton: &#39;zrušit&#39;,\n                        failUpload: &#39;Nahrání obrázku se nezdařilo&#39;,\n                        dragZone: &#39;Přetáhněte soubory sem&#39;,\n                        dropProcessing: &#39;Zpracovávám přetažené soubory...&#39;,\n                        formatProgress: &#39;{percent}% z {total_size}&#39;,\n                        waitingForResponse: &#39;Zpracovávám...&#39;\n                    },\n                    autoUpload: false,\n                    failedUploadTextDisplay: {\n                        mode: &#39;custom&#39;,\n                        maxChars: 70,\n                        responseProperty: &#39;error&#39;,\n                        enableTooltip: true\n                    }\n                });\n                $(&#39;#triggerUpload&#39;).click(function () {\n                    uploader.fineUploader(&#39;uploadStoredFiles&#39;);\n                });\n            }\n        });\n    }\n\n    $.nette.init(); //inicializace nette.ajax\n});\n</code></pre>\n<p>Protože jsem v mém případě donačítal tento upload element ajaxově, musel jsem script pro uploader\nzavěsit na nette.ajax událost complete. Tato obálka se dá smazat a spouštět klasicky\npři události document.ready. Je zde spoustu, pro samotnou funkčnost, zbytečného kódu.\nPodstatný je pouze request:endpoint, který ukazuje na URL adresu aplikace, kde čeká Nette handle.\nTen může vypadat například takto:</p>\n<pre><code class=\"lang-php\">public function handleUpload($id) {\n    $allowedExtensions = array(&quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;); //například pro obrázky\n    $uploader = new \\qqFileUploader($allowedExtensions);\n    //...\n    try {\n        $result = $uploader-&gt;handleUpload(__DIR__ . &#39;/../../../www/uploads/&#39; . $id . &#39;/default&#39;, NULL);\n        $result[&#39;uploadName&#39;] = $uploader-&gt;getUploadName();\n        //...\n    } catch (\\Exception $exc) {\n        $this-&gt;sendResponse(new \\Nette\\Application\\Responses\\JsonResponse(array(\n            &#39;error&#39; =&gt; $exc-&gt;getMessage(),\n        )));\n    }\n    $this-&gt;invalidateControl();\n    $this-&gt;sendResponse(new \\Nette\\Application\\Responses\\JsonResponse($result));\n}\n</code></pre>\n<p>Opět jsem vypustil části, které nejsou úplně důležité pro samotnou funkčnost. Jde pouze o to mít\npřipravenou handle metodu, která převezme například ID, důležité však je, že spouští metodu handleUpload()\na odesílá JSON odpověď a to jak errorovou, tak normální, což je následně na straně klienta vyhodnoceno\njako úspěšný upload.</p>\n<p>V kódu je zmíněna také třída qqFileUploader. Tu naleznete například na <a href=\"https://github.com/Widen/fine-uploader-server\">GitHubu .{target:_blank}</a> a nejenom pro PHP. Já jsem si tuto třídu obohatil pouze\no webalize názvů souborů.</p>\n<p>A to je vlastně úplně celé. Stačí tedy spustit Fine Uploader na straně klienta například\npodle oficiálních návodů, endpoint nastavit na nějaký handle v aplikaci a ten správně použít.\nTo konkrétně obnáší odeslání JSON odpovědi o úspěšném zpracování obrázku.</p>\n"
});
