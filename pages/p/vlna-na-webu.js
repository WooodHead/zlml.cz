// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1391288978000,
    "title": "Vlna na webu",
    "slug": "vlna-na-webu"
  },
  "body": "<p>Vlna je program <a href=\"http://ftp.linux.cz/pub/tex/local/cstug/olsak/vlna/\">Petra Olšáka .{target:_blank}</a>, který slouží k umístění nezalomitelné místo na místo v textu, kde by nemělo dojít k samovolnému zalomení řádku. Tento program slouží k dodatečné úpravě textů napsaných v LaTeXu. V tomto prostředí se nezalomitelná mezera nahrazuje znakem vlnovkou - tildou (~). U webového výstupu se používá zástupná entita <code>&amp;nbsp;</code>.</p>\n<h2 id=\"kde-by-m-la-b-t-ned-liteln-mezera\">Kde by měla být nedělitelná mezera <a href=\"#kde-by-m-la-b-t-ned-liteln-mezera\">#</a></h2><p>V základu program Vlna umístí tildu za znaky <code>KkSsVvZzOoUuAI</code>. Více toho pokud vím nedělá. Podle Ústavu pro jazyk český AV ČR by však toto pravidlo mělo platit mimo jiné pro znaky <code>KkSsVvZzAaIiOoUu</code>. Neuvažuji další pravidla, která určují další nevhodné výrazy na konci řádku. Mezi tyto pravidla patří například mezery uvnitř číslic, mezery mezi číslicí a značkou, atd. Některá pravidla jsou totiž natolik specifická, že by je bylo náročné (nebo nepraktické) podchytit programově.</p>\n<h2 id=\"implementace\">Implementace <a href=\"#implementace\">#</a></h2><p>O samotné nahrazování se stará následující regulární výraz:</p>\n<pre><code class=\"lang-php\">preg_replace(&#39;&lt;([^a-zA-Z0-9])([ksvzaiou])\\s([a-zA-Z0-9]{1,})&gt;i&#39;, &quot;$1$2\\xc2\\xa0$3&quot;, $string); //&amp;nbsp; === \\xc2\\xa0\n</code></pre>\n<p>Tento výraz říká, že nestojí-li bezprostředně před sadou znaků <code>KkSsVvZzAaIiOoUu</code> jiný alfanumerický znak a stojí-li za touto sadou jakýkoliv alfanumerický znak oddělený bílým znakem bude tento znak nahrazen entitou <code>&amp;nbsp;</code>. V konkrétní implementaci lze zaregistrovat Vlnu jako helper pro Latte šablony například takto (obsahuje i registraci Texy helperu):</p>\n<pre><code class=\"lang-php\">/**\n * @param null $class\n * @return Nette\\Templating\\ITemplate\n */\nprotected function createTemplate($class = NULL) {\n    $template = parent::createTemplate($class);\n    $texy = new \\Texy();\n    $template-&gt;registerHelper(&#39;texy&#39;, callback($texy, &#39;process&#39;));\n    $template-&gt;registerHelper(&#39;vlna&#39;, function ($string) {\n        $string = preg_replace(&#39;&lt;([^a-zA-Z0-9])([ksvzaiou])\\s([a-zA-Z0-9]{1,})&gt;i&#39;, &quot;$1$2\\xc2\\xa0$3&quot;, $string); //&amp;nbsp; === \\xc2\\xa0\n        return $string;\n    });\n    return $template;\n}\n</code></pre>\n<p>Vlna se pak v Latte šablonách používá jako jakýkoliv jiný helper:</p>\n<pre><code>{$post-&gt;title|vlna}\n</code></pre><p>Ještě by možná stálo za to vrátit se k tomu, jaké problémy by způsobovala implementace i dalších pravidel a jak by to bylo náročné. Ještě nad tím budu přemýšlet, každopádně již teď mě napadají určité problémy. Například u čísel. Jak přesně identifikovat, kdy se má použít nedělitelná mezera a kdy ne? Možná je toto právě ten důvod, proč takové rozšířené chování program Vlna nepodporuje...</p>\n"
});
