// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1414868997000,
    "title": "Dependent select box",
    "slug": "dependent-select-box"
  },
  "body": "<p>Občas je v Nette zapotřebí vyřešit dependent select box. Je to relativně málo častý požadavek a o to méně se o něm dá najít, když je to zrovna potřeba. V zásadě existují dvě řešení. Nudné - poctivé a pak zábavné - špinavé. Podívejme se na to, jak se dá takový dependent select box jednoduše vyřešit.</p>\n<h2 id=\"-ist-e-en-\">Čisté řešení <a href=\"#-ist-e-en-\">#</a></h2><p><img src=\"https://zlmlcz-media.s3-eu-west-1.amazonaws.com/51d212f2-5aa9-44b9-9085-f6267e1974e9/vystrizek.png\" alt=\"\">\nToto řešení ukazuje jak by se takový problém měl zhruba řešit. Myšlenka je velmi jednoduchá. Prvně potřebujeme data do závislého select boxu. Ty se normálně vyřeší prostřednistvím databáze, v našem případě postačí jednoduché pole.</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">private</span> $database = [\n    [<span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'4'</span>, <span class=\"hljs-string\">'9'</span>],\n    [<span class=\"hljs-number\">4</span> =&gt; <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'∴'</span>, <span class=\"hljs-string\">'…'</span>],\n    [<span class=\"hljs-number\">5</span> =&gt; <span class=\"hljs-string\">'π'</span>, <span class=\"hljs-string\">'€'</span>, <span class=\"hljs-string\">'©'</span>],\n];\n</code></pre>\n<p>Následně je potřeba vytvořit samotný formulář:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponentForm</span><span class=\"hljs-params\">($name)</span> </span>{\n    $form = <span class=\"hljs-keyword\">new</span> UI\\Form;\n    <span class=\"hljs-keyword\">$this</span>[$name] = $form; <span class=\"hljs-comment\">// &lt;- Zde je celý fígl</span>\n\n    $form-&gt;addSelect(<span class=\"hljs-string\">'one'</span>, <span class=\"hljs-string\">'One'</span>, [<span class=\"hljs-string\">'Čísla'</span>, <span class=\"hljs-string\">'Tečky'</span>, <span class=\"hljs-string\">'Symboly'</span>])-&gt;setDefaultValue(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">//dump($form['one']-&gt;value);</span>\n\n    $form-&gt;addSelect(<span class=\"hljs-string\">'two'</span>, <span class=\"hljs-string\">'Two'</span>, <span class=\"hljs-keyword\">$this</span>-&gt;database[$form[<span class=\"hljs-string\">'one'</span>]-&gt;value]);\n\n    $form-&gt;addSubmit(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'Odeslat'</span>);\n    $form-&gt;onSuccess[] = <span class=\"hljs-keyword\">$this</span>-&gt;success;\n    <span class=\"hljs-keyword\">return</span> $form;\n}\n</code></pre>\n<p>A k formuláři také šablonu:</p>\n<pre><code class=\"hljs lang-html\">{form form}\n    {input one, size =&gt; 3}\n    {snippet two}\n        {input two, size =&gt; 3}\n    {/snippet}\n    {input send}\n{/form}\n</code></pre>\n<p>Aby šlo použít snippet uvnitř formulářového makra, budeme muset udělat malý workaround:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">beforeRender</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">parent</span>::beforeRender();\n    <span class=\"hljs-keyword\">$this</span>-&gt;template-&gt;_form = <span class=\"hljs-keyword\">$this</span>[<span class=\"hljs-string\">'form'</span>]; <span class=\"hljs-comment\">// form {snippet} workaround</span>\n}\n</code></pre>\n<p>Snippet je však možné zatím úplně vynechat, protože bude potřeba až při ajaxifikaci.</p>\n<p>Celý fígl je v tom, že musíme zajistit, aby se hodnota druhého select boxu nastavovala podle hodnoty prvního. V tomto stavu je již možné formulář spustit. Po vybrání v prvním select boxu a odeslání formuláře se vybraná hodnota následně projeví v druhém select boxu. Celé kouzlo je pouze v té druhé řádce formulářové továrničky, který mi umožní přistoupit k hodnotám prvků. Je samozřejmě nesmysl odesílat celý formulář pro získání obsahu druhého select boxu, proto si napíšeme krátký javascriptový kód, který to za nás vyřeší (nette.ajax.js):</p>\n<pre><code class=\"hljs lang-javascript\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    $.nette.init();\n\n    $(<span class=\"hljs-string\">'select[name=one]'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        $.nette.ajax({\n            <span class=\"hljs-attr\">url</span>: {link invalidate!},\n            <span class=\"hljs-attr\">data</span>: {\n                <span class=\"hljs-string\">'value'</span>: $(<span class=\"hljs-string\">'select[name=one]'</span>).val(),\n            }\n        });\n    });\n});\n</code></pre>\n<p>Jakmile se změní hodnota prvního select boxu, zavoláme si handler a předáme mu novou hodnotu. Tento handler bude mít za úkol nastavit hodnoty druhého select boxu a pouze tento prvek invalidovat:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleInvalidate</span><span class=\"hljs-params\">($value)</span> </span>{\n    <span class=\"hljs-keyword\">$this</span>[<span class=\"hljs-string\">'form'</span>][<span class=\"hljs-string\">'two'</span>]-&gt;setItems(<span class=\"hljs-keyword\">$this</span>-&gt;database[$value]);\n    <span class=\"hljs-keyword\">$this</span>-&gt;redrawControl(<span class=\"hljs-string\">'two'</span>);\n}\n</code></pre>\n<p>Tím je vlastně hotovo. Čistotu řešení ověříme tím, že si vyzkoušíme dump vybraných položek po odeslání formuláře:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">success</span><span class=\"hljs-params\">(UI\\Form $form, $vals)</span> </span>{\n    dump($vals);\n}\n</code></pre>\n<p>Čistota spočívá v tom, že požadované hodnoty skutečně získáme. To není úplně samozřejmé, protože v Nette existuje bezpečnostní obranný mechanismus, který zabraňuje odeslání hodnot v select boxu, které na začátku neobsahoval. Pokud něco takového uděláme třeba javascriptem, zíkáme <code>NULL</code>. Aby se toto nedělo, musíme takto relativně složitě vyřešit továrničku pro formulář.</p>\n<h2 id=\"-pinav-e-en-\">Špinavé řešení <a href=\"#-pinav-e-en-\">#</a></h2><p>Špinavé řešení se od toho čisté o moc neliší. Myšlenka je pořád stejná, tentokrát však stojíme před jiným úkolem. Vezměme si příklad, kdy nám zase až tolik nezáleží na tom, jaké získáme v select boxu hodnoty a chceme ho používat spíše jako text input, kdy nabídneme uživateli nějaký vstup. Typický příklad je text input pro URL adresu API, kdy po zadání kontaktujeme nějaké API a nabídneme v selectu vrácené hodnoty tak, aby je uživatel nemusel psát. Netvrdím, že by to nešlo vyřešit čistě, ale špinavé řešení je v tomto případě pohodlnější, rychlejší a mohu na něm ukázat i něco jiného. Tentokrát si vytvoříme úplně obyčejný formulář, tak jako již mnohokrát. Není potřeba žádného fíglu. Opět si připravíme šablonu pro formulář obdobně jako v předchozím případě. A obdobně doplníme nějaký ten javascript. Zde bych klidně mohl formulář upravit javascriptově, ale mě se hodí zavolat si (po napsání URL adresy) handler, v něm vyřešit vše potřebné a invalidovat část formuláře.</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-literal\">null</span>;\n$(<span class=\"hljs-string\">'input[name=url]'</span>).live(<span class=\"hljs-string\">'keyup'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (timer) {\n        clearTimeout(timer);\n    }\n    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        timer = <span class=\"hljs-literal\">null</span>;\n        $.nette.ajax({\n            <span class=\"hljs-attr\">url</span>: {link checkErp!},\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'POST'</span>,\n            <span class=\"hljs-attr\">data</span>: {\n                <span class=\"hljs-string\">\"erpForm-url\"</span>: $(<span class=\"hljs-string\">'input[name=url]'</span>).val()\n            }\n        });\n    }, <span class=\"hljs-number\">250</span>);\n});\n</code></pre>\n<p>Handler nemá smysl uvádět. Jednoduše v něm vykonám nějakou logiku, vrátím data a invaliduji šablonu. Pozor na to, že předchozí javascriptová ukázka je tentokrát ze separátní komponenty.</p>\n<p>Zbývá nám vyřešit pouze odeslání a zpracování formuláře. Jelikož jsem byl teď líný programátor a select v tomto případě beru spíše jako text input, nemohu získat hodnotu select boxu ve <code>$form-&gt;getValues()</code>, resp. v druhém parametru succeeded metody. Musím proto použít metodu <code>getHttpData</code>, která mi umožní získat jakákoliv data a zároveň mám jistotu, že jsou data ošetřena:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">erpFormSucceeded</span><span class=\"hljs-params\">(UI\\Form $form, Nette\\Utils\\ArrayHash $values)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">$this</span>-&gt;erpSystems-&gt;create([\n            ErpSystems::COLUMN_URL =&gt; $values-&gt;url,\n            ErpSystems::COLUMN_DATABASE =&gt; $form-&gt;getHttpData(UI\\Form::DATA_LINE, <span class=\"hljs-string\">'database'</span>), <span class=\"hljs-comment\">// &lt;- náš select</span>\n            ErpSystems::COLUMN_USER =&gt; $values-&gt;username,\n            ErpSystems::COLUMN_TOKEN =&gt; $values-&gt;password,\n        ]);\n        <span class=\"hljs-comment\">//...</span>\n    } <span class=\"hljs-keyword\">catch</span> (\\PDOException $exc) {\n        <span class=\"hljs-comment\">//...</span>\n    }\n    <span class=\"hljs-comment\">//...</span>\n}\n</code></pre>\n<p>V tomto špinavém řešení je však zapotřebí myslet na to, že v selectu může přijít naprosto cokoliv. To by však nikoho nemělo převapit. Ostatně i při vytváření formuláře stačí vytvořit select box prázdný, protože žádná vstupní data ani neexistují.</p>\n"
});
