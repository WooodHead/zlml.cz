// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2279252371"
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Nette 2.1-dev CliRouter
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Routování CLI((Command Line Interface)) aplikací je oblast, o které se v Nette moc nemluví. A když mluví, tak divně (nebo staře). Což na jednu stranu dává smysl, protože tato routa existuje už od roku 2009. Na druhou stranu je to zvláštní, protože je stále experimentální.</p>
<blockquote>
<p>The unidirectional router for CLI.</p>
<p>(experimental)</p>
</blockquote>
<p>Dokonce se už mluvilo o tom, že se zruší. No snad se to nestane...</p>
<p>Proč o tom mluvím? Rád bych ukázal, jak se dá v nastávající verzi Nette tato routa použít. V nové verzi Nette se již routy nepíší do bootsrap.php jak tomu bylo (alespoň myslím) dříve. Tentokrát je v adresářové struktuře soubor router/<strong>RouterFactory.php</strong>, který se právě o routování postará. Tento soubor může vypadat například takto:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">App</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>,
    <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Application</span>\\\\<span class=\\"hljs-title\\">Routers</span>\\\\<span class=\\"hljs-title\\">RouteList</span>,
    <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Application</span>\\\\<span class=\\"hljs-title\\">Routers</span>\\\\<span class=\\"hljs-title\\">Route</span>,
    <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Application</span>\\\\<span class=\\"hljs-title\\">Routers</span>\\\\<span class=\\"hljs-title\\">CliRouter</span>;

<span class=\\"hljs-comment\\">/**
 * Router factory.
 */</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">RouterFactory</span> </span>{

    <span class=\\"hljs-keyword\\">private</span> $container;

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(Nette\\\\DI\\\\Container $container)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;container = $container;
    }

    <span class=\\"hljs-comment\\">/**
     * <span class=\\"hljs-doctag\\">@return</span> \\\\Nette\\\\Application\\\\IRouter
     */</span>
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createRouter</span><span class=\\"hljs-params\\">()</span> </span>{
        $router = <span class=\\"hljs-keyword\\">new</span> RouteList();
        <span class=\\"hljs-keyword\\">if</span> (<span class=\\"hljs-keyword\\">$this</span>-&gt;container-&gt;parameters[<span class=\\"hljs-string\\">'consoleMode'</span>]) {
            $router[] = <span class=\\"hljs-keyword\\">new</span> CliRouter(<span class=\\"hljs-keyword\\">array</span>(<span class=\\"hljs-string\\">'action'</span> =&gt; <span class=\\"hljs-string\\">'Cli:Cli:cron'</span>));
        } <span class=\\"hljs-keyword\\">else</span> {
            $router[] = <span class=\\"hljs-keyword\\">new</span> Route(<span class=\\"hljs-string\\">'rss.xml'</span>, <span class=\\"hljs-string\\">'Front:Blog:rss'</span>);
            $router[] = <span class=\\"hljs-keyword\\">new</span> Route(<span class=\\"hljs-string\\">'user/&lt;presenter&gt;/&lt;action&gt;[/&lt;id&gt;]'</span>, <span class=\\"hljs-keyword\\">array</span>(
                <span class=\\"hljs-string\\">'module'</span> =&gt; <span class=\\"hljs-string\\">'User'</span>,
                <span class=\\"hljs-string\\">'presenter'</span> =&gt; <span class=\\"hljs-string\\">'Board'</span>,
                <span class=\\"hljs-string\\">'action'</span> =&gt; <span class=\\"hljs-string\\">'default'</span>,
            ));
            $router[] = <span class=\\"hljs-keyword\\">new</span> Route(<span class=\\"hljs-string\\">'&lt;presenter&gt;/&lt;action&gt;[/&lt;id&gt;]'</span>, <span class=\\"hljs-keyword\\">array</span>(
                <span class=\\"hljs-string\\">'module'</span> =&gt; <span class=\\"hljs-string\\">'Front'</span>,
                <span class=\\"hljs-string\\">'presenter'</span> =&gt; <span class=\\"hljs-string\\">'Homepage'</span>,
                <span class=\\"hljs-string\\">'action'</span> =&gt; <span class=\\"hljs-string\\">'default'</span>,
            ));
        }
        <span class=\\"hljs-keyword\\">return</span> $router;
    }

}
</code></pre>
<p>Toto je reálná funkční ukázka (ze které jsem něco nepodstatného umazal). Jak je vidět, tak aplikaci mám rozdělenou na moduly, takže defaultní routa ukazuje do modulu Front, pak je k dispozici User modul, link na RSS a konečně CliRouter, který se naroutuje pouze v případě, že běží aplikace v konzolovém módu (CLI).</p>
<p>Pokud se teď přesunu k presenterové části modulu Cli, mohu zde umístit dvě třídy. Klasický BasePresenter, který bude pro jistotu kontrolovat, jestli se opravdu jedná o consoleMode například takto:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">App</span>\\\\<span class=\\"hljs-title\\">CliModule</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>;

<span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">BasePresenter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Application</span>\\\\<span class=\\"hljs-title\\">UI</span>\\\\<span class=\\"hljs-title\\">Presenter</span> </span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">startup</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">parent</span>::startup();
        <span class=\\"hljs-keyword\\">if</span> (!<span class=\\"hljs-keyword\\">$this</span>-&gt;context-&gt;parameters[<span class=\\"hljs-string\\">'consoleMode'</span>]) {
            <span class=\\"hljs-keyword\\">throw</span> <span class=\\"hljs-keyword\\">new</span> Nette\\\\Security\\\\AuthenticationException;
        }
    }

}
</code></pre>
<p>No a pak už stačí jen CliPresenter, který bude dědit od BasePresenteru, takže vždy dojde ke kontrole. Zde stačí metoda action*(), která se spustí podle naroutování. V mém případě se tedy jedná o actionCron():</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">App</span>\\\\<span class=\\"hljs-title\\">CliModule</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>;

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">CliPresenter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">BasePresenter</span> </span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">actionCron</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">echo</span> <span class=\\"hljs-string\\">'FUNGUJU!'</span>;
        <span class=\\"hljs-keyword\\">$this</span>-&gt;terminate();
    }

}
</code></pre>
<p>A teď to nejdůležitější! Aplikace se spustí pomocí terminálu jednoduchým příkazem <code>php index.php</code>. Samozřejmě je nutné ukázat na index Nette aplikace. No a samozřejmě se mohu odkázat i na jinou část aplikace dopsání parametru. Pokud bych chtěl podle výše uvedených souborů přejít na hlavní stránku, stačí napsat pouze <code>php index.php Front:Homepage:default</code>.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3168189516"
        >
          <a
            className="jsx-3168189516 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fnette-2-1-dev-clirouter%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
