// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Třída pro připojení k FIO API
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Další užitečný úryvek, který je škoda nechat ležet v Git repozitářích.
A opět uzpůsobený pro používání s Nette FW.</p>
<p>Nedávno jsem psal o tom, jak používat CLI router v Nette (<a href=\\"http://zlml.cz/nette-2-1-dev-clirouter\\">http://zlml.cz/nette-2-1-dev-clirouter</a>).
Právě pomocí tohoto routeru je vhodné kontrolovat bankovní výpisy - například pomocí cronu:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">App</span>\\\\<span class=\\"hljs-title\\">CliModule</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>;
<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Diagnostics</span>\\\\<span class=\\"hljs-title\\">Debugger</span>;

<span class=\\"hljs-comment\\">/**
 * Class CliPresenter
 * <span class=\\"hljs-doctag\\">@package</span> App\\\\CliModule
 */</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">CliPresenter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">BasePresenter</span> </span>{

        <span class=\\"hljs-comment\\">/** <span class=\\"hljs-doctag\\">@var</span> \\\\Fio <span class=\\"hljs-doctag\\">@inject</span> */</span>
        <span class=\\"hljs-keyword\\">public</span> $fio;
        ...

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">actionCron</span><span class=\\"hljs-params\\">()</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;checkFio(); <span class=\\"hljs-comment\\">// FIO vs. nezaplacené objednávky</span>
                ...
                <span class=\\"hljs-keyword\\">$this</span>-&gt;terminate();
        }

        <span class=\\"hljs-comment\\">/**
         * Zkontroluje bankovní účet, porovná s databází a zaplacené objednávky změní na status PAID.
         */</span>
        <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkFio</span><span class=\\"hljs-params\\">()</span> </span>{
                <span class=\\"hljs-keyword\\">try</span> {
                        $transactions = <span class=\\"hljs-keyword\\">$this</span>-&gt;fio-&gt;transactions();
                        $unpaid = <span class=\\"hljs-keyword\\">$this</span>-&gt;orders-&gt;selectUnpaidOrders(); <span class=\\"hljs-comment\\">//získání nezaplacených objednávek</span>
                        <span class=\\"hljs-comment\\">//array_intersect() - zde samotné zpracování</span>
                        ...
                } <span class=\\"hljs-keyword\\">catch</span> (\\\\<span class=\\"hljs-keyword\\">Exception</span> $exc) {
                        Debugger::log($exc-&gt;getMessage() . <span class=\\"hljs-string\\">' FILE: '</span> . $exc-&gt;getFile() . <span class=\\"hljs-string\\">' on line: '</span> . $exc-&gt;getLine(), Debugger::WARNING);
                        <span class=\\"hljs-keyword\\">echo</span> $exc-&gt;getMessage() . EOL;
                }
        }
}
</code></pre>
<p>K tomu se hodí právě následující třída:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-comment\\">/**
 * Class Fio
 */</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Fio</span> <span class=\\"hljs-keyword\\">extends</span> \\\\<span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Object</span> </span>{

        <span class=\\"hljs-keyword\\">private</span> $token;
        <span class=\\"hljs-keyword\\">private</span> $rest_url = <span class=\\"hljs-string\\">'https://www.fio.cz/ib_api/rest/'</span>;

        <span class=\\"hljs-comment\\">/**
         * <span class=\\"hljs-doctag\\">@param</span> string $token SECURE
         */</span>
        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">($token)</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;token = $token;
        }

        <span class=\\"hljs-comment\\">/**
         * Pohyby na účtu za určené období.
         * JSON only!
         * <span class=\\"hljs-doctag\\">@param</span> string $from
         * <span class=\\"hljs-doctag\\">@param</span> string $to
         * <span class=\\"hljs-doctag\\">@return</span> array|mixed
         */</span>
        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">transactions</span><span class=\\"hljs-params\\">($from = <span class=\\"hljs-string\\">'-1 month'</span>, $to = <span class=\\"hljs-string\\">'now'</span>)</span> </span>{
                $from = \\\\Nette\\\\DateTime::from($from)-&gt;format(<span class=\\"hljs-string\\">'Y-m-d'</span>);
                $to = \\\\Nette\\\\DateTime::from($to)-&gt;format(<span class=\\"hljs-string\\">'Y-m-d'</span>);
                $url = <span class=\\"hljs-keyword\\">$this</span>-&gt;rest_url . <span class=\\"hljs-string\\">'periods/'</span> . <span class=\\"hljs-keyword\\">$this</span>-&gt;token . <span class=\\"hljs-string\\">'/'</span> . $from . <span class=\\"hljs-string\\">'/'</span> . $to . <span class=\\"hljs-string\\">'/transactions.json'</span>;
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">$this</span>-&gt;parseJSON(<span class=\\"hljs-keyword\\">$this</span>-&gt;download($url));
        }

        <span class=\\"hljs-comment\\">/**
         * Oficiální výpisy pohybů z účtu.
         * JSON only!
         * <span class=\\"hljs-doctag\\">@param</span> $id
         * <span class=\\"hljs-doctag\\">@param</span> null $year
         * <span class=\\"hljs-doctag\\">@return</span> array|mixed
         */</span>
        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">transactionsByID</span><span class=\\"hljs-params\\">($id, $year = NULL)</span> </span>{
                <span class=\\"hljs-keyword\\">if</span> ($year === <span class=\\"hljs-keyword\\">NULL</span>) {
                        $year = date(<span class=\\"hljs-string\\">'Y'</span>);
                }
                $url = <span class=\\"hljs-keyword\\">$this</span>-&gt;rest_url . <span class=\\"hljs-string\\">'by-id/'</span> . <span class=\\"hljs-keyword\\">$this</span>-&gt;token . <span class=\\"hljs-string\\">'/'</span> . $year . <span class=\\"hljs-string\\">'/'</span> . $id . <span class=\\"hljs-string\\">'/transactions.json'</span>;
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">$this</span>-&gt;parseJSON(<span class=\\"hljs-keyword\\">$this</span>-&gt;download($url));
        }

        <span class=\\"hljs-comment\\">/**
         * Pohyby na účtu od posledního stažení.
         * JSON only!
         * <span class=\\"hljs-doctag\\">@return</span> array|mixed
         */</span>
        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">transactionsLast</span><span class=\\"hljs-params\\">()</span> </span>{
                $url = <span class=\\"hljs-keyword\\">$this</span>-&gt;rest_url . <span class=\\"hljs-string\\">'last/'</span> . <span class=\\"hljs-keyword\\">$this</span>-&gt;token . <span class=\\"hljs-string\\">'/transactions.json'</span>;
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">$this</span>-&gt;parseJSON(<span class=\\"hljs-keyword\\">$this</span>-&gt;download($url));
        }

        <span class=\\"hljs-comment\\">/**
         * <span class=\\"hljs-doctag\\">@param</span> $url
         * <span class=\\"hljs-doctag\\">@return</span> mixed
         * <span class=\\"hljs-doctag\\">@throws</span> \\\\Exception
         */</span>
        <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">download</span><span class=\\"hljs-params\\">($url)</span> </span>{
                <span class=\\"hljs-keyword\\">if</span> (!extension_loaded(<span class=\\"hljs-string\\">'curl'</span>)) {
                        <span class=\\"hljs-keyword\\">throw</span> <span class=\\"hljs-keyword\\">new</span> \\\\<span class=\\"hljs-keyword\\">Exception</span>(<span class=\\"hljs-string\\">'Curl extension, does\\\\'t loaded.'</span>);
                }
                $curl = curl_init();
                curl_setopt($curl, CURLOPT_URL, $url);
                curl_setopt($curl, CURLOPT_HEADER, <span class=\\"hljs-keyword\\">FALSE</span>);
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\\"hljs-keyword\\">TRUE</span>);
                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\\"hljs-keyword\\">FALSE</span>);
                curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class=\\"hljs-keyword\\">FALSE</span>);
                $result = curl_exec($curl);
                <span class=\\"hljs-keyword\\">return</span> $result;
                <span class=\\"hljs-comment\\">//return file_get_contents($url); //ALTERNATIVE</span>
        }

        <span class=\\"hljs-comment\\">/**
         * <span class=\\"hljs-doctag\\">@param</span> $data
         * <span class=\\"hljs-doctag\\">@return</span> array|mixed
         */</span>
        <span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">parseJSON</span><span class=\\"hljs-params\\">($data)</span> </span>{
                $json = json_decode($data);
                <span class=\\"hljs-keyword\\">if</span>($json === <span class=\\"hljs-keyword\\">NULL</span>) {
                        <span class=\\"hljs-comment\\">//Moc ryhlé požadavky na Fio API</span>
                        <span class=\\"hljs-keyword\\">throw</span> <span class=\\"hljs-keyword\\">new</span> \\\\<span class=\\"hljs-keyword\\">Exception</span>(<span class=\\"hljs-string\\">'Fio API overheated. Please wait...'</span>);
                        <span class=\\"hljs-comment\\">//Když se posílá stále moc požadavků, tak se to z Exception nikdy nevyhrabe. Musí se opravdu počkat.</span>
                }
                <span class=\\"hljs-keyword\\">if</span>(!$json-&gt;accountStatement-&gt;transactionList) {
                        <span class=\\"hljs-keyword\\">return</span> $json; <span class=\\"hljs-comment\\">// There are no transactions (header only)</span>
                }
                $payments = <span class=\\"hljs-keyword\\">array</span>();
                <span class=\\"hljs-keyword\\">foreach</span> ($json-&gt;accountStatement-&gt;transactionList-&gt;transaction <span class=\\"hljs-keyword\\">as</span> $row) {
                        $out = <span class=\\"hljs-keyword\\">array</span>();
                        <span class=\\"hljs-keyword\\">foreach</span> ($row <span class=\\"hljs-keyword\\">as</span> $column) {
                                <span class=\\"hljs-keyword\\">if</span> ($column) {
                                        $out[$column-&gt;id] = $column-&gt;value; <span class=\\"hljs-comment\\">//v $column-&gt;name je název položky</span>
                                        <span class=\\"hljs-comment\\">/*
                                         * 0  - Datum
                                         * 1  - Částka (!)
                                         * 5  - Variabilní symbol (!)
                                         * 14 - Měna (!)
                                         * Hodnoty (!) se musí použít ke kontrole správnosti...
                                         */</span>
                                }
                        }
                        array_push($payments, $out);
                }
                <span class=\\"hljs-keyword\\">return</span> $payments;
        }

}
</code></pre>
<p>S tím, že je zapotřebí předat FIO klíč z neonu. FIO třída se automaticky injectuje, tzn. že i konstruktor
této třídy bude doplněn automaticky. Je jen zapotřebí přidat do neonu onu konfiguraci:</p>
<pre><code class=\\"hljs lang-neon\\">parameters:
    fio_token: &#39;&#39; #token pro přístup do FIO banky

...

services:
    - Fresh\\\\Fio(token: %fio_token%)

...
</code></pre>
<p>Bylo by vhodné upozornit na fakt, že se jedná pouze o read-only přístup, tzn. že neexistují žádné funkce
pro zápis (ačkoliv existuje něco jako datumová zarážka). Díky tomu je možné použít takovéto nízkoúrovňové
zabezpečení pomocí jednoho tokenu.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Ftrida-pro-pripojeni-k-fio-api%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
