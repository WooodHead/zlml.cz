// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2279252371"
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Znovupoužitelný formulář
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Každý kdo nějakou chvíli pracuje s Nette Frameworkem již jistě narazil na prvky, které lze použít v aplikaci opakovaně. Říkejme jim znovupoužitelné komponenty, nebo prostě jen komponenty. Následující text má za úkol ukázat opět maximálně prakticky a uceleně jedno z možných řešení jak k tomuto problému přistupovat a co se mi na tomto řešení líbí, nebo naopak nelíbí.</p>
<h2 id=\\"motivace\\">Motivace <a href=\\"#motivace\\">#</a></h2><p>Proč vůbec přemýšlet o komponentách? Na tuto věc má pravděpodobně dost lidí zcela jiný názor. Pro mě je havní motivací to, že si vyčistím presentery. Chci toho mít v presenterech skutečně tak akorát. Vždyť podle MVP struktury bych v presenterech neměl mít nic složitého. A pak je zde ta znovupoužitelnost. Co když se rozhodnu, že potřebuji použít stejný formulář na více místech? Přece ho nebudu kopírovat. A že takový požadavek je sice často někdo zmíní, ale prakticky není moc reálný? Ale kdepak. Zrovna nedávno jsem vytvářel mnoho stránek a na každé jsem chtěl mít právě kontaktní formulář. To je požadavek na komponentu jako dělaný...</p>
<h2 id=\\"presenter\\">Presenter <a href=\\"#presenter\\">#</a></h2><p>Vždy když programuji něco takového, tak se nedívám na to, jak je to správně z hlediska OOP a bůh ví čeho všeho ještě. Pro mě je v současné chvíli klíčové to, jak se dané řešení bude používat. Přesenter by tedy mohl vypadat třeba takto:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">AdminPresenter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">BasePresenter</span> </span>{

    <span class=\\"hljs-comment\\">/** <span class=\\"hljs-doctag\\">@var</span> \\\\ActualityFactory <span class=\\"hljs-doctag\\">@inject</span> */</span>
    <span class=\\"hljs-keyword\\">public</span> $actualityFactory;

    <span class=\\"hljs-keyword\\">private</span> $id;

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">actionAktualita</span><span class=\\"hljs-params\\">($id = NULL)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;id = $id;
    }

    <span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createComponentForm</span><span class=\\"hljs-params\\">()</span> </span>{
        $control = <span class=\\"hljs-keyword\\">$this</span>-&gt;actualityFactory-&gt;create(<span class=\\"hljs-keyword\\">$this</span>-&gt;id);
        $control[<span class=\\"hljs-string\\">'form'</span>]-&gt;onSuccess[] = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-params\\">()</span> </span>{
            <span class=\\"hljs-keyword\\">$this</span>-&gt;redirect(<span class=\\"hljs-string\\">'default'</span>);
        };
        <span class=\\"hljs-keyword\\">return</span> $control;
    }

}
</code></pre>
<p>Mám tedy presenter, který je například pro administraci a jednu podstránku, která bude sloužit jak pro editaci aktuality, tak i pro přidání nové aktuality. Proto je parametrem <em>action</em> právě <code>id = NULL</code>. Tim totiž říkám, že může přijít jako parametr <em>ID</em> aktuality (v tom případě ji budu chtít upravovat), nebo toto <em>ID</em> nebude předáno a v tom případě bude hodnota <em>NULL</em> a budu s tím později patřičně nakládat.</p>
<p>V poslední metodě si daný formulář vytvořím. Teoreticky by stačila pouze první řádka. Přidávám však ještě další chování do pole <code>onSuccess[]</code>, protože chci komponentu používat na více místech, ale pokaždé po úspěchu přesměrovat na jinou stránku. Zde je jedna z věcí které se mi nelíbí. A to je právě to volání <code>$control[&#39;form&#39;]-&gt;onSuccess[] = ...</code>. Musím totiž vědět jak je pojmenovaný formulář uvnitř komponenty, což mě ale je skutečnosti vůbec nezajímá. Mnohem raději bych byl třeba za zápis <code>$control-&gt;onSuccess[] = ...</code>. Chápu, že se nemusí použít komponenta pouze na fomulář, ale přesto. <strong>Neznáte někdo lepší řešení?</strong></p>
<p>A teď přijde záludná otázka. Co je to ta factory a proč jí vlastně používám?</p>
<h2 id=\\"factory\\">Factory <a href=\\"#factory\\">#</a></h2><p>Protože v komponentách velmi často potřebuji nějaké závislosti, musím je tam nějak dostat. K tomu slouží například generované továrničky. Jedná se vlastně pouze o interface:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">interface</span> <span class=\\"hljs-title\\">IActualityFactory</span> </span>{

    <span class=\\"hljs-comment\\">/** <span class=\\"hljs-doctag\\">@return</span> \\\\Cntrl\\\\Actuality */</span>
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span><span class=\\"hljs-params\\">()</span></span>;

}
</code></pre>
<p>Nette se této továrničky chytí a vytvoří zhruba tento kód:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">final</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">SystemContainer_IActualityFactoryImpl_58_IActualityFactory</span> <span class=\\"hljs-keyword\\">implements</span> <span class=\\"hljs-title\\">IActualityFactory</span> </span>{

    <span class=\\"hljs-keyword\\">private</span> $container;

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(Nette\\\\DI\\\\Container $container)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;container = $container;
    }

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span><span class=\\"hljs-params\\">()</span> </span>{
        $service = <span class=\\"hljs-keyword\\">new</span> Cntrl\\\\Actuality;
        <span class=\\"hljs-keyword\\">return</span> $service;
    }

}
</code></pre>
<p>Zde je tedy (když bude potřeba) možné vytvořit nějaké závislosti a v metodě <code>create()</code> je komponentě předat. To vše lze udělat automaticky a Nette se o to postará. Dokonce lze předávat i parametry z konfiguračního souboru. Je to nesmírně elegantní řešení. Kdybych továrničky nepoužil, musel bych vytvářet ručně komponentu, to by ale znamenalo, že bych také musel předávat všechny závislosti ručně a jen bych si tím přidělal práci. Zkuste si vytvořit komponentu bez použití factory. Je nesmysl tahat si v presenteru nepotřebné závislosti přes presenter... Jak však předat parametry z presenteru? Netuším, jestli to lze nějak generovanou továrničku naučit, nic nám však nebrání napsat si vlastní factory:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ActualityFactory</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Object</span> </span>{

    <span class=\\"hljs-keyword\\">private</span> $actualities;

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(App\\\\Actualities $actualities)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;actualities = $actualities;
    }

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span><span class=\\"hljs-params\\">($id)</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> \\\\Cntrl\\\\Actuality(<span class=\\"hljs-keyword\\">$this</span>-&gt;actualities, $id);
    }

}
</code></pre>
<p>Je jasně vidět, že tato ručně napsaná factory vypadá velmi podobně jako automaticky vygenerovaná, ale navíc teď můžu předat metodě <code>create($id)</code> parametr, což je přesně to co potřebuji viz presenter. Chci si předat číslo aktuality a nevidím důvod proč bych to měl dělat až v komponentě. Komponenta potřebuje <em>ID</em> aktuality, ale kde ho vezme nemusí řešit. Je otázka, jestli bych si už rovnou neměl vytáhnout data z databáze v presenteru. Takto se mi to ale zatím líbí víc...</p>
<p>Ručně vytvořenou factory musíme ještě zaregistrovat v konfiguračním souboru:</p>
<pre><code class=\\"hljs lang-neon\\">services:
    - ActualityFactory
</code></pre>
<p>To je vše. Už jsme pouze krůček od funkčního formuláře.</p>
<h2 id=\\"samotn-komponenta\\">Samotná komponenta <a href=\\"#samotn-komponenta\\">#</a></h2><p>Samotný kód komponenty už není téměř ničím zvláštní, nebo nějak nepochopitelný:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">Cntrl</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">App</span>;
<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Entity</span>;
<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Application</span>\\\\<span class=\\"hljs-title\\">UI</span>;
<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>;

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Actuality</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">UI</span>\\\\<span class=\\"hljs-title\\">Control</span> </span>{

    <span class=\\"hljs-keyword\\">private</span> $actualities;
    <span class=\\"hljs-keyword\\">private</span> $actuality;

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(App\\\\Actualities $actualities, $id)</span> </span>{
        <span class=\\"hljs-keyword\\">parent</span>::__construct();
        <span class=\\"hljs-keyword\\">$this</span>-&gt;actualities = $actualities;
        <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality = <span class=\\"hljs-keyword\\">$this</span>-&gt;actualities-&gt;findOneBy([<span class=\\"hljs-string\\">'id'</span> =&gt; $id]);
    }

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">render</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;template-&gt;setFile(<span class=\\"hljs-keyword\\">__DIR__</span> . <span class=\\"hljs-string\\">'/Actuality.latte'</span>);
        <span class=\\"hljs-keyword\\">$this</span>-&gt;template-&gt;render();
    }

    <span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createComponentForm</span><span class=\\"hljs-params\\">()</span> </span>{
        $form = <span class=\\"hljs-keyword\\">new</span> UI\\\\Form;
        $form-&gt;addText(<span class=\\"hljs-string\\">'headline'</span>, <span class=\\"hljs-string\\">'Titulek:'</span>);
        $form-&gt;addTextArea(<span class=\\"hljs-string\\">'text'</span>, <span class=\\"hljs-string\\">'Text:'</span>);
        $form-&gt;addSubmit(<span class=\\"hljs-string\\">'send'</span>, <span class=\\"hljs-string\\">'Uložit'</span>);
        <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">$this</span>-&gt;actuality) { <span class=\\"hljs-comment\\">//výchozí hodnoty jen pokud aktualita již existuje</span>
            $form-&gt;setDefaults(<span class=\\"hljs-keyword\\">array</span>(
                <span class=\\"hljs-string\\">'headline'</span> =&gt; <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality-&gt;headline,
                <span class=\\"hljs-string\\">'text'</span> =&gt; <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality-&gt;text,
            ));
        }
        $form-&gt;onSuccess[] = <span class=\\"hljs-keyword\\">$this</span>-&gt;actualityFormSucceeded;
        <span class=\\"hljs-keyword\\">return</span> $form;
    }

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">actualityFormSucceeded</span><span class=\\"hljs-params\\">(UI\\\\Form $form)</span> </span>{
        $values = $form-&gt;getValues();
        <span class=\\"hljs-keyword\\">try</span> {
            <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-keyword\\">$this</span>-&gt;actuality) { <span class=\\"hljs-comment\\">//pokud ještě neexistuje vytvořím novou entitu</span>
                <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality = <span class=\\"hljs-keyword\\">new</span> Entity\\\\Actuality();
            }
            <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality-&gt;headline = $values-&gt;headline;
            <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality-&gt;text = $values-&gt;text;
            <span class=\\"hljs-keyword\\">$this</span>-&gt;actuality-&gt;date = <span class=\\"hljs-keyword\\">new</span> \\\\DateTime();
            <span class=\\"hljs-keyword\\">$this</span>-&gt;actualities-&gt;save(<span class=\\"hljs-keyword\\">$this</span>-&gt;actuality);
            <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter-&gt;flashMessage(<span class=\\"hljs-string\\">'Aktualita byla úspěšně uložena.'</span>, <span class=\\"hljs-string\\">'success'</span>);
        } <span class=\\"hljs-keyword\\">catch</span> (\\\\<span class=\\"hljs-keyword\\">Exception</span> $exc) {
            <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter-&gt;flashMessage($exc-&gt;getMessage(), <span class=\\"hljs-string\\">'danger'</span>);
        }
        <span class=\\"hljs-comment\\">//žádný redirect, až v presenteru!</span>
    }

}
</code></pre>
<p>V konstruktoru jednak získám nějakou modelovou třídu pro práci s databází (o to se krom factory  vůbec nestarám) a také <em>ID</em>, které přišlo z presenteru. A rovnou toto <em>ID</em> použiju k vytáhnutí si dat z databáze, protože konstruktor se spustí vždy a já také vím, že tyto data budu vždy potřebovat. V <code>render()</code> metodě pouze předám šablonu komponenty, která ve své nejprimitivnější podobě může vypada pouze takto:</p>
<pre><code class=\\"hljs\\">{control form}
</code></pre><p>Ostatně stejný kód mohu použít pro šablonu do které předávám komponentu z presenteru. Výsledkem celého snažení je tedy poměrně jednoduchý přesenter a jedna stránka na které je formulář, který zvládne jak editaci, tak vytváření nového záznamu v databázi.</p>
<p>Používáte nějaké lepší (jiné) řešení? Podělte se o něj... :-)</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3168189516"
        >
          <a
            className="jsx-3168189516 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fznovupouzitelny-formular%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
