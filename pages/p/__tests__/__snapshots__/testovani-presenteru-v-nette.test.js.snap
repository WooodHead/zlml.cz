// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2279252371"
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Testování presenterů v Nette
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Tak toto je přesně to téma o kterém se naustále mluví, ale tím to z velké části končí.
Nemá smysl zabývat se tím, jestli testovat, nebo ne. Na to už si každý přijde sám.
V následujících odstavcích bych rád předvedl myšlenku jak si
ušetřit pár řádek kódu při testech (\\\\Nette\\\\Tester).</p>
<h2 id=\\"nezbytn-teorie\\">Nezbytná teorie <a href=\\"#nezbytn-teorie\\">#</a></h2><p>Pro testování presenterů je zapotřebí získat továrnu na presentery PresenterFactory
a následně daný presenter vyrobit. Například takto:</p>
<pre><code class=\\"hljs lang-php\\">$presenterFactory = <span class=\\"hljs-keyword\\">$this</span>-&gt;container-&gt;getByType(<span class=\\"hljs-string\\">'Nette\\\\Application\\\\IPresenterFactory'</span>);
<span class=\\"hljs-keyword\\">$this</span>-&gt;presenter = $presenterFactory-&gt;createPresenter(<span class=\\"hljs-string\\">'Front:Homepage'</span>);
</code></pre>
<p>K tomu je zapotřebí \\\\Nette\\\\DI\\\\Container, který získáme například v konstruktoru, nebo
pomocí inject anotace.</p>
<p>Následně je třeba vytvořit požadavek, ten spustit a testovat výslednou odpověď:</p>
<pre><code class=\\"hljs lang-php\\">$request = <span class=\\"hljs-keyword\\">new</span> \\\\Nette\\\\Application\\\\Request(<span class=\\"hljs-keyword\\">$this</span>-&gt;presName, $method, $params, $post);
$response = <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter-&gt;run($request);
</code></pre>
<p>Právě nad vrácenou odpovědí lze spustit testovací sadu, která bude testovat, 
zda byla například získána textová odpověď a tedy jestli se jedná o šablonu:</p>
<pre><code class=\\"hljs lang-php\\">\\\\Tester\\\\Assert::true($response <span class=\\"hljs-keyword\\">instanceof</span> \\\\Nette\\\\Application\\\\Responses\\\\TextResponse);
\\\\Tester\\\\Assert::true($response-&gt;getSource() <span class=\\"hljs-keyword\\">instanceof</span> \\\\Nette\\\\Templating\\\\ITemplate);
</code></pre>
<p>Je také vhodné otestovat samotný HTML kód. Již mě to párkrát upozornilo na
nevalidní kód, což se může stát, pokud se šablona skládá z hodně include částí.
Nevalidní ve smyslu například dvojité HTML ukončovací značky:</p>
<pre><code class=\\"hljs lang-php\\">$html = (string)$response-&gt;getSource();
$dom = \\\\Tester\\\\DomQuery::fromHtml($html);
\\\\Tester\\\\Assert::true($dom-&gt;has(<span class=\\"hljs-string\\">'title'</span>));
</code></pre>
<h2 id=\\"psan-psan-psan-\\">Psaní, psaní, psaní... <a href=\\"#psan-psan-psan-\\">#</a></h2><p>Předchozí teorie je zapotřebí opakovat pro každý presenter. Už jen proto, že je třeba
vytvořit pokaždé nový požadavek. Nicméně je jasné, že to po otestování FrontModule
začne být lehce kopírovací nuda.</p>
<p>Je tedy vhodné vytvořit si třídu, která ušetří spoustu řádek.
Můj první návrh vypadá přibližně takto:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">Test</span>;

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Presenter</span> <span class=\\"hljs-keyword\\">extends</span> \\\\<span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Object</span> </span>{

        <span class=\\"hljs-keyword\\">private</span> $container;
        <span class=\\"hljs-keyword\\">private</span> $presenter;
        <span class=\\"hljs-keyword\\">private</span> $presName;

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(\\\\Nette\\\\DI\\\\Container $container)</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;container = $container;
        }

        <span class=\\"hljs-comment\\">/**
         * <span class=\\"hljs-doctag\\">@param</span> $presName string Fully qualified presenter name.
         */</span>
        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">init</span><span class=\\"hljs-params\\">($presName)</span> </span>{
                $presenterFactory = <span class=\\"hljs-keyword\\">$this</span>-&gt;container-&gt;getByType(<span class=\\"hljs-string\\">'Nette\\\\Application\\\\IPresenterFactory'</span>);
                <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter = $presenterFactory-&gt;createPresenter($presName);
                <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter-&gt;autoCanonicalize = <span class=\\"hljs-keyword\\">FALSE</span>;
                <span class=\\"hljs-keyword\\">$this</span>-&gt;presName = $presName;
        }

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">test</span><span class=\\"hljs-params\\">($action, $method = <span class=\\"hljs-string\\">'GET'</span>, $params = array<span class=\\"hljs-params\\">()</span>, $post = array<span class=\\"hljs-params\\">()</span>)</span> </span>{
                $params[<span class=\\"hljs-string\\">'action'</span>] = $action;
                $request = <span class=\\"hljs-keyword\\">new</span> \\\\Nette\\\\Application\\\\Request(<span class=\\"hljs-keyword\\">$this</span>-&gt;presName, $method, $params, $post);
                $response = <span class=\\"hljs-keyword\\">$this</span>-&gt;presenter-&gt;run($request);
                <span class=\\"hljs-keyword\\">return</span> $response;
        }

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">testAction</span><span class=\\"hljs-params\\">($action, $method = <span class=\\"hljs-string\\">'GET'</span>, $params = array<span class=\\"hljs-params\\">()</span>, $post = array<span class=\\"hljs-params\\">()</span>)</span> </span>{
                $response = <span class=\\"hljs-keyword\\">$this</span>-&gt;test($action, $method, $params, $post);

                \\\\Tester\\\\Assert::true($response <span class=\\"hljs-keyword\\">instanceof</span> \\\\Nette\\\\Application\\\\Responses\\\\TextResponse);
                \\\\Tester\\\\Assert::true($response-&gt;getSource() <span class=\\"hljs-keyword\\">instanceof</span> \\\\Nette\\\\Templating\\\\ITemplate);

                $html = (string)$response-&gt;getSource();
                $dom = \\\\Tester\\\\DomQuery::fromHtml($html);
                \\\\Tester\\\\Assert::true($dom-&gt;has(<span class=\\"hljs-string\\">'title'</span>));

                <span class=\\"hljs-keyword\\">return</span> $response;
        }

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">testForm</span><span class=\\"hljs-params\\">($action, $method = <span class=\\"hljs-string\\">'POST'</span>, $post = array<span class=\\"hljs-params\\">()</span>)</span> </span>{
                $response = <span class=\\"hljs-keyword\\">$this</span>-&gt;test($action, $method, $post);

                \\\\Tester\\\\Assert::true($response <span class=\\"hljs-keyword\\">instanceof</span> \\\\Nette\\\\Application\\\\Responses\\\\RedirectResponse);

                <span class=\\"hljs-keyword\\">return</span> $response;
        }

}
</code></pre>
<p>Testování samotných presenterů je pak již otázkou několika málo řádek:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">Test</span>;

$container = <span class=\\"hljs-keyword\\">require</span> <span class=\\"hljs-keyword\\">__DIR__</span> . <span class=\\"hljs-string\\">'/../bootstrap.php'</span>;

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">HomepagePresenterTest</span> <span class=\\"hljs-keyword\\">extends</span> \\\\<span class=\\"hljs-title\\">Tester</span>\\\\<span class=\\"hljs-title\\">TestCase</span> </span>{

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">(\\\\Nette\\\\DI\\\\Container $container)</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;tester = <span class=\\"hljs-keyword\\">new</span> \\\\Test\\\\Presenter($container);
        }

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setUp</span><span class=\\"hljs-params\\">()</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;tester-&gt;init(<span class=\\"hljs-string\\">'Front:Homepage'</span>);
        }

        <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">testRenderDefault</span><span class=\\"hljs-params\\">()</span> </span>{
                <span class=\\"hljs-keyword\\">$this</span>-&gt;tester-&gt;testAction(<span class=\\"hljs-string\\">'default'</span>);
        }

}

id(<span class=\\"hljs-keyword\\">new</span> HomepagePresenterTest($container))-&gt;run();
</code></pre>
<p>Takto chápu testování presenterů v Nette já. Dále budu směrovat testy tak, abych nemusel psát téměř nic
a měl jsem otestováno téměř všechno. Myslím si, že toto je jediná cesta jak se přinutit k testování.
Nelze se již vymlouvat na to, že je to spousta psaní navíc. Není.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3168189516"
        >
          <a
            className="jsx-3168189516 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Ftestovani-presenteru-v-nette%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
