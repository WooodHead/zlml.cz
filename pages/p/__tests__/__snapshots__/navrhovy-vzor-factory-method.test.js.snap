// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2279252371"
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Návrhový vzor Factory Method
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Návrhový vzor Factory Method má za úkol definovat rozhraní pro vytváření objektů s tím, že vlastní tvorbu instancí přenechává potomkům. Samotný návrhový vzor tedy tvoří například tyto dvě třídy.</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>
<span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ACreator</span> </span>{
    <span class=\\"hljs-keyword\\">protected</span> $attribute;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">($attribute)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;attribute = $attribute;
    }
    <span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createConcreteObject</span><span class=\\"hljs-params\\">()</span></span>;
}
</code></pre>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ConcreteCreator</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">ACreator</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createConcreteObject</span><span class=\\"hljs-params\\">()</span> </span>{
        $concreteObject = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-keyword\\">$this</span>-&gt;attribute);
        <span class=\\"hljs-keyword\\">return</span> $concreteObject;
    }
}
</code></pre>
<p>Aby však tento vzor měl nějaký smysl, je potřeba ještě minimálně jedna třída od které se budou dělat instance (ConcreteObject).</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ConcreteObject</span> <span class=\\"hljs-keyword\\">implements</span> <span class=\\"hljs-title\\">IObject</span> </span>{
    <span class=\\"hljs-keyword\\">protected</span> $attribute;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">($attribute)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;attribute = $attribute;
    }
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">test</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">echo</span> <span class=\\"hljs-keyword\\">$this</span>-&gt;attribute;
    }
}
</code></pre>
<p>Případně jeho rozhraní:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">interface</span> <span class=\\"hljs-title\\">IObject</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">test</span><span class=\\"hljs-params\\">()</span></span>;
}
</code></pre>
<p>Vraťme se však na začátek. Vytvářet objekty všichni umí. Slouží k tomu známý operátor <code>new</code>. Na tom není nic divného, ale jen do chvíle, než se nad tím zamyslíte. Představte si rozsáhlou aplikaci, kde na každém rohu potřebujete vytvořit instanci určitého objektu. Takže jako vždy zavoláte operátor <code>new</code> a předáte všechny potřebné argumenty. A pak se to stane. Najednou zjistíte, že nutně potřebujete přidat do konstruktoru argument/y a máte týden co dělat. K tomu se právě hodí vytvořit si továrnu na tyto instance, kdy budeme pouze volat metodu pro její vytvoření, ale to jak se vytvoří necháme na továrně. Obecně se ve světě OOP velmi často dělá, že nějakou práci prostě necháme na někom jiném. Je to funkční a pohodlný přístup. :-)</p>
<p>Pokud tedy zapomenu na to, že existují nějaké třídy Creator, tak by použití třídy ConcreteObject vypadalo asi takto:</p>
<pre><code class=\\"hljs lang-php\\">$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);
$instance-&gt;test();
</code></pre>
<p>Při zapojení továrny je použití zdánlivě složitější.</p>
<pre><code class=\\"hljs lang-php\\">$factory = <span class=\\"hljs-keyword\\">new</span> ConcreteCreator(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = $factory-&gt;createConcreteObject();
$instance-&gt;test();
</code></pre>
<p>Přidaná hodnota tohoto postupu je však velká. Již nejsme vázání na konkrétní implementaci objektu ConcreteObject. Vlastně nás to vůbec nezajímá. Víme, že pro jeho tvorbu potřebuje továrna nějaký atribut a to, jestli pak ještě další tři přidá, nebo ne, nám může být úplně jedno. Kdo stále ještě nevěří, že je tento postup výhodný, nechť si vyzkouší vytvořit několik instancí stejného objektu (hloupý, ale názorný příklad).</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-comment\\">// pomocí operátoru new:</span>
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>);

<span class=\\"hljs-comment\\">// pomocí továrny:</span>
$factory = <span class=\\"hljs-keyword\\">new</span> ConcreteCreator(<span class=\\"hljs-string\\">'TEST'</span>);
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
</code></pre>
<p>A teď přidejme nový atribut - aktuální rok.</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-comment\\">// pomocí operátoru new:</span>
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));
$instance = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));

<span class=\\"hljs-comment\\">// pomocí továrny:</span>
$factory = <span class=\\"hljs-keyword\\">new</span> ConcreteCreator(<span class=\\"hljs-string\\">'TEST'</span>, date(<span class=\\"hljs-string\\">'Y'</span>));
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
$instance = $factory-&gt;createConcreteObject();
</code></pre>
<p>Krom toho, že by mě za chvíli přestalo bavit do každého konstruktoru kopírovat nový atribut, tak jsem také mohl udělat o hodně více chyb než u továrny. Pravdou je, že jsem musel upravit ještě pár tříd:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>
<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ConcreteObject</span> <span class=\\"hljs-keyword\\">implements</span> <span class=\\"hljs-title\\">IObject</span> </span>{
    <span class=\\"hljs-keyword\\">protected</span> $attribute;
    <span class=\\"hljs-keyword\\">protected</span> $year;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">($attribute, $year)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;attribute = $attribute;
        <span class=\\"hljs-keyword\\">$this</span>-&gt;year = $year;
    }
    <span class=\\"hljs-comment\\">// ...</span>
}

<span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ACreator</span> </span>{
    <span class=\\"hljs-keyword\\">protected</span> $attribute;
    <span class=\\"hljs-keyword\\">protected</span> $year;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">__construct</span><span class=\\"hljs-params\\">($attribute, $year)</span> </span>{
        <span class=\\"hljs-keyword\\">$this</span>-&gt;attribute = $attribute;
        <span class=\\"hljs-keyword\\">$this</span>-&gt;year = $year;
    }
    <span class=\\"hljs-keyword\\">abstract</span> <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createConcreteObject</span><span class=\\"hljs-params\\">()</span></span>;
}

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">ConcreteCreator</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">ACreator</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createConcreteObject</span><span class=\\"hljs-params\\">()</span> </span>{
        $concreteObject = <span class=\\"hljs-keyword\\">new</span> ConcreteObject(<span class=\\"hljs-keyword\\">$this</span>-&gt;attribute, <span class=\\"hljs-keyword\\">$this</span>-&gt;year);
        <span class=\\"hljs-keyword\\">return</span> $concreteObject;
    }
}
</code></pre>
<p>Nicméně křivka výhod při používání továrny velmi rychle překoná svým stoupáním křivku lenosti při používání operátoru new.</p>
<p>Mimochodem vzpomeňte si na <a href=\\"osm-navrhovych-prikazani\\">osm návrhových přikázání</a>, kde se také říká, že máme vždy programovat vůči rozhraní, a nikdy ne vůči konkrétní implementaci, což tento návrhový vzor perfektně splňuje.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3168189516"
        >
          <a
            className="jsx-3168189516 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fnavrhovy-vzor-factory-method%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
