// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Automatický render prvků při manuálním vykreslování formuláře
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Je čas na nějakou tu Nette divočinu. Podívejme se pod drobnohledem na to, jak funguje vykreslování prvků formuláře. Nejprve si vytvoříme úplně jednoduchý formulář, který bude obsahovat jeden prvek:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createComponentContactForm</span><span class=\\"hljs-params\\">()</span>
</span>{
    $form = <span class=\\"hljs-keyword\\">new</span> UI\\\\Form();
    $form-&gt;addSubmit(<span class=\\"hljs-string\\">'send'</span>, <span class=\\"hljs-string\\">'Odeslat'</span>);
    $form-&gt;onSuccess[] = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-params\\">(UI\\\\Form $form, $values)</span> </span>{
        <span class=\\"hljs-keyword\\">throw</span> <span class=\\"hljs-keyword\\">new</span> \\\\Nette\\\\NotImplementedException;
    };
    <span class=\\"hljs-keyword\\">return</span> $form;
}
</code></pre>
<p>Jak bude vypadat takový formulář když jej vykreslíme pomocí <code>{control contactForm}</code>? Ve výchozím projektu asi nějak takto:</p>
<pre><code class=\\"hljs lang-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">form</span> <span class=\\"hljs-attr\\">action</span>=<span class=\\"hljs-string\\">\\"/web-project/www/\\"</span> <span class=\\"hljs-attr\\">method</span>=<span class=\\"hljs-string\\">\\"post\\"</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"frm-contactForm\\"</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">table</span>&gt;</span><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">tbody</span>&gt;</span><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">tr</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">th</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">th</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">td</span>&gt;</span><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">\\"submit\\"</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"send\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"Odeslat\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"button\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">td</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">tr</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">tbody</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">table</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">\\"hidden\\"</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"_do\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"contactForm-submit\\"</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">form</span>&gt;</span>
</code></pre>
<p>Aniž se budeme nořit do detailů, tak je zřejmé, že se kromě našeho odesílacího inputu vyrenderoval i nějaký hidden input automaticky. Než se posuneme dále z tohoto úvodu, zjistíme ještě, co se stane při manuálním vykreslování:</p>
<pre><code class=\\"hljs lang-latte\\">{form contactForm}
    {input send}
{/form}
</code></pre>
<p>Ačkoliv to není nikde dané, i v tomto případě se vykreslil další input prvek automaticky:</p>
<pre><code class=\\"hljs lang-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">form</span> <span class=\\"hljs-attr\\">action</span>=<span class=\\"hljs-string\\">\\"/web-project/www/\\"</span> <span class=\\"hljs-attr\\">method</span>=<span class=\\"hljs-string\\">\\"post\\"</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"frm-contactForm\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">\\"submit\\"</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"send\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"Odeslat\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">\\"hidden\\"</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"_do\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"contactForm-submit\\"</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">form</span>&gt;</span>
</code></pre>
<h2 id=\\"chytr-antispam-prvek\\">Chytrý antispam prvek <a href=\\"#chytr-antispam-prvek\\">#</a></h2><p>Po krátkém úvodu (který je zcela jistě každému jasný) se přesuneme k něčemu zdánlivě jinému. Vytvoříme si chytrý antispam prvek a zjistíme, jak se bude při renderování chovat a jestli se vždy chová předvídatelně. A asi nebude překvapením, že se v určité situaci zachová moc moc špatně. Jedná se o delší kód, takže jej <a href=\\"https://gist.github.com/mrtnzlml/95ac7726cf2788d83e3c87bc97dbef3a\\">najdete na Gistu</a>. Prakticky nejde o nic jiného, než že si vytvoříme vlastní antispam prvek. Tento prvek funguje tak, že vytvoří input ve kterém je nějaký text a pokud je k dispozici javascript, tak jej schová a smaže obsah. V tom případě je kontrola v pořádku, protože tiše předpokládá, že útočníkův robot nebude umět JS. Ačkoliv se to v dnešní době může zdát jako absurdní, tak to pořád funguje velmi dobře. Navíc přidává ještě pár honeypotů a doufá, že někde robot uvízne. Důležité je, že nijak neobtěžuje běžného návštěvníka - prostě to není vůbec vidět.</p>
<p>Napíšeme si jednoduché rozšíření pro DI kontejner, aby bylo možné tento nový prvek používat:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-meta\\">&lt;?php</span>

<span class=\\"hljs-keyword\\">namespace</span> <span class=\\"hljs-title\\">App</span>;

<span class=\\"hljs-keyword\\">use</span> <span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Forms</span>\\\\<span class=\\"hljs-title\\">Form</span>;

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">HoneypotExtension</span> <span class=\\"hljs-keyword\\">extends</span> \\\\<span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">DI</span>\\\\<span class=\\"hljs-title\\">CompilerExtension</span>
</span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">afterCompile</span><span class=\\"hljs-params\\">(\\\\Nette\\\\PhpGenerator\\\\ClassType $class)</span>
    </span>{
        $init = $class-&gt;methods[<span class=\\"hljs-string\\">'initialize'</span>];
        $init-&gt;addBody(<span class=\\"hljs-keyword\\">self</span>::class . <span class=\\"hljs-string\\">'::registerControlExtensionMethods();'</span>);
    }

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">registerControlExtensionMethods</span><span class=\\"hljs-params\\">()</span>
    </span>{
        Form::extensionMethod(<span class=\\"hljs-string\\">'addAntispam'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-params\\">(Form $form, $name = <span class=\\"hljs-string\\">'honeypot'</span>, $label = <span class=\\"hljs-string\\">'Vymažte toto pole'</span>)</span> </span>{
            $form[$name . <span class=\\"hljs-string\\">'_1'</span>] = <span class=\\"hljs-keyword\\">new</span> \\\\App\\\\Forms\\\\AntispamControl($name, $label);
            <span class=\\"hljs-keyword\\">return</span> $form;
        });
    }

}
</code></pre>
<p>Toto rozšíření samozřejmě zaregistrujeme v konfiguračním souboru:</p>
<pre><code class=\\"hljs lang-neon\\">extensions:
    - App\\\\HoneypotExtension
</code></pre>
<p>A je to - v našem původním formuláři můžeme použít nový prvek:</p>
<pre><code class=\\"hljs lang-php\\">$form = <span class=\\"hljs-keyword\\">new</span> UI\\\\Form();
$form-&gt;addAntispam();
<span class=\\"hljs-comment\\">//...</span>
</code></pre>
<p>Je to trošku magie a IDE si s tím neporadí. Proto nebude našeptávat. V tomto případě doporučuji napsat si nějakou vlastní <code>FormFactory</code>, která bude vytváře instance <code>UI\\\\Form</code> a do této třídy doplnit anotaci <code>@method addAntispam()</code>. Udělat si vlastní továrničku na <code>UI\\\\Form</code> není vůbec špatný nápad a to nejen pro antispam. Just do it.</p>
<p>Tak a teď když máme funkční antispam a honeypoty formuláře, je čas kouknout se co se děje při renderování. Nejdříve automatické - pomocí <code>{control contactForm}</code>. Zde není co řešit. Prostě se všechny potřebná políčka vyrenderují a vše je tak, jak by mělo být. A co manuální vykreslování? Zde začíná ta nepříjemná část. Nette nemůže vědět, že by měl automaticky vykreslit i další prvky, takže je prostě nevykreslí. Praktická zkušenost je taková, že při manuálním vykreslování prostě antispam přestane fungovat. Zde se musíme ještě zasnažit.</p>
<h2 id=\\"chyt-ej-antispam-prvek\\">Chytřejší antispam prvek <a href=\\"#chyt-ej-antispam-prvek\\">#</a></h2><p>Teď musíme jít fakt na dřeň problému. Jak vlastně funguje to automatické renderování inputu při manuálním vykreslování? Existuje něco jako třída <code>Nette\\\\Bridges\\\\FormsLatte\\\\Runtime</code>, která má dvě metody: <code>renderFormBegin</code> a <code>renderFormEnd</code>. Právě druhá zmíněná přidává nějaký vlastní kód a je jedno, jestli se jedná o manuální, nebo automatické renderování formuláře. To by se nám hodilo. Vytvořme si tedy vlastní <code>Runtime</code> třídu. Není potřeba aby tato třída dědila od původní. Stačí, když si vykopírujeme metodu <code>renderFormEnd</code> a lehounce pozměníme prostřední foreach:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-keyword\\">foreach</span> ($form-&gt;getControls() <span class=\\"hljs-keyword\\">as</span> $control) {
    <span class=\\"hljs-keyword\\">if</span> ($control-&gt;getOption(<span class=\\"hljs-string\\">'autorender'</span>) || ($control-&gt;getOption(<span class=\\"hljs-string\\">'type'</span>) === <span class=\\"hljs-string\\">'hidden'</span> &amp;&amp; !$control-&gt;getOption(<span class=\\"hljs-string\\">'rendered'</span>))) {
        $s .= $control-&gt;getControl();
    }
}
</code></pre>
<p>Přesně tak. Všechny čáry a kouzla se aktivují, když nastavíme prvkům <code>autorender</code> (<a href=\\"https://gist.github.com/mrtnzlml/95ac7726cf2788d83e3c87bc97dbef3a\\">viz Gist</a>). Jenže kde se tato třída původně používala? Kde ji použijeme nyní?</p>
<p>Řešení najdeme opět v namespace <code>Nette\\\\Bridges\\\\FormsLatte</code>, tentokrát však ve třídě <code>FormMacros</code>, která registruje formulářová makra. Vytvoříme si tedy vlastní implementaci <code>FormMacros</code> třídy, která bude dědit od původní:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">FormMacros</span> <span class=\\"hljs-keyword\\">extends</span> \\\\<span class=\\"hljs-title\\">Nette</span>\\\\<span class=\\"hljs-title\\">Bridges</span>\\\\<span class=\\"hljs-title\\">FormsLatte</span>\\\\<span class=\\"hljs-title\\">FormMacros</span>
</span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">install</span><span class=\\"hljs-params\\">(\\\\Latte\\\\Compiler $compiler)</span>
    </span>{
        $me = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-keyword\\">static</span>($compiler);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'form'</span>, [$me, <span class=\\"hljs-string\\">'macroForm'</span>], <span class=\\"hljs-string\\">'echo \\\\App\\\\Forms\\\\Runtime::renderFormEnd(array_pop($this-&gt;global-&gt;formsStack));'</span>);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'formContainer'</span>, [$me, <span class=\\"hljs-string\\">'macroFormContainer'</span>], <span class=\\"hljs-string\\">'array_pop($this-&gt;global-&gt;formsStack); $formContainer = $_form = end($this-&gt;global-&gt;formsStack)'</span>);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'label'</span>, [$me, <span class=\\"hljs-string\\">'macroLabel'</span>], [$me, <span class=\\"hljs-string\\">'macroLabelEnd'</span>], <span class=\\"hljs-keyword\\">NULL</span>, <span class=\\"hljs-keyword\\">self</span>::AUTO_EMPTY);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'input'</span>, [$me, <span class=\\"hljs-string\\">'macroInput'</span>]);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'name'</span>, [$me, <span class=\\"hljs-string\\">'macroName'</span>], [$me, <span class=\\"hljs-string\\">'macroNameEnd'</span>], [$me, <span class=\\"hljs-string\\">'macroNameAttr'</span>]);
        $me-&gt;addMacro(<span class=\\"hljs-string\\">'inputError'</span>, [$me, <span class=\\"hljs-string\\">'macroInputError'</span>]);
    }

}
</code></pre>
<p>Důležitá je zde registrace makra <code>{form}</code>, protože to pro svojí uzavírací značku používá novou implementaci <code>Runtime</code> (tu která podporuje autorender). Zaregistrujeme:</p>
<pre><code class=\\"hljs lang-neon\\">latte:
    macros:
        - App\\\\Forms\\\\FormMacros::install
</code></pre>
<p>Smažeme cache a profitujeme. Nyní se autospam vykresluje automaticky i při manuálním renderování... :)</p>
<p>Podobně lze samozřejmě přidat i další kontroly jako je například kontrolní součet dvou čísel, který se javascriptem předvypočte automaticky, ale s vypnutým javascriptem se zobrazí políčka pro uživatele. Řešení tohoto antispamu je také <a href=\\"https://gist.github.com/mrtnzlml/961c3e2368e98aaa433e02c6603a5086\\">na mém Gistu</a>. Jen je potřeba trošku rozšířit <code>HoneypotExtension</code>:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">registerControlExtensionMethods</span><span class=\\"hljs-params\\">()</span>
</span>{
    Form::extensionMethod(<span class=\\"hljs-string\\">'addAntispam'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-params\\">(Form $form, $name = <span class=\\"hljs-string\\">'honeypot'</span>, $label = <span class=\\"hljs-string\\">'Vymažte toto pole'</span>)</span> </span>{
        $form[$name . <span class=\\"hljs-string\\">'_1'</span>] = <span class=\\"hljs-keyword\\">new</span> \\\\App\\\\AntispamControl($name, $label);

        $first = round(rand(<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">900</span>), <span class=\\"hljs-number\\">-2</span>);
        $second = rand(<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">99</span>);
        $validationData = <span class=\\"hljs-keyword\\">self</span>::encodeNumber($first) . <span class=\\"hljs-string\\">';'</span> . <span class=\\"hljs-keyword\\">self</span>::encodeNumber($second);
        $form-&gt;addHidden(<span class=\\"hljs-string\\">'validationData'</span>, $validationData)-&gt;setOmitted(<span class=\\"hljs-keyword\\">TRUE</span>)-&gt;setOption(<span class=\\"hljs-string\\">'autorender'</span>, <span class=\\"hljs-keyword\\">TRUE</span>);
        $form[$name . <span class=\\"hljs-string\\">'_3'</span>] = <span class=\\"hljs-keyword\\">new</span> \\\\App\\\\Forms\\\\SumAntispamControl($first, $second, $validationData);

        <span class=\\"hljs-keyword\\">return</span> $form;
    });
}

<span class=\\"hljs-keyword\\">private</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">encodeNumber</span><span class=\\"hljs-params\\">($originalNumber)</span>
</span>{
    <span class=\\"hljs-keyword\\">return</span> strtr($originalNumber, <span class=\\"hljs-string\\">'0123456789'</span>, <span class=\\"hljs-string\\">'(_.!)@-*+&amp;'</span>); <span class=\\"hljs-comment\\">//cannot contain ';' character</span>
}
</code></pre>
<p>Původní kód zůstává stejný, jen jsem přidal další kontrolu a zakódoval číslice tak, aby nebylo jednoduché na první pohled poznat princip tohoto antispamu. Ve fantazii se meze nekladou.</p>
<p>A právě v tom je možná trošku problém. Zejména kvůli autorender funkci je potřeba zasahovat do vnitřností Nette a zde je již na pováženou, jestli je to dobře či nikoliv. Velké úskalí vidím v tom, že si programátor vyměňuje stavební kameny Nette za svoje trošku upravené a to nemusí být vždy hned evidentní. Pak je na zamyšlenou, jestli by nestálo za to vytvořit PR. Kdo by ale stál o takovou hovadinu... :)</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fautomaticky-render-prvku-pri-manualnim-vykreslovani-formulare%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
