// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2279252371"
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      RESP protokol - přímý přístup k Redis databázi
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p><a href=\\"http://redis.io/topics/protocol\\">RESP</a> (<strong>RE</strong>dis <strong>S</strong>erialization <strong>P</strong>rotocol) je něco, s čím se asi většina lidí nepotká. Důvod je prostý. Tento protokol je většinou zabalen hluboko v knihovně, která pracuje s Redis databází. Existují však situace, kdy se tento protokol hodí. Jednou ze situací je stav, kdy potřebujete předat, nebo naopak získat z Redisu nějaká data a všechno ostatní vyjma RESP komunikace je zbytečné zdržování (u mě třeba sypání dat z procesoru přímo do Redisu). Druhý případ nastane v okamžiku, kdy potřebujete zajistit komunikaci klient-server a potřebujete zvolit vhodný formát přenosu informací. Jedná se tedy o použití tohoto protokolu úplně mimo Redis. Důvodů může být celá řada, nejhlavnější by však byl asi ten, že se s RESP formátem dat dá snadno pracovat, protože používá prefixový zápis.</p>
<h2 id=\\"form-t-resp-protokolu\\">Formát RESP protokolu <a href=\\"#form-t-resp-protokolu\\">#</a></h2><p>RESP používá celkem 5 způsobů jak zaobalit přenášenou informaci. Vždy však platí, že první byte je byte určující o jaký formát se jedná:</p>
<ul>
<li><code>+</code> jednoduchý string</li>
<li><code>-</code> error</li>
<li><code>:</code> integer</li>
<li><code>$</code> bulk string (binary safe)</li>
<li><code>*</code> array</li>
</ul>
<p>Následuje samotný obsah, nebo dodatečné informace, například o délce a vše je ukončeno pomocí CRLF (<code>\\\\r\\\\n</code>). Postupně tedy přenášené informace moho vypadat například takto:</p>
<ul>
<li><code>+PONG\\\\r\\\\n</code></li>
<li><code>-Error 123\\\\r\\\\n</code></li>
<li><code>:54986\\\\r\\\\n</code></li>
<li><code>$4\\\\r\\\\nPING\\\\r\\\\n</code> (první část určuje délku bulk stringu, NULL je pak <code>$-1\\\\r\\\\n</code>)</li>
<li><code>*2\\\\r\\\\n$3\\\\r\\\\nGET\\\\r\\\\n$3\\\\r\\\\nkey\\\\r\\\\n</code> (první je délka pole, následuje kombinace předchozích)</li>
</ul>
<p>To je celé, žádná věda v tom není. Je to skutečně jednoduchý protokol a to je super, protože se s ním dá snadno pracovat. Navíc lze poslat celý dlouhý text obsahující více příkazů v jednom spojení.</p>
<h2 id=\\"implementace-v-node-js\\">Implementace v Node.js <a href=\\"#implementace-v-node-js\\">#</a></h2><p>V Node.js by teď měla být realizace velmi jednoduchá. Napíšeme si krátký TCP client, který se nám napojí na Redis databázi (většinou port 6379) a budeme posílat/přijímat data:</p>
<pre><code class=\\"hljs lang-javascript\\"><span class=\\"hljs-keyword\\">var</span> net = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">'net'</span>);

<span class=\\"hljs-keyword\\">var</span> client = net.connect({<span class=\\"hljs-attr\\">port</span>: <span class=\\"hljs-number\\">6379</span>}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{
    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">'Connected to the Redis server.'</span>);

    client.write(<span class=\\"hljs-string\\">'*1\\\\r\\\\n$4\\\\r\\\\nPING\\\\r\\\\n'</span>);
    client.write(<span class=\\"hljs-string\\">'*3\\\\r\\\\n$3\\\\r\\\\nSET\\\\r\\\\n$3\\\\r\\\\nkey\\\\r\\\\n$5\\\\r\\\\nxxxxx\\\\r\\\\n'</span>);
    client.write(<span class=\\"hljs-string\\">'*2\\\\r\\\\n$3\\\\r\\\\nGET\\\\r\\\\n$3\\\\r\\\\nkey\\\\r\\\\n'</span>);
    client.write(<span class=\\"hljs-string\\">'*5\\\\r\\\\n$5\\\\r\\\\nPFADD\\\\r\\\\n$11\\\\r\\\\nHyperLogLog\\\\r\\\\n$3\\\\r\\\\nxxx\\\\r\\\\n$3\\\\r\\\\nyyy\\\\r\\\\n$3\\\\r\\\\nzzz\\\\r\\\\n'</span>);
    client.write(<span class=\\"hljs-string\\">'*2\\\\r\\\\n$7\\\\r\\\\nPFCOUNT\\\\r\\\\n$11\\\\r\\\\nHyperLogLog\\\\r\\\\n'</span>);

    client.write(<span class=\\"hljs-string\\">'*1\\\\r\\\\n$7\\\\r\\\\nFLUSHDB\\\\r\\\\n'</span>);
});

client.on(<span class=\\"hljs-string\\">'data'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">data</span>) </span>{
    <span class=\\"hljs-built_in\\">console</span>.log(data.toString());
    client.end();
});

client.on(<span class=\\"hljs-string\\">'end'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{
    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">'Disconnected from the Redis server.'</span>);
});
</code></pre>
<p>Proč jsou udesílaná data zabalena v RESP poli? Vychází to z toho, že podle dokumentace, by klient měl posílat na server pole bulk stringů. Nicméně dobře funkční a validní zápis je i bez pole (<code>client.write(&#39;GET key\\\\r\\\\n&#39;);</code>) jen musí být opět ukončen pomocí CRLF.</p>
<p>Odesíláme do Redis databáze celkem 6 příkazů. První je obyčejný <code>PING</code>, následuje <code>SET</code> a <code>GET</code> klíče, <code>PFADD</code> a <code>PFCOUNT</code> z HyperLogLog datového dypu a nakonec jen smazání databáze. Co bude výstupem?</p>
<pre><code class=\\"hljs\\">+PONG
+OK
$5
xxxxx
:0
:3
+OK
</code></pre><p>Jak je možné, že server vrátil 7 odpovědí? Je to prosté, upravíme si datový callback ať je zřejmé, co skutečně dostáváme za data:</p>
<pre><code class=\\"hljs lang-javascript\\">client.on(<span class=\\"hljs-string\\">'data'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">data</span>) </span>{
    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-built_in\\">JSON</span>.stringify(data.toString()));
    client.end();
});
</code></pre>
<p>Teď už bude výstup o něco jiný:</p>
<pre><code class=\\"hljs\\">&quot;+PONG\\\\r\\\\n+OK\\\\r\\\\n$5\\\\r\\\\nxxxxx\\\\r\\\\n:0\\\\r\\\\n:3\\\\r\\\\n+OK\\\\r\\\\n&quot;
</code></pre><p>A vše již dává smysl. První odpověď je <code>PONG</code> (na <code>PING</code>), následuje reakce <code>OK</code> na nastavení klíče, odpověď ve formě bulk stringu, který má dvě části - délku a samotnou textovou odpověď (proto to odřádkování navíc), následuje odpověď z <code>PFADD</code> (0 nebo 1 podle situace) a také odpověď z <code>PFCOUNT</code> (mohutnost množiny v HyperLogLog). Poslední <code>OK</code> je reakce na <code>FLUSHDB</code>. Jak je vidět, tak i v odpovědi je prvním znakem formát dat dané odpovědi.</p>
<p>Takto jsem to celkem zbytečně (ale pro přehlednost) rozepisoval. Celá komunikace směrem k serveru by se dala napsat do jednoho požadavku:</p>
<pre><code class=\\"hljs\\">*1\\\\r\\\\n$4\\\\r\\\\nPING\\\\r\\\\n*3\\\\r\\\\n$3\\\\r\\\\nSET\\\\r\\\\n$3\\\\r\\\\nkey\\\\r\\\\n$5\\\\r\\\\nxxxxx\\\\r\\\\n*2\\\\r\\\\n$3\\\\r\\\\nGET\\\\r\\\\n$3\\\\r\\\\nkey\\\\r\\\\n*5\\\\r\\\\n$5\\\\r\\\\nPFADD\\\\r\\\\n$11\\\\r\\\\nHyperLogLog\\\\r\\\\n$3\\\\r\\\\nxxx\\\\r\\\\n$3\\\\r\\\\nyyy\\\\r\\\\n$3\\\\r\\\\nzzz\\\\r\\\\n*2\\\\r\\\\n$7\\\\r\\\\nPFCOUNT\\\\r\\\\n$11\\\\r\\\\nHyperLogLog\\\\r\\\\n*1\\\\r\\\\n$7\\\\r\\\\nFLUSHDB\\\\r\\\\n
</code></pre><p>Odpověď by zůstala stejná.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3168189516"
        >
          <a
            className="jsx-3168189516 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fresp-protokol-primy-pristup-k-redis-databazi%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3168189516"
      >
        <a
          className="jsx-3168189516"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
