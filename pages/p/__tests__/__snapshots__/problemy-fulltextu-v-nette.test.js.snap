// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-764030434"
    >
      Problémy fulltextu v Nette
    </h1>
    <div
      className="jsx-764030434 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Nedávno jsem psal o tom, jak využívat fulltext indexy na InnoDB tabulkách (<a href=\\"http://zlml.cz/using-fulltext-searching-with-innodb\\">http://zlml.cz/using-fulltext-searching-with-innodb</a>).
Není to nic převratného, ale každý den se to také nedělá. Zmínil jsem také, jak vyhledávat, což
bylo řešení <a href=\\"http://php.vrana.cz/fulltextove-vyhledavani-v-mysql.php\\">Jakuba Vrány .{target:_blank}</a>.</p>
<p>V diskusi pod článkem zmíňka o tom, jak ošetřit případ, kdy databáze nevrací výsledky pro slova,
která jsou kratší než je hodnota <strong>ft_min_word_len</strong>. Implementace pro Nette nebude nijak zvlášť
rozdílná, avšak i zde existuje minimálně jedna zrádnost.</p>
<h2 id=\\"nette-ty-jedna-zr-dn-bestie-\\">Nette, ty jedna zrádná bestie... <a href=\\"#nette-ty-jedna-zr-dn-bestie-\\">#</a></h2><p>Pro dotazování využívám databázovou vrstvu \\\\Nette\\\\Database, což je rozšíření (nadstavba) pro PDO.
S oblibou také využívám fluid zápis a spoléhám na automatické ošetření vstupů. A zde je právě kámen úrazu.
Nette je místy až příliš důkladné (což je dobře), ale v tomto případě to znemožňuje korektní
použití <strong>REGEXP</strong>.</p>
<p>Běžný kód pro fultextové dotazování může vypadat takto:</p>
<pre><code class=\\"hljs lang-php\\"><span class=\\"hljs-comment\\">/** <span class=\\"hljs-doctag\\">@var</span> Nette\\\\Database\\\\SelectionFactory <span class=\\"hljs-doctag\\">@inject</span> */</span>
<span class=\\"hljs-keyword\\">public</span> $sf;

<span class=\\"hljs-keyword\\">$this</span>-&gt;sf-&gt;table(<span class=\\"hljs-string\\">'mirror_posts'</span>)
    -&gt;where(<span class=\\"hljs-string\\">\\"MATCH(title, body) AGAINST (? IN BOOLEAN MODE)\\"</span>, $search)
    -&gt;order(<span class=\\"hljs-string\\">\\"5 * MATCH(title) AGAINST (?) + MATCH(body) AGAINST (?) DESC\\"</span>, $search, $search)
    -&gt;limit(<span class=\\"hljs-number\\">50</span>);
</code></pre>
<p>Což vygeneruje přibližně přesně následující:</p>
<pre><code class=\\"hljs lang-sql\\"><span class=\\"hljs-keyword\\">SELECT</span> <span class=\\"hljs-string\\">\`id\`</span>, <span class=\\"hljs-string\\">\`title\`</span>, <span class=\\"hljs-string\\">\`body\`</span> 
<span class=\\"hljs-keyword\\">FROM</span> <span class=\\"hljs-string\\">\`mirror_posts\`</span> 
<span class=\\"hljs-keyword\\">WHERE</span> (<span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>, <span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span> <span class=\\"hljs-keyword\\">IN</span> <span class=\\"hljs-built_in\\">BOOLEAN</span> <span class=\\"hljs-keyword\\">MODE</span>)) 
<span class=\\"hljs-keyword\\">ORDER</span> <span class=\\"hljs-keyword\\">BY</span> <span class=\\"hljs-number\\">5</span> * <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) + <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) <span class=\\"hljs-keyword\\">DESC</span> 
<span class=\\"hljs-keyword\\">LIMIT</span> <span class=\\"hljs-number\\">50</span>
</code></pre>
<p>Bohužel tento dotaz nevrátí nic. Je to právě kvůli hodnotě <strong>ft_min_word_len</strong>, kterou mám nastavenou
na 4. Takže můžu změnit tuto hodnotu, a nebo pro všechny slova, která jsou kratší než 4 znaky
poskládám složitější dotaz:</p>
<pre><code class=\\"hljs lang-php\\">$where = <span class=\\"hljs-string\\">\\"\\"</span>;
<span class=\\"hljs-comment\\">//$ft_min_word_len = mysql_result(mysql_query(\\"SHOW VARIABLES LIKE 'ft_min_word_len'\\"), 0, 1);</span>
$ft_min_word_len = <span class=\\"hljs-number\\">4</span>;
preg_match_all(<span class=\\"hljs-string\\">\\"~[\\\\\\\\pL\\\\\\\\pN_]+('[\\\\\\\\pL\\\\\\\\pN_]+)*~u\\"</span>, stripslashes($search), $matches);
<span class=\\"hljs-keyword\\">foreach</span> ($matches[<span class=\\"hljs-number\\">0</span>] <span class=\\"hljs-keyword\\">as</span> $part) {
    <span class=\\"hljs-keyword\\">if</span> (iconv_strlen($part, <span class=\\"hljs-string\\">\\"utf-8\\"</span>) &lt; $ft_min_word_len) {
        $regexp = <span class=\\"hljs-string\\">\\"REGEXP '[[:&lt;:]]\\"</span> . addslashes($part) . <span class=\\"hljs-string\\">\\"[[:&gt;:]]'\\"</span>;
        $where .= <span class=\\"hljs-string\\">\\" OR (title $regexp OR body $regexp)\\"</span>;
    }
}
</code></pre>
<p>A doplníme fluidní dotaz:</p>
<pre><code class=\\"hljs lang-php\\">...
-&gt;where(<span class=\\"hljs-string\\">\\"MATCH(title, body) AGAINST (? IN BOOLEAN MODE)$where\\"</span>, $search) <span class=\\"hljs-comment\\">//přidáno $where</span>
...
</code></pre>
<p>Nyní budu vyhledávat stejný výraz a to automaticky poskládaným dotazem:</p>
<pre><code class=\\"hljs lang-sql\\"><span class=\\"hljs-keyword\\">SELECT</span> <span class=\\"hljs-string\\">\`id\`</span> 
<span class=\\"hljs-keyword\\">FROM</span> <span class=\\"hljs-string\\">\`mirror_posts\`</span> 
<span class=\\"hljs-keyword\\">WHERE</span> (<span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>, <span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span> <span class=\\"hljs-keyword\\">IN</span> <span class=\\"hljs-built_in\\">BOOLEAN</span> <span class=\\"hljs-keyword\\">MODE</span>) <span class=\\"hljs-keyword\\">OR</span> (<span class=\\"hljs-string\\">\`title\`</span> REGEXP <span class=\\"hljs-string\\">'[[:&lt;:]]\`api\`[[:&gt;:]]'</span> <span class=\\"hljs-keyword\\">OR</span> <span class=\\"hljs-string\\">\`body\`</span> REGEXP <span class=\\"hljs-string\\">'[[:&lt;:]]\`api\`[[:&gt;:]]'</span>)) 
<span class=\\"hljs-keyword\\">ORDER</span> <span class=\\"hljs-keyword\\">BY</span> <span class=\\"hljs-number\\">5</span> * <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) + <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) <span class=\\"hljs-keyword\\">DESC</span> 
<span class=\\"hljs-keyword\\">LIMIT</span> <span class=\\"hljs-number\\">50</span>
</code></pre>
<p>Bohužel, ani tento dotaz nevrátí strávný výsledek, ačkoliv se tváří, že by měl.
Důvodem jsou zpětné uvozovky v regulárním výrazu <strong>&#39;&#39;[[:&lt;:]]<code>api</code>[[:&gt;:]]&#39;&#39;</strong>.</p>
<p>Řešení je zřejmě několik. Například poskládat si tento dotaz sám. Ovšem to není ta nejbezpečnější cesta.
Escapování je zrádné a zrovna vyhledávání je jedna z nejvíce používaných věcí, kdy se uživatel
přímo ptá databáze. Existuje však vyčůranější způsob.</p>
<p>Co jsem tak vypozoroval, tak Nette se sice o escapování snaží, ale neescapuje výraz zapsaný pomocí
<em>strtoupper()</em>. Tzn. že stačí změnit tvorbu výrazu:</p>
<pre><code class=\\"hljs lang-php\\">$regexp = <span class=\\"hljs-string\\">\\"REGEXP '[[:&lt;:]]\\"</span> . addslashes(strtoupper($part)) . <span class=\\"hljs-string\\">\\"[[:&gt;:]]'\\"</span>;
</code></pre>
<p>A dotaz se následně poskládá strávně:</p>
<pre><code class=\\"hljs lang-sql\\"><span class=\\"hljs-keyword\\">SELECT</span> <span class=\\"hljs-string\\">\`id\`</span>, <span class=\\"hljs-string\\">\`title\`</span>, <span class=\\"hljs-string\\">\`body\`</span> 
<span class=\\"hljs-keyword\\">FROM</span> <span class=\\"hljs-string\\">\`mirror_posts\`</span> 
<span class=\\"hljs-keyword\\">WHERE</span> (<span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>, <span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span> <span class=\\"hljs-keyword\\">IN</span> <span class=\\"hljs-built_in\\">BOOLEAN</span> <span class=\\"hljs-keyword\\">MODE</span>) <span class=\\"hljs-keyword\\">OR</span> (<span class=\\"hljs-string\\">\`title\`</span> REGEXP <span class=\\"hljs-string\\">'[[:&lt;:]]API[[:&gt;:]]'</span> <span class=\\"hljs-keyword\\">OR</span> <span class=\\"hljs-string\\">\`body\`</span> REGEXP <span class=\\"hljs-string\\">'[[:&lt;:]]API[[:&gt;:]]'</span>)) 
<span class=\\"hljs-keyword\\">ORDER</span> <span class=\\"hljs-keyword\\">BY</span> <span class=\\"hljs-number\\">5</span> * <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`title\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) + <span class=\\"hljs-keyword\\">MATCH</span>(<span class=\\"hljs-string\\">\`body\`</span>) AGAINST (<span class=\\"hljs-string\\">'api'</span>) <span class=\\"hljs-keyword\\">DESC</span> 
<span class=\\"hljs-keyword\\">LIMIT</span> <span class=\\"hljs-number\\">50</span>
</code></pre>
<p>To že je část výrazu jiná než ve skutečnosti nevadí. Nevím jestli je case-insensitive chování
vlastnost REGEXP, ale tabulkou s postfixem <strong>_ci</strong> se také nic nezkazí.</p>
<p>Jen mě tak napadá, proč se to chová tak zvláštně. Uspokojuji se tím, že zpětná uvozovka
není úplně součástí escapování, takže se není čeho bát (a první regulár v PHP také nepustí vše),
ale je to divné.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fproblemy-fulltextu-v-nette%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
