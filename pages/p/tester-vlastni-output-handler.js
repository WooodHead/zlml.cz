// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1478454487000,
    "title": "Tester: vlastní Output Handler",
    "slug": "tester-vlastni-output-handler"
  },
  "body": "<p>Output Handler umožňuje změnit finální podobu výstupu z Nette Testeru. Výstup může <a href=\"https://travis-ci.org/adeira/connector/jobs/173698139\">vypadat například takto</a>. Osobně se mi tento výstup líbí víc, protože místo teček rovnou vidím co se skutečně spouští. Může se to hodit a sám jsem se přistil, že občas spouštím testy takto:</p>\n<pre><code>vendor/bin/run-tests -o tap\n</code></pre><p>A to jen proto, abych viděl co se zrovna testuje (TAP). Napsat si vlastní výstupní handler je jednoduché. Jen je třeba dávat pozor na to, co je <a href=\"https://tester.nette.org/#toc-setup-path\">napsáno v dokumentaci</a>, protože to <a href=\"https://github.com/nette/web-content/pull/473\">nemusí být dobře</a>... :)</p>\n<p>Stačí Tester spouštět s přepínačem <code>--setup</code>:</p>\n<pre><code>vendor/bin/tester --setup tests/runner-setup.php\n\n# or Testbench edition:\nvendor/bin/run-tests --setup tests/runner-setup.php\n</code></pre><p>Skript <code>runner-setup.php</code> potom obsahuje samotný handler který může vypadat třeba takto (PHP 7):</p>\n<pre><code class=\"lang-php\">&lt;?php declare(strict_types = 1);\n\nuse Tester\\Dumper;\nuse Tester\\Runner\\Runner;\n\n/** @var \\Tester\\Runner\\Runner $runner */\n$runner-&gt;outputHandlers = []; // delete native output handlers\n$runner-&gt;outputHandlers[] = new class ($runner) extends \\Tester\\Runner\\Output\\ConsolePrinter\n{\n\n    public function begin()\n    {\n        ob_start();\n        parent::begin();\n        echo rtrim(ob_get_clean()) . &#39; | &#39; . getenv(&#39;BOOTSTRAP&#39;) . &quot;\n\n&quot;;\n    }\n\n    public function result($testName, $result, $message)\n    {\n        $outputs = [\n            Runner::PASSED =&gt; Dumper::color(&#39;green&#39;, &#39;✔ &#39; . $testName),\n            Runner::SKIPPED =&gt; Dumper::color(&#39;olive&#39;, &#39;s &#39; . $testName) . &quot;($message)&quot;,\n            Runner::FAILED =&gt; Dumper::color(&#39;red&#39;, &#39;✖ &#39; . $testName) . &quot;\n&quot; . $this-&gt;indent($message, 3) . &quot;\n&quot;,\n        ];\n        echo $this-&gt;indent($outputs[$result], 2) . PHP_EOL;\n    }\n\n    public function end()\n    {\n        ob_start();\n        parent::end();\n        echo &quot;\n&quot; . trim(ob_get_clean()) . &quot;\n&quot;;\n    }\n\n    private function indent($message, $spaces)\n    {\n        if ($message) {\n            $result = &#39;&#39;;\n            foreach (explode(PHP_EOL, $message) as $line) {\n                $result .= str_repeat(&#39; &#39;, $spaces) . $line . PHP_EOL;\n            }\n            return rtrim($result, PHP_EOL);\n        }\n        return $message;\n    }\n\n};\n</code></pre>\n<p>Je to vlastně jen o třech metodách. Začátek <code>begin</code> a konec <code>end</code> slouží jen k ořezání mezer popř. k doplnění dodatečných informací. Nejzajímavější je metoda <code>result</code>, která velmi mění způsob vykreslení jednotlivých řádek. Bohužel Tester sám od sebe ořezává výstupní texty a podle toho jak jsem to rychle prohlížel, tak s tím nejde nic moc udělat. Představoval bych si, že výstupní texty budou trošku lepší, ale to bez PR do <code>Nette\\Testr</code>u asi nepůjde...</p>\n<p>To by bylo. Pozornější čtenáři kódu mohou mít teď otázku co je to <code>getenv(&#39;BOOTSTRAP&#39;)</code>? Dlouze jsem řešil jak psát testy s ohledem na to, že se mi nechce pořád dělat require <code>bootstrap.php</code>, protože mám testy hodně zanořené a cesty k tomutou souboru bývají hodně dlouhé. Navíc je to nesmírně limitující, protože nelze jednoduše bez úpravy testů měnit adresářovou strukturu. Řešením je trošku to obejít:</p>\n<pre><code class=\"lang-php\">require getenv(&#39;BOOTSTRAP&#39;);\n</code></pre>\n<p>Existuje <a href=\"https://github.com/nette/tester/issues/275\">více řešení</a>, ale toto mi sedělo nejlépe. Užitečné je pak napsat si vlastní skript <code>tests/run</code> a všechno to spojit:</p>\n<pre><code class=\"lang-bash\">#!/usr/bin/env bash\n\nBOOTSTRAP=$(pwd)/tests/bootstrap.php vendor/bin/run-tests --setup tests/runner-setup.php\n</code></pre>\n<p>Spuštění je tak jednoduché, jako je jednoduché napsat <code>tests/run</code>. Pokud by si to chtěl někdo prohlédnout více detailně a popř. si s tím pohrát, tak je vše zde popisované implementováno v projektu <a href=\"https://github.com/adeira/connector\">Adeira\\Connector na GitHubu</a>.</p>\n<p>:)</p>\n"
});
