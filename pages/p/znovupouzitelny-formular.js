// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "id": "34ecd347-57b2-4e4f-9a99-b77edbec7df1",
    "timestamp": 1399974862000,
    "title": "Znovupoužitelný formulář",
    "slug": "znovupouzitelny-formular"
  },
  "body": "<p>Každý kdo nějakou chvíli pracuje s Nette Frameworkem již jistě narazil na prvky, které lze použít v aplikaci opakovaně. Říkejme jim znovupoužitelné komponenty, nebo prostě jen komponenty. Následující text má za úkol ukázat opět maximálně prakticky a uceleně jedno z možných řešení jak k tomuto problému přistupovat a co se mi na tomto řešení líbí, nebo naopak nelíbí.</p>\n<h2 id=\"motivace\">Motivace <a href=\"#motivace\">#</a></h2><p>Proč vůbec přemýšlet o komponentách? Na tuto věc má pravděpodobně dost lidí zcela jiný názor. Pro mě je havní motivací to, že si vyčistím presentery. Chci toho mít v presenterech skutečně tak akorát. Vždyť podle MVP struktury bych v presenterech neměl mít nic složitého. A pak je zde ta znovupoužitelnost. Co když se rozhodnu, že potřebuji použít stejný formulář na více místech? Přece ho nebudu kopírovat. A že takový požadavek je sice často někdo zmíní, ale prakticky není moc reálný? Ale kdepak. Zrovna nedávno jsem vytvářel mnoho stránek a na každé jsem chtěl mít právě kontaktní formulář. To je požadavek na komponentu jako dělaný...</p>\n<h2 id=\"presenter\">Presenter <a href=\"#presenter\">#</a></h2><p>Vždy když programuji něco takového, tak se nedívám na to, jak je to správně z hlediska OOP a bůh ví čeho všeho ještě. Pro mě je v současné chvíli klíčové to, jak se dané řešení bude používat. Přesenter by tedy mohl vypadat třeba takto:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nclass AdminPresenter extends BasePresenter {\n\n    /** @var \\ActualityFactory @inject */\n    public $actualityFactory;\n\n    private $id;\n\n    public function actionAktualita($id = NULL) {\n        $this-&gt;id = $id;\n    }\n\n    protected function createComponentForm() {\n        $control = $this-&gt;actualityFactory-&gt;create($this-&gt;id);\n        $control[&#39;form&#39;]-&gt;onSuccess[] = function () {\n            $this-&gt;redirect(&#39;default&#39;);\n        };\n        return $control;\n    }\n\n}\n</code></pre>\n<p>Mám tedy presenter, který je například pro administraci a jednu podstránku, která bude sloužit jak pro editaci aktuality, tak i pro přidání nové aktuality. Proto je parametrem <em>action</em> právě <code>id = NULL</code>. Tim totiž říkám, že může přijít jako parametr <em>ID</em> aktuality (v tom případě ji budu chtít upravovat), nebo toto <em>ID</em> nebude předáno a v tom případě bude hodnota <em>NULL</em> a budu s tím později patřičně nakládat.</p>\n<p>V poslední metodě si daný formulář vytvořím. Teoreticky by stačila pouze první řádka. Přidávám však ještě další chování do pole <code>onSuccess[]</code>, protože chci komponentu používat na více místech, ale pokaždé po úspěchu přesměrovat na jinou stránku. Zde je jedna z věcí které se mi nelíbí. A to je právě to volání <code>$control[&#39;form&#39;]-&gt;onSuccess[] = ...</code>. Musím totiž vědět jak je pojmenovaný formulář uvnitř komponenty, což mě ale je skutečnosti vůbec nezajímá. Mnohem raději bych byl třeba za zápis <code>$control-&gt;onSuccess[] = ...</code>. Chápu, že se nemusí použít komponenta pouze na fomulář, ale přesto. <strong>Neznáte někdo lepší řešení?</strong></p>\n<p>A teď přijde záludná otázka. Co je to ta factory a proč jí vlastně používám?</p>\n<h2 id=\"factory\">Factory <a href=\"#factory\">#</a></h2><p>Protože v komponentách velmi často potřebuji nějaké závislosti, musím je tam nějak dostat. K tomu slouží například generované továrničky. Jedná se vlastně pouze o interface:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\ninterface IActualityFactory {\n\n    /** @return \\Cntrl\\Actuality */\n    public function create();\n\n}\n</code></pre>\n<p>Nette se této továrničky chytí a vytvoří zhruba tento kód:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nfinal class SystemContainer_IActualityFactoryImpl_58_IActualityFactory implements IActualityFactory {\n\n    private $container;\n\n    public function __construct(Nette\\DI\\Container $container) {\n        $this-&gt;container = $container;\n    }\n\n    public function create() {\n        $service = new Cntrl\\Actuality;\n        return $service;\n    }\n\n}\n</code></pre>\n<p>Zde je tedy (když bude potřeba) možné vytvořit nějaké závislosti a v metodě <code>create()</code> je komponentě předat. To vše lze udělat automaticky a Nette se o to postará. Dokonce lze předávat i parametry z konfiguračního souboru. Je to nesmírně elegantní řešení. Kdybych továrničky nepoužil, musel bych vytvářet ručně komponentu, to by ale znamenalo, že bych také musel předávat všechny závislosti ručně a jen bych si tím přidělal práci. Zkuste si vytvořit komponentu bez použití factory. Je nesmysl tahat si v presenteru nepotřebné závislosti přes presenter... Jak však předat parametry z presenteru? Netuším, jestli to lze nějak generovanou továrničku naučit, nic nám však nebrání napsat si vlastní factory:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nclass ActualityFactory extends Nette\\Object {\n\n    private $actualities;\n\n    public function __construct(App\\Actualities $actualities) {\n        $this-&gt;actualities = $actualities;\n    }\n\n    public function create($id) {\n        return new \\Cntrl\\Actuality($this-&gt;actualities, $id);\n    }\n\n}\n</code></pre>\n<p>Je jasně vidět, že tato ručně napsaná factory vypadá velmi podobně jako automaticky vygenerovaná, ale navíc teď můžu předat metodě <code>create($id)</code> parametr, což je přesně to co potřebuji viz presenter. Chci si předat číslo aktuality a nevidím důvod proč bych to měl dělat až v komponentě. Komponenta potřebuje <em>ID</em> aktuality, ale kde ho vezme nemusí řešit. Je otázka, jestli bych si už rovnou neměl vytáhnout data z databáze v presenteru. Takto se mi to ale zatím líbí víc...</p>\n<p>Ručně vytvořenou factory musíme ještě zaregistrovat v konfiguračním souboru:</p>\n<pre><code class=\"lang-neon\">services:\n    - ActualityFactory\n</code></pre>\n<p>To je vše. Už jsme pouze krůček od funkčního formuláře.</p>\n<h2 id=\"samotn-komponenta\">Samotná komponenta <a href=\"#samotn-komponenta\">#</a></h2><p>Samotný kód komponenty už není téměř ničím zvláštní, nebo nějak nepochopitelný:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nnamespace Cntrl;\n\nuse App;\nuse Entity;\nuse Nette\\Application\\UI;\nuse Nette;\n\nclass Actuality extends UI\\Control {\n\n    private $actualities;\n    private $actuality;\n\n    public function __construct(App\\Actualities $actualities, $id) {\n        parent::__construct();\n        $this-&gt;actualities = $actualities;\n        $this-&gt;actuality = $this-&gt;actualities-&gt;findOneBy([&#39;id&#39; =&gt; $id]);\n    }\n\n    public function render() {\n        $this-&gt;template-&gt;setFile(__DIR__ . &#39;/Actuality.latte&#39;);\n        $this-&gt;template-&gt;render();\n    }\n\n    protected function createComponentForm() {\n        $form = new UI\\Form;\n        $form-&gt;addText(&#39;headline&#39;, &#39;Titulek:&#39;);\n        $form-&gt;addTextArea(&#39;text&#39;, &#39;Text:&#39;);\n        $form-&gt;addSubmit(&#39;send&#39;, &#39;Uložit&#39;);\n        if($this-&gt;actuality) { //výchozí hodnoty jen pokud aktualita již existuje\n            $form-&gt;setDefaults(array(\n                &#39;headline&#39; =&gt; $this-&gt;actuality-&gt;headline,\n                &#39;text&#39; =&gt; $this-&gt;actuality-&gt;text,\n            ));\n        }\n        $form-&gt;onSuccess[] = $this-&gt;actualityFormSucceeded;\n        return $form;\n    }\n\n    public function actualityFormSucceeded(UI\\Form $form) {\n        $values = $form-&gt;getValues();\n        try {\n            if(!$this-&gt;actuality) { //pokud ještě neexistuje vytvořím novou entitu\n                $this-&gt;actuality = new Entity\\Actuality();\n            }\n            $this-&gt;actuality-&gt;headline = $values-&gt;headline;\n            $this-&gt;actuality-&gt;text = $values-&gt;text;\n            $this-&gt;actuality-&gt;date = new \\DateTime();\n            $this-&gt;actualities-&gt;save($this-&gt;actuality);\n            $this-&gt;presenter-&gt;flashMessage(&#39;Aktualita byla úspěšně uložena.&#39;, &#39;success&#39;);\n        } catch (\\Exception $exc) {\n            $this-&gt;presenter-&gt;flashMessage($exc-&gt;getMessage(), &#39;danger&#39;);\n        }\n        //žádný redirect, až v presenteru!\n    }\n\n}\n</code></pre>\n<p>V konstruktoru jednak získám nějakou modelovou třídu pro práci s databází (o to se krom factory  vůbec nestarám) a také <em>ID</em>, které přišlo z presenteru. A rovnou toto <em>ID</em> použiju k vytáhnutí si dat z databáze, protože konstruktor se spustí vždy a já také vím, že tyto data budu vždy potřebovat. V <code>render()</code> metodě pouze předám šablonu komponenty, která ve své nejprimitivnější podobě může vypada pouze takto:</p>\n<pre><code>{control form}\n</code></pre><p>Ostatně stejný kód mohu použít pro šablonu do které předávám komponentu z presenteru. Výsledkem celého snažení je tedy poměrně jednoduchý přesenter a jedna stránka na které je formulář, který zvládne jak editaci, tak vytváření nového záznamu v databázi.</p>\n<p>Používáte nějaké lepší (jiné) řešení? Podělte se o něj... :-)</p>\n"
});
