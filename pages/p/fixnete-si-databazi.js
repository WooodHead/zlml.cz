// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1432200241000,
    "title": "Fixněte si databázi",
    "slug": "fixnete-si-databazi"
  },
  "body": "<p>Možná to znáte. Již nějaký čas nepoužíváte žádný SQL soubor a strukturu databáze si generujete z entit pomocí Doctrine. Je to super, rychlé a funguje to. Paráda. Jenže málokterá databáze se obejde bez nějakých inicializačních dat. Jenže jak na to?</p>\n<h2 id=\"prvn-p-stup\">První přístup <a href=\"#prvn-p-stup\">#</a></h2><p>Nebudu ho popisovat moc dlouho, protože ukazuje přesně to, co nechci ukázat. Jendoduše si napíšete nějaké to SQL, které pak nahrnete do databáze. Třeba nějak takto:</p>\n<pre><code class=\"hljs lang-sql\"><span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-string\">`options`</span> (<span class=\"hljs-string\">`key`</span>, <span class=\"hljs-string\">`value`</span>)\n<span class=\"hljs-keyword\">VALUES</span>\n(<span class=\"hljs-string\">'option1'</span>, <span class=\"hljs-string\">'value1'</span>),\n(<span class=\"hljs-string\">'option2'</span>, <span class=\"hljs-string\">'value2'</span>),\n(<span class=\"hljs-string\">'option3'</span>, <span class=\"hljs-string\">'value3'</span>);\n</code></pre>\n<p>To jak si to pošlete do databáze je celkem jedno. Jestli ručně, nebo přes PHP. Pořád někde zůstává SQL. Proč mi to vadí? Tak třeba zde na blogu je nějaká instalace. A protože jsem se ještě nedokopal k tomu to přepsat, tak musím mít tyto soubory dva. Jeden pro MySQL a druhý pro PosgreSQL. <em>(Jo správně, blog jde nainstalovat na více databází...)</em> A to je voser.</p>\n<p>Ale jsou i projekty, kde jsem to udělal rovnou pořádně (i když jsou jen na jedné databázi).</p>\n<h2 id=\"lep-p-stup-pomoc-fixtures\">Lepší přístup pomocí fixtures <a href=\"#lep-p-stup-pomoc-fixtures\">#</a></h2><p>Znáte <a href=\"https://github.com/doctrine/data-fixtures\">Doctrine Data Fixtures Extension</a>? Neznáte? Tak to doporučuji, protože vám pomohou vyřešit přesně tento problém. Lépe tuto knihovnu poznáte pomocí composeru:</p>\n<pre><code class=\"hljs\">composer require doctrine/data-fixtures\n</code></pre><p>Samozřejmě je takový nepsaný předpoklad, že používáte Doctrine... :) Co dál? Ještě než se pustím do dalšího vysvětlování, bylo by fajn napsat si nějaký command. Na takový command objekt se nejlépe hodí moje oblíbená knihovna <a href=\"https://github.com/Kdyby/Console\">Kdyby/Console</a>, která integruje <a href=\"http://symfony.com/doc/current/components/console/introduction.html\">command ze Symfony</a>. Už jsem o tom psal něco málo <a href=\"kdyby-console\">dříve</a>. A díky této přehršli odkazů již víte jak na to a můžeme rovnou nějaký psát. A protože jsem líný programátor, tak se podívám jak to vyřešil <a href=\"https://github.com/doctrine/DoctrineFixturesBundle/blob/master/Command/LoadDataFixturesDoctrineCommand.php\">někdo jiný</a>. A trošku si to zjedoduším:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">DataFixtures</span>\\<span class=\"hljs-title\">Executor</span>\\<span class=\"hljs-title\">ORMExecutor</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">DataFixtures</span>\\<span class=\"hljs-title\">Loader</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">DataFixtures</span>\\<span class=\"hljs-title\">Purger</span>\\<span class=\"hljs-title\">ORMPurger</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Kdyby</span>\\<span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">EntityManager</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Symfony</span>\\<span class=\"hljs-title\">Component</span>\\<span class=\"hljs-title\">Console</span>\\<span class=\"hljs-title\">Command</span>\\<span class=\"hljs-title\">Command</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Symfony</span>\\<span class=\"hljs-title\">Component</span>\\<span class=\"hljs-title\">Console</span>\\<span class=\"hljs-title\">Input</span>\\<span class=\"hljs-title\">InputInterface</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Symfony</span>\\<span class=\"hljs-title\">Component</span>\\<span class=\"hljs-title\">Console</span>\\<span class=\"hljs-title\">Output</span>\\<span class=\"hljs-title\">OutputInterface</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultData</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Command</span>\n</span>{\n\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@var</span> EntityManager <span class=\"hljs-doctag\">@inject</span> */</span>\n    <span class=\"hljs-keyword\">public</span> $em;\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">()</span>\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>\n            -&gt;setName(<span class=\"hljs-string\">'orm:demo-data:load'</span>)\n            -&gt;setDescription(<span class=\"hljs-string\">'Load data fixtures to your database.'</span>);\n            <span class=\"hljs-comment\">//-&gt;addOption...</span>\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(InputInterface $input, OutputInterface $output)</span>\n    </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            $loader = <span class=\"hljs-keyword\">new</span> Loader();\n            $loader-&gt;loadFromDirectory(<span class=\"hljs-keyword\">__DIR__</span> . <span class=\"hljs-string\">'/../basic'</span>);\n            $fixtures = $loader-&gt;getFixtures();\n\n            $purger = <span class=\"hljs-keyword\">new</span> ORMPurger(<span class=\"hljs-keyword\">$this</span>-&gt;em);\n\n            $executor = <span class=\"hljs-keyword\">new</span> ORMExecutor(<span class=\"hljs-keyword\">$this</span>-&gt;em, $purger);\n            $executor-&gt;setLogger(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($message)</span> <span class=\"hljs-title\">use</span> <span class=\"hljs-params\">($output)</span> </span>{\n                $output-&gt;writeln(sprintf(<span class=\"hljs-string\">'  &lt;comment&gt;&gt;&lt;/comment&gt; &lt;info&gt;%s&lt;/info&gt;'</span>, $message));\n            });\n            $executor-&gt;execute($fixtures);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// zero return code means everything is ok</span>\n        } <span class=\"hljs-keyword\">catch</span> (\\<span class=\"hljs-keyword\">Exception</span> $exc) {\n            $output-&gt;writeLn(<span class=\"hljs-string\">\"&lt;error&gt;{$exc-&gt;getMessage()}&lt;/error&gt;\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// non-zero return code means error</span>\n        }\n    }\n}\n</code></pre>\n<p>Ok, to jsem to možná ořezal více než je třeba. Mrkněte na tu ukázku pro Symfony, bude to velmi podobné. A teď už konečně k samotným fixture objektům. To jsou ty co načítám ze složky basic pomocí <code>loadFromDirectory</code>. Jedná o objekty, které implementují interface <code>FixtureInterface</code>, nebo možná lépe dědí od abstraktní třídy <code>AbstractFixture</code>. Obojí je v <code>Doctrine\\Common\\DataFixtures</code> namespace. Objekt obsahující defaultní uživatele může vypadat takto:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">Persistence</span>\\<span class=\"hljs-title\">ObjectManager</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Security</span>\\<span class=\"hljs-title\">Passwords</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UsersFixture</span> <span class=\"hljs-keyword\">extends</span> \\<span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">DataFixtures</span>\\<span class=\"hljs-title\">AbstractFixture</span>\n</span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span><span class=\"hljs-params\">(ObjectManager $manager)</span>\n    </span>{\n        $admin = <span class=\"hljs-keyword\">new</span> \\Users\\User(<span class=\"hljs-string\">'admin@nette.org'</span>);\n        $admin-&gt;setPassword(Passwords::hash(<span class=\"hljs-string\">'admin'</span>));\n        $admin-&gt;addRole(<span class=\"hljs-keyword\">$this</span>-&gt;getReference(<span class=\"hljs-string\">'admin-role'</span>));\n        $manager-&gt;persist($admin);\n\n        $demo = <span class=\"hljs-keyword\">new</span> \\Users\\User(<span class=\"hljs-string\">'demo@nette.org'</span>);\n        $demo-&gt;setPassword(Passwords::hash(<span class=\"hljs-string\">'demo'</span>));\n        $demo-&gt;addRole(<span class=\"hljs-keyword\">$this</span>-&gt;getReference(<span class=\"hljs-string\">'demo-role'</span>));\n        $manager-&gt;persist($demo);\n\n        $manager-&gt;flush();\n\n        <span class=\"hljs-keyword\">$this</span>-&gt;addReference(<span class=\"hljs-string\">'admin-user'</span>, $admin);\n        <span class=\"hljs-keyword\">$this</span>-&gt;addReference(<span class=\"hljs-string\">'demo-user'</span>, $demo);\n    }\n\n}\n</code></pre>\n<p>V čem je to tak parádní? Používám PHP kód, používám vlastní nadefinované entity. Hned vidím, že mi to fugnuje, ověřuji svůj návrh databáze a rovnou poskytuji dalším ukázku toho, jak jsem to myslel. Za povšimnutí stojí funkce <code>addReference</code> a <code>getReference</code>. Je jasné, že v každé relační databázi budou nějaké relace a právě k tomu tyto funkce slouží. Vytvořím si tedy nějaké ukazatele a ty pak mohu použít v jiné části demo dat. Lépe to  bude vidět na druhé tabulce:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">Persistence</span>\\<span class=\"hljs-title\">ObjectManager</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RolesFixture</span> <span class=\"hljs-keyword\">extends</span> \\<span class=\"hljs-title\">Doctrine</span>\\<span class=\"hljs-title\">Common</span>\\<span class=\"hljs-title\">DataFixtures</span>\\<span class=\"hljs-title\">AbstractFixture</span>\n</span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span><span class=\"hljs-params\">(ObjectManager $manager)</span>\n    </span>{\n        $user = <span class=\"hljs-keyword\">new</span> \\Users\\Role();\n        $user-&gt;setName(\\Users\\Role::DEMO_USER);\n        $manager-&gt;persist($user);\n\n        $admin = <span class=\"hljs-keyword\">new</span> \\Users\\Role();\n        $admin-&gt;setName(\\Users\\Role::ADMIN);\n        $manager-&gt;persist($admin);\n\n        $manager-&gt;flush();\n\n        <span class=\"hljs-keyword\">$this</span>-&gt;addReference(<span class=\"hljs-string\">'demo-role'</span>, $user);\n        <span class=\"hljs-keyword\">$this</span>-&gt;addReference(<span class=\"hljs-string\">'admin-role'</span>, $admin);\n    }\n\n}\n</code></pre>\n<p>Vidíte? Mám role, vytvořím si na ně odkaz a používám je při definici uživatele. Vyzkoušejte si to. Uvidíte, jak se krásně naplní referenční tabulky a vše bude tak, jak to má být...</p>\n<p>Jen pozor na jedno věc. Ohlídejte si <a href=\"https://github.com/doctrine/data-fixtures#fixture-ordering\">pořadí těchto objektů</a>. To lze vyřešit implementací rozhraní <code>OrderedFixtureInterface</code>, nebo <code>DependentFixtureInterface</code>, což je o něco lepší přístup.</p>\n<p>A jak toto celé použít? Však už to znáte:</p>\n<pre><code class=\"hljs\">λ php index.php\nλ php index.php orm:schema-tool:create\nλ php index.php orm:demo-data:load\n</code></pre><p>První příkaz vám nabídne všechny dostupné příkazy, druhý vygeneruje strukturu databáze bez dat a poslední spustí natažení demo dat. Pak už se jen kocháte:</p>\n<pre><code class=\"hljs\">λ php index.php orm:demo-data:load --demo\nCareful, database will be purged. Do you want to continue Y/N ? y\n  &gt; purging database\n  &gt; loading RolesFixture\n  &gt; loading UsersFixture\n  &gt; loading ArticlesFixture\n  &gt; loading ProductsFixture\n  ...\n</code></pre>"
});
