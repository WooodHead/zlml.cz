// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "id": "3e9279b1-89aa-4813-9beb-7bc9f8044dff",
    "timestamp": 1375043798000,
    "title": "Testování presenterů v Nette",
    "slug": "testovani-presenteru-v-nette"
  },
  "body": "<p>Tak toto je přesně to téma o kterém se naustále mluví, ale tím to z velké části končí.\nNemá smysl zabývat se tím, jestli testovat, nebo ne. Na to už si každý přijde sám.\nV následujících odstavcích bych rád předvedl myšlenku jak si\nušetřit pár řádek kódu při testech (\\Nette\\Tester).</p>\n<h2 id=\"nezbytn-teorie\">Nezbytná teorie <a href=\"#nezbytn-teorie\">#</a></h2><p>Pro testování presenterů je zapotřebí získat továrnu na presentery PresenterFactory\na následně daný presenter vyrobit. Například takto:</p>\n<pre><code class=\"lang-php\">$presenterFactory = $this-&gt;container-&gt;getByType(&#39;Nette\\Application\\IPresenterFactory&#39;);\n$this-&gt;presenter = $presenterFactory-&gt;createPresenter(&#39;Front:Homepage&#39;);\n</code></pre>\n<p>K tomu je zapotřebí \\Nette\\DI\\Container, který získáme například v konstruktoru, nebo\npomocí inject anotace.</p>\n<p>Následně je třeba vytvořit požadavek, ten spustit a testovat výslednou odpověď:</p>\n<pre><code class=\"lang-php\">$request = new \\Nette\\Application\\Request($this-&gt;presName, $method, $params, $post);\n$response = $this-&gt;presenter-&gt;run($request);\n</code></pre>\n<p>Právě nad vrácenou odpovědí lze spustit testovací sadu, která bude testovat, \nzda byla například získána textová odpověď a tedy jestli se jedná o šablonu:</p>\n<pre><code class=\"lang-php\">\\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\TextResponse);\n\\Tester\\Assert::true($response-&gt;getSource() instanceof \\Nette\\Templating\\ITemplate);\n</code></pre>\n<p>Je také vhodné otestovat samotný HTML kód. Již mě to párkrát upozornilo na\nnevalidní kód, což se může stát, pokud se šablona skládá z hodně include částí.\nNevalidní ve smyslu například dvojité HTML ukončovací značky:</p>\n<pre><code class=\"lang-php\">$html = (string)$response-&gt;getSource();\n$dom = \\Tester\\DomQuery::fromHtml($html);\n\\Tester\\Assert::true($dom-&gt;has(&#39;title&#39;));\n</code></pre>\n<h2 id=\"psan-psan-psan-\">Psaní, psaní, psaní... <a href=\"#psan-psan-psan-\">#</a></h2><p>Předchozí teorie je zapotřebí opakovat pro každý presenter. Už jen proto, že je třeba\nvytvořit pokaždé nový požadavek. Nicméně je jasné, že to po otestování FrontModule\nzačne být lehce kopírovací nuda.</p>\n<p>Je tedy vhodné vytvořit si třídu, která ušetří spoustu řádek.\nMůj první návrh vypadá přibližně takto:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nnamespace Test;\n\nclass Presenter extends \\Nette\\Object {\n\n        private $container;\n        private $presenter;\n        private $presName;\n\n        public function __construct(\\Nette\\DI\\Container $container) {\n                $this-&gt;container = $container;\n        }\n\n        /**\n         * @param $presName string Fully qualified presenter name.\n         */\n        public function init($presName) {\n                $presenterFactory = $this-&gt;container-&gt;getByType(&#39;Nette\\Application\\IPresenterFactory&#39;);\n                $this-&gt;presenter = $presenterFactory-&gt;createPresenter($presName);\n                $this-&gt;presenter-&gt;autoCanonicalize = FALSE;\n                $this-&gt;presName = $presName;\n        }\n\n        public function test($action, $method = &#39;GET&#39;, $params = array(), $post = array()) {\n                $params[&#39;action&#39;] = $action;\n                $request = new \\Nette\\Application\\Request($this-&gt;presName, $method, $params, $post);\n                $response = $this-&gt;presenter-&gt;run($request);\n                return $response;\n        }\n\n        public function testAction($action, $method = &#39;GET&#39;, $params = array(), $post = array()) {\n                $response = $this-&gt;test($action, $method, $params, $post);\n\n                \\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\TextResponse);\n                \\Tester\\Assert::true($response-&gt;getSource() instanceof \\Nette\\Templating\\ITemplate);\n\n                $html = (string)$response-&gt;getSource();\n                $dom = \\Tester\\DomQuery::fromHtml($html);\n                \\Tester\\Assert::true($dom-&gt;has(&#39;title&#39;));\n\n                return $response;\n        }\n\n        public function testForm($action, $method = &#39;POST&#39;, $post = array()) {\n                $response = $this-&gt;test($action, $method, $post);\n\n                \\Tester\\Assert::true($response instanceof \\Nette\\Application\\Responses\\RedirectResponse);\n\n                return $response;\n        }\n\n}\n</code></pre>\n<p>Testování samotných presenterů je pak již otázkou několika málo řádek:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nnamespace Test;\n\n$container = require __DIR__ . &#39;/../bootstrap.php&#39;;\n\nclass HomepagePresenterTest extends \\Tester\\TestCase {\n\n        public function __construct(\\Nette\\DI\\Container $container) {\n                $this-&gt;tester = new \\Test\\Presenter($container);\n        }\n\n        public function setUp() {\n                $this-&gt;tester-&gt;init(&#39;Front:Homepage&#39;);\n        }\n\n        public function testRenderDefault() {\n                $this-&gt;tester-&gt;testAction(&#39;default&#39;);\n        }\n\n}\n\nid(new HomepagePresenterTest($container))-&gt;run();\n</code></pre>\n<p>Takto chápu testování presenterů v Nette já. Dále budu směrovat testy tak, abych nemusel psát téměř nic\na měl jsem otestováno téměř všechno. Myslím si, že toto je jediná cesta jak se přinutit k testování.\nNelze se již vymlouvat na to, že je to spousta psaní navíc. Není.</p>\n"
});
