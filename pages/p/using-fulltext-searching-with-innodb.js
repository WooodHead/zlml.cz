// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1375126671000,
    "title": "Using fulltext searching with InnoDB",
    "slug": "using-fulltext-searching-with-innodb"
  },
  "body": "<p>Sometimes is quite useful to use InnoDB engine. \nUnfortunately InnoDB is good for tables with foreign keys, but useless for fulltext search. \nYou can&#39;t create fulltext index on InnoDB tables, but you can create this index on MyISAM tables. \nUnfortunately you can&#39;t create foreign keys on MyISAM. It&#39;s starting to be quite embarassing. \nLet me show you how to search via fulltext on InnoDB tables.</p>\n<p>In fact it&#39;s not possible to use fulltext index on InnoDB tables, \nbut there is possible workaround. At first you need a classic InnoDB structure. \nFor example database of  blog:</p>\n<pre><code class=\"hljs lang-sql\"><span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">NAMES</span> utf8;\n<span class=\"hljs-keyword\">SET</span> foreign_key_checks = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-keyword\">time_zone</span> = <span class=\"hljs-string\">'SYSTEM'</span>;\n<span class=\"hljs-keyword\">SET</span> sql_mode = <span class=\"hljs-string\">'NO_AUTO_VALUE_ON_ZERO'</span>;\n\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`posts`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`posts`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`title`</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`body`</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`date`</span> datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`release_date`</span> datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`title_3`</span> (<span class=\"hljs-string\">`title`</span>(<span class=\"hljs-number\">200</span>))\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`tags`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`tags`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`color`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`posts_tags`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`posts_tags`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`tag_id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`post_id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`tag_id`</span> (<span class=\"hljs-string\">`tag_id`</span>),\n  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`post_id`</span> (<span class=\"hljs-string\">`post_id`</span>),\n  <span class=\"hljs-keyword\">CONSTRAINT</span> <span class=\"hljs-string\">`posts_tags_ibfk_1`</span> FOREIGN <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`tag_id`</span>) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-string\">`tags`</span> (<span class=\"hljs-string\">`id`</span>),\n  <span class=\"hljs-keyword\">CONSTRAINT</span> <span class=\"hljs-string\">`posts_tags_ibfk_2`</span> FOREIGN <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`post_id`</span>) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-string\">`posts`</span> (<span class=\"hljs-string\">`id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n</code></pre>\n<p>Now we have pretty simple database structure with InnoDB tables with foreign keys. \nIt would be nice to be able search on database table <strong>posts</strong> using fulltext search:</p>\n<pre><code class=\"hljs lang-sql\"><span class=\"hljs-keyword\">SELECT</span> *\n<span class=\"hljs-keyword\">FROM</span> posts\n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">MATCH</span>(title, <span class=\"hljs-keyword\">body</span>) AGAINST (<span class=\"hljs-string\">'something'</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-built_in\">BOOLEAN</span> <span class=\"hljs-keyword\">MODE</span>);\n</code></pre>\n<p>But it is not possible. It returns something like:</p>\n<blockquote>\n<p>  Error in query: The used table type doesn&#39;t support FULLTEXT indexes</p>\n</blockquote>\n<p>Let&#39;s create another one table with triggers and fulltext indexes. \nWe need to create mirror table. For example:</p>\n<pre><code class=\"hljs lang-sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`mirror_posts`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`mirror_posts`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`title`</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`body`</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n  FULLTEXT <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`title_body`</span> (<span class=\"hljs-string\">`title`</span>,<span class=\"hljs-string\">`body`</span>),\n  FULLTEXT <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`title`</span> (<span class=\"hljs-string\">`title`</span>),\n  FULLTEXT <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`body`</span> (<span class=\"hljs-string\">`body`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=MyISAM <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n</code></pre>\n<p>And than we need to create triggers:</p>\n<pre><code class=\"hljs lang-sql\">DELIMITER ;;\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-string\">`insert_posts`</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-string\">`posts`</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> mirror_posts <span class=\"hljs-keyword\">VALUES</span> (NEW.id, NEW.title, NEW.body);;\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-string\">`update_posts`</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-string\">`posts`</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span>\n<span class=\"hljs-keyword\">UPDATE</span> mirror_posts <span class=\"hljs-keyword\">SET</span>\n    <span class=\"hljs-keyword\">id</span> = NEW.id,\n    title = NEW.title,\n    <span class=\"hljs-keyword\">body</span> = NEW.body\n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">id</span> = OLD.id;;\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-string\">`delete_posts`</span> <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-string\">`posts`</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span>\n<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> mirror_posts <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">id</span> = OLD.id;;\n</code></pre>\n<p>It means, that we copy all of events and data from table <strong>posts</strong> to the table <strong>mirror_posts</strong>.\nFinally we can use more complex fulltext search feature:</p>\n<pre><code class=\"hljs lang-sql\"><span class=\"hljs-keyword\">SELECT</span> *\n<span class=\"hljs-keyword\">FROM</span> mirror_posts\n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">MATCH</span>(title, <span class=\"hljs-keyword\">body</span>) AGAINST (<span class=\"hljs-string\">'something'</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-built_in\">BOOLEAN</span> <span class=\"hljs-keyword\">MODE</span>)\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-number\">5</span> * <span class=\"hljs-keyword\">MATCH</span>(title) AGAINST (<span class=\"hljs-string\">'something'</span>) + <span class=\"hljs-keyword\">MATCH</span>(<span class=\"hljs-keyword\">body</span>) AGAINST (<span class=\"hljs-string\">'something'</span>) <span class=\"hljs-keyword\">DESC</span>;\n</code></pre>\n<p>As I said, this is just workaround, not solution. \nSometimes it&#39;s bad practice, because you need copy of indexed columns. \nBut it works. And for small blogs it&#39;s sufficient.</p>\n"
});
