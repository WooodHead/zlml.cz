// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1375087004000,
    "title": "Třída pro připojení k FIO API",
    "slug": "trida-pro-pripojeni-k-fio-api"
  },
  "body": "<p>Další užitečný úryvek, který je škoda nechat ležet v Git repozitářích.\nA opět uzpůsobený pro používání s Nette FW.</p>\n<p>Nedávno jsem psal o tom, jak používat CLI router v Nette (<a href=\"http://zlml.cz/nette-2-1-dev-clirouter\">http://zlml.cz/nette-2-1-dev-clirouter</a>).\nPrávě pomocí tohoto routeru je vhodné kontrolovat bankovní výpisy - například pomocí cronu:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">App</span>\\<span class=\"hljs-title\">CliModule</span>;\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Nette</span>;\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Diagnostics</span>\\<span class=\"hljs-title\">Debugger</span>;\n\n<span class=\"hljs-comment\">/**\n * Class CliPresenter\n * <span class=\"hljs-doctag\">@package</span> App\\CliModule\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CliPresenter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BasePresenter</span> </span>{\n\n        <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@var</span> \\Fio <span class=\"hljs-doctag\">@inject</span> */</span>\n        <span class=\"hljs-keyword\">public</span> $fio;\n        ...\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">actionCron</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">$this</span>-&gt;checkFio(); <span class=\"hljs-comment\">// FIO vs. nezaplacené objednávky</span>\n                ...\n                <span class=\"hljs-keyword\">$this</span>-&gt;terminate();\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Zkontroluje bankovní účet, porovná s databází a zaplacené objednávky změní na status PAID.\n         */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkFio</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">try</span> {\n                        $transactions = <span class=\"hljs-keyword\">$this</span>-&gt;fio-&gt;transactions();\n                        $unpaid = <span class=\"hljs-keyword\">$this</span>-&gt;orders-&gt;selectUnpaidOrders(); <span class=\"hljs-comment\">//získání nezaplacených objednávek</span>\n                        <span class=\"hljs-comment\">//array_intersect() - zde samotné zpracování</span>\n                        ...\n                } <span class=\"hljs-keyword\">catch</span> (\\<span class=\"hljs-keyword\">Exception</span> $exc) {\n                        Debugger::log($exc-&gt;getMessage() . <span class=\"hljs-string\">' FILE: '</span> . $exc-&gt;getFile() . <span class=\"hljs-string\">' on line: '</span> . $exc-&gt;getLine(), Debugger::WARNING);\n                        <span class=\"hljs-keyword\">echo</span> $exc-&gt;getMessage() . EOL;\n                }\n        }\n}\n</code></pre>\n<p>K tomu se hodí právě následující třída:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">/**\n * Class Fio\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Fio</span> <span class=\"hljs-keyword\">extends</span> \\<span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Object</span> </span>{\n\n        <span class=\"hljs-keyword\">private</span> $token;\n        <span class=\"hljs-keyword\">private</span> $rest_url = <span class=\"hljs-string\">'https://www.fio.cz/ib_api/rest/'</span>;\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@param</span> string $token SECURE\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span><span class=\"hljs-params\">($token)</span> </span>{\n                <span class=\"hljs-keyword\">$this</span>-&gt;token = $token;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Pohyby na účtu za určené období.\n         * JSON only!\n         * <span class=\"hljs-doctag\">@param</span> string $from\n         * <span class=\"hljs-doctag\">@param</span> string $to\n         * <span class=\"hljs-doctag\">@return</span> array|mixed\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transactions</span><span class=\"hljs-params\">($from = <span class=\"hljs-string\">'-1 month'</span>, $to = <span class=\"hljs-string\">'now'</span>)</span> </span>{\n                $from = \\Nette\\DateTime::from($from)-&gt;format(<span class=\"hljs-string\">'Y-m-d'</span>);\n                $to = \\Nette\\DateTime::from($to)-&gt;format(<span class=\"hljs-string\">'Y-m-d'</span>);\n                $url = <span class=\"hljs-keyword\">$this</span>-&gt;rest_url . <span class=\"hljs-string\">'periods/'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;token . <span class=\"hljs-string\">'/'</span> . $from . <span class=\"hljs-string\">'/'</span> . $to . <span class=\"hljs-string\">'/transactions.json'</span>;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;parseJSON(<span class=\"hljs-keyword\">$this</span>-&gt;download($url));\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Oficiální výpisy pohybů z účtu.\n         * JSON only!\n         * <span class=\"hljs-doctag\">@param</span> $id\n         * <span class=\"hljs-doctag\">@param</span> null $year\n         * <span class=\"hljs-doctag\">@return</span> array|mixed\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transactionsByID</span><span class=\"hljs-params\">($id, $year = NULL)</span> </span>{\n                <span class=\"hljs-keyword\">if</span> ($year === <span class=\"hljs-keyword\">NULL</span>) {\n                        $year = date(<span class=\"hljs-string\">'Y'</span>);\n                }\n                $url = <span class=\"hljs-keyword\">$this</span>-&gt;rest_url . <span class=\"hljs-string\">'by-id/'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;token . <span class=\"hljs-string\">'/'</span> . $year . <span class=\"hljs-string\">'/'</span> . $id . <span class=\"hljs-string\">'/transactions.json'</span>;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;parseJSON(<span class=\"hljs-keyword\">$this</span>-&gt;download($url));\n        }\n\n        <span class=\"hljs-comment\">/**\n         * Pohyby na účtu od posledního stažení.\n         * JSON only!\n         * <span class=\"hljs-doctag\">@return</span> array|mixed\n         */</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transactionsLast</span><span class=\"hljs-params\">()</span> </span>{\n                $url = <span class=\"hljs-keyword\">$this</span>-&gt;rest_url . <span class=\"hljs-string\">'last/'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;token . <span class=\"hljs-string\">'/transactions.json'</span>;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;parseJSON(<span class=\"hljs-keyword\">$this</span>-&gt;download($url));\n        }\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@param</span> $url\n         * <span class=\"hljs-doctag\">@return</span> mixed\n         * <span class=\"hljs-doctag\">@throws</span> \\Exception\n         */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">download</span><span class=\"hljs-params\">($url)</span> </span>{\n                <span class=\"hljs-keyword\">if</span> (!extension_loaded(<span class=\"hljs-string\">'curl'</span>)) {\n                        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\<span class=\"hljs-keyword\">Exception</span>(<span class=\"hljs-string\">'Curl extension, does\\'t loaded.'</span>);\n                }\n                $curl = curl_init();\n                curl_setopt($curl, CURLOPT_URL, $url);\n                curl_setopt($curl, CURLOPT_HEADER, <span class=\"hljs-keyword\">FALSE</span>);\n                curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"hljs-keyword\">TRUE</span>);\n                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\"hljs-keyword\">FALSE</span>);\n                curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class=\"hljs-keyword\">FALSE</span>);\n                $result = curl_exec($curl);\n                <span class=\"hljs-keyword\">return</span> $result;\n                <span class=\"hljs-comment\">//return file_get_contents($url); //ALTERNATIVE</span>\n        }\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@param</span> $data\n         * <span class=\"hljs-doctag\">@return</span> array|mixed\n         */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseJSON</span><span class=\"hljs-params\">($data)</span> </span>{\n                $json = json_decode($data);\n                <span class=\"hljs-keyword\">if</span>($json === <span class=\"hljs-keyword\">NULL</span>) {\n                        <span class=\"hljs-comment\">//Moc ryhlé požadavky na Fio API</span>\n                        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\<span class=\"hljs-keyword\">Exception</span>(<span class=\"hljs-string\">'Fio API overheated. Please wait...'</span>);\n                        <span class=\"hljs-comment\">//Když se posílá stále moc požadavků, tak se to z Exception nikdy nevyhrabe. Musí se opravdu počkat.</span>\n                }\n                <span class=\"hljs-keyword\">if</span>(!$json-&gt;accountStatement-&gt;transactionList) {\n                        <span class=\"hljs-keyword\">return</span> $json; <span class=\"hljs-comment\">// There are no transactions (header only)</span>\n                }\n                $payments = <span class=\"hljs-keyword\">array</span>();\n                <span class=\"hljs-keyword\">foreach</span> ($json-&gt;accountStatement-&gt;transactionList-&gt;transaction <span class=\"hljs-keyword\">as</span> $row) {\n                        $out = <span class=\"hljs-keyword\">array</span>();\n                        <span class=\"hljs-keyword\">foreach</span> ($row <span class=\"hljs-keyword\">as</span> $column) {\n                                <span class=\"hljs-keyword\">if</span> ($column) {\n                                        $out[$column-&gt;id] = $column-&gt;value; <span class=\"hljs-comment\">//v $column-&gt;name je název položky</span>\n                                        <span class=\"hljs-comment\">/*\n                                         * 0  - Datum\n                                         * 1  - Částka (!)\n                                         * 5  - Variabilní symbol (!)\n                                         * 14 - Měna (!)\n                                         * Hodnoty (!) se musí použít ke kontrole správnosti...\n                                         */</span>\n                                }\n                        }\n                        array_push($payments, $out);\n                }\n                <span class=\"hljs-keyword\">return</span> $payments;\n        }\n\n}\n</code></pre>\n<p>S tím, že je zapotřebí předat FIO klíč z neonu. FIO třída se automaticky injectuje, tzn. že i konstruktor\ntéto třídy bude doplněn automaticky. Je jen zapotřebí přidat do neonu onu konfiguraci:</p>\n<pre><code class=\"hljs lang-neon\">parameters:\n    fio_token: &#39;&#39; #token pro přístup do FIO banky\n\n...\n\nservices:\n    - Fresh\\Fio(token: %fio_token%)\n\n...\n</code></pre>\n<p>Bylo by vhodné upozornit na fakt, že se jedná pouze o read-only přístup, tzn. že neexistují žádné funkce\npro zápis (ačkoliv existuje něco jako datumová zarážka). Díky tomu je možné použít takovéto nízkoúrovňové\nzabezpečení pomocí jednoho tokenu.</p>\n"
});
