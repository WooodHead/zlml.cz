// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "id": "bd6cef8f-9b0a-48ff-a700-2aa32d89a32b",
    "timestamp": 1391334426000,
    "title": "Použití Texy s FSHL",
    "slug": "pouziti-texy-s-fshl"
  },
  "body": "<p>Někdy (hodně dávno) jsem kdesi našel poměrně hezký a jednoduchý postup jak implementovat <a href=\"http://texy.info/\">Texy .{target:_blank}</a> s použitím <a href=\"http://fshl.kukulich.cz/\">FSHL .{target:_blank}</a> na webu. Rád bych se zde podělil o postup, který používám již na řadě projektů, které potřebují zvýrazňování syntaxe.</p>\n<h2 id=\"pou-it-samotn-ho-texy\">Použití samotného Texy <a href=\"#pou-it-samotn-ho-texy\">#</a></h2><p>Běžně by se Texy zaregistrovalo do šablony jako helper:</p>\n<pre><code class=\"lang-php\">/**\n * @param null $class\n * @return Nette\\Templating\\ITemplate\n */\nprotected function createTemplate($class = NULL) {\n    $template = parent::createTemplate($class);\n    $texy = new \\Texy();\n    $template-&gt;registerHelper(&#39;texy&#39;, callback($texy, &#39;process&#39;));\n    return $template;\n}\n</code></pre>\n<p>Tento helper lze i nadále používat. Hodě se například pokud je potřeba Texy prvky naopak escapovat:</p>\n<pre><code>{$post-&gt;body|texy|striptags}\n</code></pre><h2 id=\"pou-it-texy-s-fshl\">Použití Texy s FSHL <a href=\"#pou-it-texy-s-fshl\">#</a></h2><p>Samotné texy je sice geniální nástroj. Pro samotné zpracování se zvýrazněním se však hodí funkcionalitu Texy rozšířit, jelikož je potřeba zpracovat vstupující text a ty správná místa prohnat také tím správným lexxerem ve FSHL. K tomu dobře poslouží následující třída, která dědí právě od Texy:</p>\n<pre><code class=\"lang-php\">&lt;?php\n\nclass fshlTexy extends Texy {\n\n    public function blockHandler($invocation, $blocktype, $content, $lang, $modifier) {\n        if ($blocktype !== &#39;block/code&#39;) {\n            return $invocation-&gt;proceed(); //vstup se nebude zpracovavat\n        }\n\n        $highlighter = new \\FSHL\\Highlighter(\n            new \\FSHL\\Output\\Html(),\n            \\FSHL\\Highlighter::OPTION_TAB_INDENT | \\FSHL\\Highlighter::OPTION_LINE_COUNTER\n        );\n\n        $texy = $invocation-&gt;getTexy();\n        $content = Texy::outdent($content);\n\n        //Set correct lexer:\n        switch(strtoupper($lang)) {\n            case &#39;CPP&#39;: $lexer = new \\FSHL\\Lexer\\Cpp(); break;\n            case &#39;CSS&#39;: $lexer = new \\FSHL\\Lexer\\Css(); break;\n            case &#39;HTML&#39;: $lexer = new \\FSHL\\Lexer\\Html(); break;\n            case &#39;JAVA&#39;: $lexer = new \\FSHL\\Lexer\\Java(); break;\n            case &#39;JAVASCRIPT&#39;: $lexer = new \\FSHL\\Lexer\\Javascript(); break;\n            case &#39;NEON&#39;: $lexer = new \\FSHL\\Lexer\\Neon(); break;\n            case &#39;PHP&#39;: $lexer = new \\FSHL\\Lexer\\Php(); break;\n            case &#39;PYTHON&#39;: $lexer = new \\FSHL\\Lexer\\Python(); break;\n            case &#39;SQL&#39;: $lexer = new \\FSHL\\Lexer\\Sql(); break;\n            case &#39;TEX&#39;: $lexer = new \\FSHL\\Lexer\\Tex(); break; //WARNING: vlastní výroba!\n            case &#39;TEXY&#39;: $lexer = new \\FSHL\\Lexer\\Texy(); break;\n            default: $lexer = new \\FSHL\\Lexer\\Minimal();\n        }\n\n        $content = $highlighter-&gt;highlight($content, $lexer);\n        $content = $texy-&gt;protect($content, Texy::CONTENT_BLOCK);\n\n        $elPre = TexyHtml::el(&#39;pre&#39;);\n        if ($modifier) {\n            $modifier-&gt;decorate($texy, $elPre);\n        }\n        $elPre-&gt;attrs[&#39;class&#39;] = strtolower($lang);\n\n        $elCode = $elPre-&gt;create(&#39;code&#39;, $content);\n\n        return $elPre;\n    }\n\n}\n</code></pre>\n<p>Tato třída při správném použití zajistí, že se použije ten správný lexer a ještě na úrovni PHP zajistí změnu výstupu. Konkrétně obalí určitá klíčová slova (v závislosti na kontextu) tagem <code>&lt;span&gt;</code> se zvláštní třídou. Toho se následně lze chytit v CSS a HTML výstup obarvit. Použití této třídy například v metodě <code>render*()</code>:</p>\n<pre><code class=\"lang-php\">$texy = new \\fshlTexy();\n//registrace handleru z nové třídy:\n$texy-&gt;addHandler(&#39;block&#39;, array($texy, &#39;blockHandler&#39;));\n//dále stejně jako klasické použití Texy:\n$texy-&gt;tabWidth = 4;\n$texy-&gt;headingModule-&gt;top = 3; //start at H3\n$this-&gt;template-&gt;body = $texy-&gt;process($post-&gt;body);\n</code></pre>\n<p>Výstup lze pak v Latte lehce podchytit a zobrazit:</p>\n<pre><code>{$body|noescape}\n</code></pre><h2 id=\"barvy-barvy-barvi-ky\">Barvy, barvy, barvičky <a href=\"#barvy-barvy-barvi-ky\">#</a></h2><p>Programově je sice tělo dokumentu vypsáno s tagy <code>&lt;span&gt;</code> s příslušnou třídou. To se však nijak viditelně neprojeví. Celou krásu udělá teprve CSS. Lze použít výchozí hodoty FSHL a vložit je do vlastního souboru stylů:</p>\n<pre><code class=\"lang-css\">/* Common */\n.xlang { color: #ff0000; font-weight: bold; }\n.line { color: #888888; background-color: #ffffff; }\n\n/* CSS */\n.css-at-rule { color: #004a80; font-weight: bold; }\n.css-tag { color: #004a80; }\n.css-id { color: #7da7d9; font-weight: bold; }\n.css-class { color: #004a80; }\n.css-pseudo { color: #004a80; }\n.css-property { color: #003663; font-weight: bold; }\n.css-value { color: #448ccb; }\n.css-func { color: #448ccb; font-weight: bold; }\n.css-color { color: #0076a3; }\n.css-comment { background-color: #e5f8ff; color: #999999; }\n\n/* CPP */\n.cpp-keywords1 {color: #0000ff; font-weight: bold;}\n.cpp-num {color: #ff0000;}\n.cpp-quote {color: #a52a2a; font-weight: bold;}\n.cpp-comment {color: #00ff00;}\n.cpp-preproc {color: #c0c0c0;}\n\n/* HTML */\n.html-tag {color: #598527; font-weight: bold;}\n.html-tagin {color: #89a315}\n.html-quote {color: #598527; font-weight: bold;}\n.html-comment {color: #999999; background-color: #f1fae4;}\n.html-entity {color: #89a315;}\n\n/* Java */\n.java-keywords1 {color: #0000ff; font-weight: bold;}\n.java-num {color: #ff0000;}\n.java-quote {color: #a52a2a; font-weight: bold;}\n.java-comment {color: #009900;}\n.java-preproc {color: #c0c0c0;}\n\n/* Javascript */\n.js-out {color: #898993;}\n.js-keywords1 {color: #575757; font-weight: bold;}\n.js-num {color: #575757;}\n.js-quote {color: #575757; font-weight: bold;}\n.js-comment {color: #898993; background-color: #f4f4f4;}\n\n/* Neon */\n.neon-section {color: #598527;}\n.neon-sep {color: #ff0000;}\n.neon-key {color: #0000ff;}\n.neon-comment {color: #999999;}\n.neon-value {color: #000000;}\n.neon-quote {color: #884433;}\n.neon-num {color: #448ccb;}\n.neon-var {color: #ffaa00;}\n.neon-ref {color: #884433;}\n\n/* PHP */\n.php-keyword1 {color: #dd2244; font-weight: bold;}\n.php-keyword2 {color: #dd2244;}\n.php-var {color: #ffaa00; font-weight: bold;}\n.php-num {color: #ff0000;}\n.php-quote {color: #884433; font-weight: bold;}\n.php-comment {color: #999999; background-color: #ffffee;}\n\n/* Python */\n.py-keyword1 {color: #0033cc; font-weight: bold;}\n.py-keyword2 {color: #ce3333; font-weight: bold;}\n.py-keyword3 {color: #660066; font-weight: bold;}\n.py-num {color: #993300;}\n.py-docstring {color: #e86a18;}\n.py-quote {color: #878787; font-weight: bold;}\n.py-comment {color: #009900; font-style: italic;}\n\n/* SQL */\n.sql-keyword1 {color: #dd0000; font-weight: bold;}\n.sql-keyword2 {color: #dd2222;}\n.sql-keyword3 {color: #0000ff; font-weight: bold;}\n.sql-value {color: #5674b9;}\n.sql-comment {color: #ffaa00;}\n.sql-num {color: #ff0000;}\n.sql-option {color: #004a80; font-weight: bold;}\n\n/* Tex */\n.tex-func {color: #ffaa00; font-weight: bold;}\n.tex-comment {color: #999999; background-color: #ffffee;}\n.tex-attr1 {color: #dd2222;}\n.tex-attr2 {color: #0000ff; font-weight: bold;}\n.tex-math {color: #00AA00; font-weight: bold;}\n\n/* Texy */\n.texy-hlead {color: #4444bb; font-weight: bold;}\n.texy-hbody {background-color: #eeeeff; color: #4444bb;}\n.texy-hr {color: #bb4444;}\n.texy-code {color: #666666;}\n.texy-html {color: #66aa66;}\n.texy-text {color: #6666aa;}\n.texy-err {background-color: #ff0000; color: #ffffff;}\n</code></pre>\n<p>Celá krása tohoto řešení spočívá v tom, že nepoužívám žádné javascriptové knihovny, ale vše se provede pěkně na úrovni PHP a bude to tedy fungovat vždy, stejně tak jako Texy... (-:</p>\n"
});
