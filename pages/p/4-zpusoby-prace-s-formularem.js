// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1488109164000,
    "title": "4 způsoby práce s formulářem v šabloně",
    "slug": "4-zpusoby-prace-s-formularem"
  },
  "body": "<p>Velká část článků na tomto blogu jsou reakcí na nějaký reálný problém. Nehledě na to, kde jsem (třeba na včerejším <a href=\"http://blog.id-sign.com/react-workshop/\">React workshopu</a>), tak odpovídám na dotazy ohledně Nette. Je to v pořádku, rád pomůžu. Jsou však dotazy, které se neustále opakují. Toto je jeden z nich:</p>\n<blockquote>\n<p>Formuláře v Nette jsou strašný voser. Jak to dělat lépe?</p>\n</blockquote>\n<p>Většinou takto vágně to vždy začíná. Následuje stejné kolečko - vysvětlím proč se to tak dělá, popíšu jiný přístup k formulářům, tazatel je spokojen, podívám se do dokumentace, že to tam opravdu je a čekám na další stejný dotaz. Proto si teď dovolím vyzdvihnout nad rámec dokumentace několik základních způsobů, jak s formuláři v Nette pracovat.</p>\n<h2 id=\"prvn-zp-sob-l-n-ota\">První způsob - líný Ota <a href=\"#prvn-zp-sob-l-n-ota\">#</a></h2><p>Tento způsob zná asi úplně každý. Pro superrychlé vytvoření formuláře jej stačí nadefinovat v presenteru nějak takto:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponentComplicatedForm</span><span class=\"hljs-params\">()</span>: \\<span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Application</span>\\<span class=\"hljs-title\">UI</span>\\<span class=\"hljs-title\">Form</span>\n</span>{\n  $form = <span class=\"hljs-keyword\">new</span> \\Nette\\Application\\UI\\Form;\n  $form-&gt;addSelect(<span class=\"hljs-string\">'selectNo1'</span>, <span class=\"hljs-keyword\">NULL</span>, [<span class=\"hljs-string\">'Item 1'</span>, <span class=\"hljs-string\">'Item 2'</span>]);\n  $form-&gt;addSubmit(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'Odeslat'</span>);\n  $form-&gt;onSuccess[] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(\\Nette\\Application\\UI\\Form $form, \\stdClass $values)</span> </span>{\n    bdump($values);\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\Nette\\NotImplementedException;\n  };\n  <span class=\"hljs-keyword\">return</span> $form;\n}\n</code></pre>\n<p>A použít v příslušné šabloně pomocí <code>control</code> makra:</p>\n<pre><code class=\"hljs\">{control complicatedForm}\n</code></pre><p>Je to velmi jednoduché řešení a prakticky se zase až tolik nepoužívá. Většina lidí přijde poměrně rychle na to, že potřebují daleko větší flexibilitu, kterou nabízí další způsob v pořadí. Podívejme se však co se děje když se takový formulář odešle. Plyne z toho totiž jedna důležitá vlastnost, na kterou bude potřeba myslet později.</p>\n<p>Formulář se odesílá jako takový zvláštní signál s těmito POST daty:</p>\n<pre><code class=\"hljs\">selectNo1=0&amp;send=Odeslat&amp;_do=complicatedForm-submit\n</code></pre><p>V průběhu životního cyklu presenteru (před <code>beforeRender</code>) dojde ke zpracování tohoto signálu. Konkrétně se nad formulářem zavolá metoda <code>signalReceived</code> resp. v případě formuláře <code>fireEvents</code>. Poměrně záhy se zavolají základní validace všech formulářových prvků. Schválně jsem v příkladu zvolil select, protože je na něm hezky vidět, že kontroluje co uživatel odeslal v selectu za hodnoty. Pokud je odeslaná hodnota k dispozici v předem nadefinovaném formuláři, tak se vybere. Co se stane pokud uživatel (záškodník) odešle něco jiného?</p>\n<pre><code class=\"hljs\">selectNo1=666&amp;send=Odeslat&amp;_do=complicatedForm-submit\n</code></pre><p>V tomto případě metoda <code>getValue</code> vrátí hodnotu <code>NULL</code> a validace takového formuláře nebude úspěšná. To vyústí v chybovou hlášku <code>Please select a valid option.</code> - automaticky. Asi známá vlastnost a do chvíle než řeknu jinak bude platit.</p>\n<h2 id=\"druh-zp-sob-ne-astn-karel\">Druhý způsob - nešťastný Karel <a href=\"#druh-zp-sob-ne-astn-karel\">#</a></h2><p>Zde se většina lidí zasekne a nádává. Protože vykreslování formuláře je v předchozím případě moc kostrbatá a vlastní PHP rendery nejsou moc nápomocné, přistoupíme k ručnímu vykreslování (místo <code>control</code> makra):</p>\n<pre><code class=\"hljs\">{form complicatedForm}\n  {input send}\n{/form}\n</code></pre><p>Už tady si většina lidí alespoň jednou vyláme zuby (já to dělám pravidelně). Předchozí kód totiž <strong>nebude fungovat</strong>. Formulář se ke vší smůle sice odešle, ale neudělá vůbec nic. Pro správné fungování je nutné vykreslit všechny formulářové prvky:</p>\n<pre><code class=\"hljs\">{form complicatedForm}\n  {input selectNo1}\n  {input send}\n{/form}\n</code></pre><p>Proč? Co se děje? Tato definice formuláře totiž není správná. Nette ví, že má být ve formuláři select a má mít nějaké hodnoty, ale ty hodnoty nesedí s tím, co bylo odesláno (pamatujete?). Interně se skutečně vyhodí chyba <code>Please select a valid option.</code>, ale tu nikde nevykreslujeme, takže se zdá, že to prostě nefunguje. No fakt, vyzkoušejte si to:</p>\n<pre><code class=\"hljs lang-html\">{form complicatedForm}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"errors\"</span> <span class=\"hljs-attr\">n:if</span>=<span class=\"hljs-string\">\"$form-&gt;hasErrors()\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">n:foreach</span>=<span class=\"hljs-string\">\"$form-&gt;errors as $error\"</span>&gt;</span>{$error}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  {*{input selectNo1}*}\n  {input send}\n{/form}\n</code></pre>\n<p>Na to je třeba dávat velký bacha. Tento způsob je dostatečný snad pro všechno co je potřeba. Prakticky je však nevhodný...</p>\n<h2 id=\"t-et-zp-sob-kod-rka-silvie\">Třetí způsob - kodérka Silvie <a href=\"#t-et-zp-sob-kod-rka-silvie\">#</a></h2><p>Je velká škoda, že o tomto způsobu neví spousta lidí co potkávám. Kodér většinou vymyslí nádhernou šablonu s formulářem (s mnohem komplikovanějším než je tento):</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeFormId\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"selectNo1\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeSelectId\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"send\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Odeslat\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<p>Teď se ale dostávám do problému, protože mám krásný formulář a měl bych jej zachovat. Mám však také jeho PHP definici a teď bych to potřeboval nějak naroubovat. Zde se stávají ty osudové chyby, kvůli kterým každý nadává - začne přepisování do druhého způsobu a hackování všeho co si kodér vymyslel. Když to dobře dopadne, tak bude formulář vypadat snad stejně jako vypadal původně. Snad...</p>\n<p>To je ale zbytečné. Existuje lepší způsob pomocí <code>n:name</code> makra v Latte. Skutečně formulář pouze naroubujeme na ten v PHP a smažeme nepotřebné věci:</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">n:name</span>=<span class=\"hljs-string\">\"complicatedForm\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeFormId\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">n:name</span>=<span class=\"hljs-string\">\"selectNo1\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeSelectId\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">n:name</span>=<span class=\"hljs-string\">\"send\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<p>Formulář funguje pořád stejně, ale dokonce se i zjednodušil! No nicméně asi je z toho cítit, že pořád je na straně PHP dost práce (vlastně vešká potřebná zodpovědnost) a svoboda v šabloně je jen částečná. Zde přichází ke slovu poslední způsob.</p>\n<h2 id=\"-tvrt-zp-sob-bl-zniv-joe\">Čtvrtý způsob - bláznivý Joe <a href=\"#-tvrt-zp-sob-bl-zniv-joe\">#</a></h2><p>Všechno dříve zmíněné se mi nemusí líbit. Kašlu na nějaké definice v PHP, kašlu na automatické kontroly. Chci prostě vzít formulář od kodéra, odeslat ho a sám si ho zpracovat. Je to tak těžké pochopit?! Není milý Joe. Co to udělat takto - začněme s naroubouváním formuláře (ale jen fomuláře!):</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">n:name</span>=<span class=\"hljs-string\">complicatedForm</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeFormId\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"selectNo1\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAwesomeSelectId\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"send\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Odeslat\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<p>Tím se zajistí, že se fomulář odešle na tu správnou adresu tou správnou metodou. Jinak jinak jsem do formuláře nezasáhl a je tedy úplně stejný, jako jej poslal kodér. Do puntíku. Veškerá data z formuláře jsou potom k dispozici zde:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponentComplicatedForm</span><span class=\"hljs-params\">()</span>: \\<span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Application</span>\\<span class=\"hljs-title\">UI</span>\\<span class=\"hljs-title\">Form</span>\n</span>{\n  $form = <span class=\"hljs-keyword\">new</span> \\Nette\\Application\\UI\\Form;\n  $form-&gt;onSuccess[] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(\\Nette\\Application\\UI\\Form $form)</span> </span>{\n    dump($form-&gt;getHttpData()); <span class=\"hljs-comment\">//ZDE</span>\n  };\n  <span class=\"hljs-keyword\">return</span> $form;\n}\n</code></pre>\n<p>Co se stane, když záškodník odešle něco co by nemělo v selectu být (viz první příklad)? Přesně tak, prostě se to odešle a na serveru to přistane. Veškerá kontrola je tedy na programátorovi. K samotné hodnotě selectu je možno přistouput takto:</p>\n<pre><code class=\"hljs lang-php\">$form-&gt;getHttpData($form::DATA_LINE, <span class=\"hljs-string\">'selectNo1'</span>)\n</code></pre>\n<p>To <code>DATA_LINE</code> je vhodné pro jednořádkové vstupy, protože se na pozadí provede následující ošetření:</p>\n<pre><code class=\"hljs lang-php\">\\Nette\\Utils\\Strings::trim(strtr($value, <span class=\"hljs-string\">\"\\r\\n\"</span>, <span class=\"hljs-string\">'  '</span>))\n</code></pre>\n<p>Pořád ale platí, že může přijít ze selectu nečekaná hodnota a nelze ničemu věřit. Jedná se však o naprosto svobodný způsob, který je možné kombinovat s předchozím. Pokud tedy máte <em>&quot;neskutečně složitý formulář&quot;</em>, který je <em>&quot;už nakódovaný&quot;</em> a jeho definice <em>&quot;má asi 500 řádek&quot;</em> a je to <em>&quot;tak komplikované, že se v tom nikdo nevyzná&quot;</em> a bylo by <em>&quot;lepší, kdybych si to mohl udělat sám&quot;</em>, tak vězte, že to jde.</p>\n<h2 id=\"-ast-dotazy\">Časté dotazy <a href=\"#-ast-dotazy\">#</a></h2><ul>\n<li>Použil jsi to někdy ve skutečnosti? Ano.</li>\n<li>Je tam nějaký problém o kterém bych měl vědět? Krom již zmiňovaného nevím o žádném. Je to prostě růčo fůčo...</li>\n<li>Proč to není v dokumentaci? <a href=\"https://doc.nette.org/en/2.4/forms#toc-manual-rendering\">Je to tam.</a></li>\n<li>Proč není ten poslední způsob v dokumentaci? <a href=\"https://doc.nette.org/en/2.4/forms#toc-low-level-forms\">Je to tam.</a></li>\n<li>Tak to tedy není v české verzi! I tam <a href=\"https://doc.nette.org/cs/2.4/forms#toc-low-level-formulare\">to</a> obojí <a href=\"https://doc.nette.org/cs/2.4/forms#toc-manualni-vykreslovani\">je</a></li>\n<li>Tak to tam dřív nebylo. Je to tam <a href=\"https://doc.nette.org/cs/2.1/forms\">od verze 2.1</a>, kdy se tato možnost objevila.</li>\n<li>I ve staré EN verzi? <a href=\"https://doc.nette.org/en/2.1/forms\">Ano</a></li>\n<li>Šlo by to udělat i bez <code>getHttpData</code>? Ano, ale už v tom nevidím moc velký smysl.</li>\n<li>Proč? To už bych mohl rovnou pracovat s <code>$_POST</code>, ale tato metoda mě pěkně odstíní a <a href=\"https://api.nette.org/2.4/source-Forms.Form.php.html#385-403\">ošetří celou řadu potřebných věcí</a>.</li>\n<li>Ale ve <em>{$frameworkName}</em> se to dělá jinak a lépe! Použij tedy <em>{$frameworkName}</em> nebo jeho podčást.</li>\n</ul>\n<p>:)</p>\n"
});
