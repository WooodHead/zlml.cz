// @flow

import WithPost from '../../components/WithPost';

export default WithPost({
  "attributes": {
    "timestamp": 1475925989000,
    "title": "Automatický render prvků při manuálním vykreslování formuláře",
    "slug": "automaticky-render-prvku-pri-manualnim-vykreslovani-formulare"
  },
  "body": "<p>Je čas na nějakou tu Nette divočinu. Podívejme se pod drobnohledem na to, jak funguje vykreslování prvků formuláře. Nejprve si vytvoříme úplně jednoduchý formulář, který bude obsahovat jeden prvek:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponentContactForm</span><span class=\"hljs-params\">()</span>\n</span>{\n    $form = <span class=\"hljs-keyword\">new</span> UI\\Form();\n    $form-&gt;addSubmit(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'Odeslat'</span>);\n    $form-&gt;onSuccess[] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(UI\\Form $form, $values)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\Nette\\NotImplementedException;\n    };\n    <span class=\"hljs-keyword\">return</span> $form;\n}\n</code></pre>\n<p>Jak bude vypadat takový formulář když jej vykreslíme pomocí <code>{control contactForm}</code>? Ve výchozím projektu asi nějak takto:</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/web-project/www/\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"frm-contactForm\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"send\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Odeslat\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"button\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"hidden\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"_do\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"contactForm-submit\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<p>Aniž se budeme nořit do detailů, tak je zřejmé, že se kromě našeho odesílacího inputu vyrenderoval i nějaký hidden input automaticky. Než se posuneme dále z tohoto úvodu, zjistíme ještě, co se stane při manuálním vykreslování:</p>\n<pre><code class=\"hljs lang-latte\">{form contactForm}\n    {input send}\n{/form}\n</code></pre>\n<p>Ačkoliv to není nikde dané, i v tomto případě se vykreslil další input prvek automaticky:</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/web-project/www/\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"frm-contactForm\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"send\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Odeslat\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"hidden\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"_do\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"contactForm-submit\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<h2 id=\"chytr-antispam-prvek\">Chytrý antispam prvek <a href=\"#chytr-antispam-prvek\">#</a></h2><p>Po krátkém úvodu (který je zcela jistě každému jasný) se přesuneme k něčemu zdánlivě jinému. Vytvoříme si chytrý antispam prvek a zjistíme, jak se bude při renderování chovat a jestli se vždy chová předvídatelně. A asi nebude překvapením, že se v určité situaci zachová moc moc špatně. Jedná se o delší kód, takže jej <a href=\"https://gist.github.com/mrtnzlml/95ac7726cf2788d83e3c87bc97dbef3a\">najdete na Gistu</a>. Prakticky nejde o nic jiného, než že si vytvoříme vlastní antispam prvek. Tento prvek funguje tak, že vytvoří input ve kterém je nějaký text a pokud je k dispozici javascript, tak jej schová a smaže obsah. V tom případě je kontrola v pořádku, protože tiše předpokládá, že útočníkův robot nebude umět JS. Ačkoliv se to v dnešní době může zdát jako absurdní, tak to pořád funguje velmi dobře. Navíc přidává ještě pár honeypotů a doufá, že někde robot uvízne. Důležité je, že nijak neobtěžuje běžného návštěvníka - prostě to není vůbec vidět.</p>\n<p>Napíšeme si jednoduché rozšíření pro DI kontejner, aby bylo možné tento nový prvek používat:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">App</span>;\n\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Forms</span>\\<span class=\"hljs-title\">Form</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HoneypotExtension</span> <span class=\"hljs-keyword\">extends</span> \\<span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">DI</span>\\<span class=\"hljs-title\">CompilerExtension</span>\n</span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">afterCompile</span><span class=\"hljs-params\">(\\Nette\\PhpGenerator\\ClassType $class)</span>\n    </span>{\n        $init = $class-&gt;methods[<span class=\"hljs-string\">'initialize'</span>];\n        $init-&gt;addBody(<span class=\"hljs-keyword\">self</span>::class . <span class=\"hljs-string\">'::registerControlExtensionMethods();'</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">registerControlExtensionMethods</span><span class=\"hljs-params\">()</span>\n    </span>{\n        Form::extensionMethod(<span class=\"hljs-string\">'addAntispam'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(Form $form, $name = <span class=\"hljs-string\">'honeypot'</span>, $label = <span class=\"hljs-string\">'Vymažte toto pole'</span>)</span> </span>{\n            $form[$name . <span class=\"hljs-string\">'_1'</span>] = <span class=\"hljs-keyword\">new</span> \\App\\Forms\\AntispamControl($name, $label);\n            <span class=\"hljs-keyword\">return</span> $form;\n        });\n    }\n\n}\n</code></pre>\n<p>Toto rozšíření samozřejmě zaregistrujeme v konfiguračním souboru:</p>\n<pre><code class=\"hljs lang-neon\">extensions:\n    - App\\HoneypotExtension\n</code></pre>\n<p>A je to - v našem původním formuláři můžeme použít nový prvek:</p>\n<pre><code class=\"hljs lang-php\">$form = <span class=\"hljs-keyword\">new</span> UI\\Form();\n$form-&gt;addAntispam();\n<span class=\"hljs-comment\">//...</span>\n</code></pre>\n<p>Je to trošku magie a IDE si s tím neporadí. Proto nebude našeptávat. V tomto případě doporučuji napsat si nějakou vlastní <code>FormFactory</code>, která bude vytváře instance <code>UI\\Form</code> a do této třídy doplnit anotaci <code>@method addAntispam()</code>. Udělat si vlastní továrničku na <code>UI\\Form</code> není vůbec špatný nápad a to nejen pro antispam. Just do it.</p>\n<p>Tak a teď když máme funkční antispam a honeypoty formuláře, je čas kouknout se co se děje při renderování. Nejdříve automatické - pomocí <code>{control contactForm}</code>. Zde není co řešit. Prostě se všechny potřebná políčka vyrenderují a vše je tak, jak by mělo být. A co manuální vykreslování? Zde začíná ta nepříjemná část. Nette nemůže vědět, že by měl automaticky vykreslit i další prvky, takže je prostě nevykreslí. Praktická zkušenost je taková, že při manuálním vykreslování prostě antispam přestane fungovat. Zde se musíme ještě zasnažit.</p>\n<h2 id=\"chyt-ej-antispam-prvek\">Chytřejší antispam prvek <a href=\"#chyt-ej-antispam-prvek\">#</a></h2><p>Teď musíme jít fakt na dřeň problému. Jak vlastně funguje to automatické renderování inputu při manuálním vykreslování? Existuje něco jako třída <code>Nette\\Bridges\\FormsLatte\\Runtime</code>, která má dvě metody: <code>renderFormBegin</code> a <code>renderFormEnd</code>. Právě druhá zmíněná přidává nějaký vlastní kód a je jedno, jestli se jedná o manuální, nebo automatické renderování formuláře. To by se nám hodilo. Vytvořme si tedy vlastní <code>Runtime</code> třídu. Není potřeba aby tato třída dědila od původní. Stačí, když si vykopírujeme metodu <code>renderFormEnd</code> a lehounce pozměníme prostřední foreach:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">foreach</span> ($form-&gt;getControls() <span class=\"hljs-keyword\">as</span> $control) {\n    <span class=\"hljs-keyword\">if</span> ($control-&gt;getOption(<span class=\"hljs-string\">'autorender'</span>) || ($control-&gt;getOption(<span class=\"hljs-string\">'type'</span>) === <span class=\"hljs-string\">'hidden'</span> &amp;&amp; !$control-&gt;getOption(<span class=\"hljs-string\">'rendered'</span>))) {\n        $s .= $control-&gt;getControl();\n    }\n}\n</code></pre>\n<p>Přesně tak. Všechny čáry a kouzla se aktivují, když nastavíme prvkům <code>autorender</code> (<a href=\"https://gist.github.com/mrtnzlml/95ac7726cf2788d83e3c87bc97dbef3a\">viz Gist</a>). Jenže kde se tato třída původně používala? Kde ji použijeme nyní?</p>\n<p>Řešení najdeme opět v namespace <code>Nette\\Bridges\\FormsLatte</code>, tentokrát však ve třídě <code>FormMacros</code>, která registruje formulářová makra. Vytvoříme si tedy vlastní implementaci <code>FormMacros</code> třídy, která bude dědit od původní:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FormMacros</span> <span class=\"hljs-keyword\">extends</span> \\<span class=\"hljs-title\">Nette</span>\\<span class=\"hljs-title\">Bridges</span>\\<span class=\"hljs-title\">FormsLatte</span>\\<span class=\"hljs-title\">FormMacros</span>\n</span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">install</span><span class=\"hljs-params\">(\\Latte\\Compiler $compiler)</span>\n    </span>{\n        $me = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">static</span>($compiler);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'form'</span>, [$me, <span class=\"hljs-string\">'macroForm'</span>], <span class=\"hljs-string\">'echo \\App\\Forms\\Runtime::renderFormEnd(array_pop($this-&gt;global-&gt;formsStack));'</span>);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'formContainer'</span>, [$me, <span class=\"hljs-string\">'macroFormContainer'</span>], <span class=\"hljs-string\">'array_pop($this-&gt;global-&gt;formsStack); $formContainer = $_form = end($this-&gt;global-&gt;formsStack)'</span>);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'label'</span>, [$me, <span class=\"hljs-string\">'macroLabel'</span>], [$me, <span class=\"hljs-string\">'macroLabelEnd'</span>], <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-keyword\">self</span>::AUTO_EMPTY);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'input'</span>, [$me, <span class=\"hljs-string\">'macroInput'</span>]);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'name'</span>, [$me, <span class=\"hljs-string\">'macroName'</span>], [$me, <span class=\"hljs-string\">'macroNameEnd'</span>], [$me, <span class=\"hljs-string\">'macroNameAttr'</span>]);\n        $me-&gt;addMacro(<span class=\"hljs-string\">'inputError'</span>, [$me, <span class=\"hljs-string\">'macroInputError'</span>]);\n    }\n\n}\n</code></pre>\n<p>Důležitá je zde registrace makra <code>{form}</code>, protože to pro svojí uzavírací značku používá novou implementaci <code>Runtime</code> (tu která podporuje autorender). Zaregistrujeme:</p>\n<pre><code class=\"hljs lang-neon\">latte:\n    macros:\n        - App\\Forms\\FormMacros::install\n</code></pre>\n<p>Smažeme cache a profitujeme. Nyní se autospam vykresluje automaticky i při manuálním renderování... :)</p>\n<p>Podobně lze samozřejmě přidat i další kontroly jako je například kontrolní součet dvou čísel, který se javascriptem předvypočte automaticky, ale s vypnutým javascriptem se zobrazí políčka pro uživatele. Řešení tohoto antispamu je také <a href=\"https://gist.github.com/mrtnzlml/961c3e2368e98aaa433e02c6603a5086\">na mém Gistu</a>. Jen je potřeba trošku rozšířit <code>HoneypotExtension</code>:</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">registerControlExtensionMethods</span><span class=\"hljs-params\">()</span>\n</span>{\n    Form::extensionMethod(<span class=\"hljs-string\">'addAntispam'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(Form $form, $name = <span class=\"hljs-string\">'honeypot'</span>, $label = <span class=\"hljs-string\">'Vymažte toto pole'</span>)</span> </span>{\n        $form[$name . <span class=\"hljs-string\">'_1'</span>] = <span class=\"hljs-keyword\">new</span> \\App\\AntispamControl($name, $label);\n\n        $first = round(rand(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">900</span>), <span class=\"hljs-number\">-2</span>);\n        $second = rand(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">99</span>);\n        $validationData = <span class=\"hljs-keyword\">self</span>::encodeNumber($first) . <span class=\"hljs-string\">';'</span> . <span class=\"hljs-keyword\">self</span>::encodeNumber($second);\n        $form-&gt;addHidden(<span class=\"hljs-string\">'validationData'</span>, $validationData)-&gt;setOmitted(<span class=\"hljs-keyword\">TRUE</span>)-&gt;setOption(<span class=\"hljs-string\">'autorender'</span>, <span class=\"hljs-keyword\">TRUE</span>);\n        $form[$name . <span class=\"hljs-string\">'_3'</span>] = <span class=\"hljs-keyword\">new</span> \\App\\Forms\\SumAntispamControl($first, $second, $validationData);\n\n        <span class=\"hljs-keyword\">return</span> $form;\n    });\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">encodeNumber</span><span class=\"hljs-params\">($originalNumber)</span>\n</span>{\n    <span class=\"hljs-keyword\">return</span> strtr($originalNumber, <span class=\"hljs-string\">'0123456789'</span>, <span class=\"hljs-string\">'(_.!)@-*+&amp;'</span>); <span class=\"hljs-comment\">//cannot contain ';' character</span>\n}\n</code></pre>\n<p>Původní kód zůstává stejný, jen jsem přidal další kontrolu a zakódoval číslice tak, aby nebylo jednoduché na první pohled poznat princip tohoto antispamu. Ve fantazii se meze nekladou.</p>\n<p>A právě v tom je možná trošku problém. Zejména kvůli autorender funkci je potřeba zasahovat do vnitřností Nette a zde je již na pováženou, jestli je to dobře či nikoliv. Velké úskalí vidím v tom, že si programátor vyměňuje stavební kameny Nette za svoje trošku upravené a to nemusí být vždy hned evidentní. Pak je na zamyšlenou, jestli by nestálo za to vytvořit PR. Kdo by ale stál o takovou hovadinu... :)</p>\n"
});
